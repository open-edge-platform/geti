# INTEL CONFIDENTIAL
#
# Copyright (C) 2025 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and your use of them is governed by
# the express license under which they were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
# without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

CWD = $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
include $(CWD)/Makefile.shared

.PHONY: tests test-unit test-component test-integration \
		static-code-analysis ruff mypy style-fix \
		venv-clean pre-venv venv venv-lock venv-dev

VIRTUALENV_DIR       := .venv-${COMPONENT_NAME}
VIRTUALENV_BIN       := $(VIRTUALENV_DIR)/bin
ACTIVATE             := $(VIRTUALENV_BIN)/activate
VIRTUALENV_MARK      := $(VIRTUALENV_DIR)/venv
DEV_VIRTUALENV_MARK  := $(VIRTUALENV_DIR)/dev

PYTHONPATH_LOCAL     := tests:app

# Dev environment
PYTHON_VERSION       := python3.10
PIP_VERSION          := 24.2
SETUPTOOLS_VERSION   := 75.1.0
WHEEL_VERSION        := 0.40.0

# PIP installation command
PIP_INSTALL_PARAMS   := --isolated \
					    --retries 5 \
					    --default-timeout=60 \
					    --trusted-host pypi.org \
					    --trusted-host pypi.python.org \
					    --trusted-host files.pythonhosted.org

# build contexts for python based images
DOCKER_BUILD_CONTEXT := --build-context base_python=docker-image://${BASE_IMAGES_REGISTRY}/base-python:${BASE_PYTHON_IMAGE_TAG} \
						--build-context dev_python=docker-image://${BASE_IMAGES_REGISTRY}/dev-python:${BASE_DEV_PYTHON_IMAGE_TAG} \

venv-clean:
	@rm -rf $(VIRTUALENV_DIR)

pre-venv: venv-clean $(ACTIVATE)
$(ACTIVATE):
	@$(PYTHON_VERSION) -m venv $(VIRTUALENV_DIR)
	@. $(ACTIVATE); pip install ${PIP_INSTALL_PARAMS} -U \
		pip==${PIP_VERSION} \
		setuptools==${SETUPTOOLS_VERSION} \
		wheel==${WHEEL_VERSION}
	make install_common_libs

venv: pre-venv $(VIRTUALENV_MARK)
$(VIRTUALENV_MARK):
	@touch $(VIRTUALENV_MARK)
	@. $(ACTIVATE); pip install ${PIP_INSTALL_PARAMS} -r ./requirements-lock.txt

venv-lock: pre-venv
	@. $(ACTIVATE); pip install ${PIP_INSTALL_PARAMS} -r ./requirements.txt
	@. $(ACTIVATE); pip list --format=freeze | grep -v '^pkg_resources' > ./requirements-lock.txt
	sed -i '1i #AUTO-GENERATED BY MAKE VENV-LOCK, DO NOT EDIT MANUALLY.' ./requirements-lock.txt

venv-dev: venv $(DEV_VIRTUALENV_MARK)
$(DEV_VIRTUALENV_MARK):
	@touch $(DEV_VIRTUALENV_MARK)
	@. $(ACTIVATE); pip install ${PIP_INSTALL_PARAMS} -r ./tests/requirements-dev.txt

tests: test-unit test-component test-integration

test-unit: venv-dev
	@. $(ACTIVATE); \
	PYTHONPATH=$(PYTHONPATH_LOCAL) \
	pytest --disable-warnings ./tests/unit \
            --cov-branch \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:reports/coverage.xml \
            --cov-report=html:reports/coverage_html \
            --html=reports/pytest-report.html \
            -v

test-component: venv-dev
	@echo "Not implemented yet"

test-integration: venv-dev
	@echo "Not implemented yet"

static-code-analysis: ruff mypy

ruff: venv-dev
	@. $(ACTIVATE); ruff check \
		./app \
		./tests \
		--config ./pyproject.toml

mypy: venv-dev
	@. $(ACTIVATE); mypy \
		$(if $(FILES),$(FILES),.) \
		--config-file=./pyproject.toml

style-fix: venv-dev
	@. $(ACTIVATE); ruff check \
		./app \
		./tests \
		--config ./pyproject.toml \
		--fix \
		--exit-non-zero-on-fix
	@. $(ACTIVATE); ruff format \
		./app \
		./tests \
		--config ./pyproject.toml
