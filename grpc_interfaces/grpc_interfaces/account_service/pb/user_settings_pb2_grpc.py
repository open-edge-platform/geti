# INTEL CONFIDENTIAL
# 
# Copyright (C) 2025 Intel Corporation
# 
# This software and the related documents are Intel copyrighted materials, and your use of them is governed by
# the express license under which they were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
# without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import user_settings_pb2 as user__settings__pb2


class UserSettingsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/user_settings.UserSettingsService/create',
                request_serializer=user__settings__pb2.UserSettingsCreateRequest.SerializeToString,
                response_deserializer=user__settings__pb2.UserSettingsResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/user_settings.UserSettingsService/get',
                request_serializer=user__settings__pb2.UserSettingsRequest.SerializeToString,
                response_deserializer=user__settings__pb2.UserSettings.FromString,
                )


class UserSettingsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """POST /user_settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """GET /user_settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserSettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=user__settings__pb2.UserSettingsCreateRequest.FromString,
                    response_serializer=user__settings__pb2.UserSettingsResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=user__settings__pb2.UserSettingsRequest.FromString,
                    response_serializer=user__settings__pb2.UserSettings.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user_settings.UserSettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserSettingsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_settings.UserSettingsService/create',
            user__settings__pb2.UserSettingsCreateRequest.SerializeToString,
            user__settings__pb2.UserSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_settings.UserSettingsService/get',
            user__settings__pb2.UserSettingsRequest.SerializeToString,
            user__settings__pb2.UserSettings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
