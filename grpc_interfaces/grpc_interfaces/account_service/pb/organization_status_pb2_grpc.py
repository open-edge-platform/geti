# INTEL CONFIDENTIAL
# 
# Copyright (C) 2025 Intel Corporation
# 
# This software and the related documents are Intel copyrighted materials, and your use of them is governed by
# the express license under which they were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
# without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import organization_pb2 as organization__pb2
from . import organization_status_pb2 as organization__status__pb2


class OrganizationStatusStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.change = channel.unary_unary(
                '/organization_status.OrganizationStatus/change',
                request_serializer=organization__status__pb2.OrganizationStatusRequest.SerializeToString,
                response_deserializer=organization__status__pb2.OrganizationStatusResponse.FromString,
                )
        self.get_statuses = channel.unary_unary(
                '/organization_status.OrganizationStatus/get_statuses',
                request_serializer=organization__pb2.OrganizationIdRequest.SerializeToString,
                response_deserializer=organization__status__pb2.ListOrganizationStatusesResponse.FromString,
                )


class OrganizationStatusServicer(object):
    """Missing associated documentation comment in .proto file."""

    def change(self, request, context):
        """PUT /organizations/{id}/statuses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_statuses(self, request, context):
        """GET /organizations/{id}/statuses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrganizationStatusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'change': grpc.unary_unary_rpc_method_handler(
                    servicer.change,
                    request_deserializer=organization__status__pb2.OrganizationStatusRequest.FromString,
                    response_serializer=organization__status__pb2.OrganizationStatusResponse.SerializeToString,
            ),
            'get_statuses': grpc.unary_unary_rpc_method_handler(
                    servicer.get_statuses,
                    request_deserializer=organization__pb2.OrganizationIdRequest.FromString,
                    response_serializer=organization__status__pb2.ListOrganizationStatusesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'organization_status.OrganizationStatus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrganizationStatus(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def change(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/organization_status.OrganizationStatus/change',
            organization__status__pb2.OrganizationStatusRequest.SerializeToString,
            organization__status__pb2.OrganizationStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_statuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/organization_status.OrganizationStatus/get_statuses',
            organization__pb2.OrganizationIdRequest.SerializeToString,
            organization__status__pb2.ListOrganizationStatusesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
