// INTEL CONFIDENTIAL
//
// Copyright (C) 2024 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: membership_status.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserStatus_Change_FullMethodName = "/user_status_proto.UserStatus/change"
)

// UserStatusClient is the client API for UserStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStatusClient interface {
	// PUT /organizations/{organization_id}/users/{user_id}/statuses
	Change(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error)
}

type userStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusClient(cc grpc.ClientConnInterface) UserStatusClient {
	return &userStatusClient{cc}
}

func (c *userStatusClient) Change(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatusResponse)
	err := c.cc.Invoke(ctx, UserStatus_Change_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStatusServer is the server API for UserStatus service.
// All implementations must embed UnimplementedUserStatusServer
// for forward compatibility.
type UserStatusServer interface {
	// PUT /organizations/{organization_id}/users/{user_id}/statuses
	Change(context.Context, *UserStatusRequest) (*UserStatusResponse, error)
	mustEmbedUnimplementedUserStatusServer()
}

// UnimplementedUserStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserStatusServer struct{}

func (UnimplementedUserStatusServer) Change(context.Context, *UserStatusRequest) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedUserStatusServer) mustEmbedUnimplementedUserStatusServer() {}
func (UnimplementedUserStatusServer) testEmbeddedByValue()                    {}

// UnsafeUserStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusServer will
// result in compilation errors.
type UnsafeUserStatusServer interface {
	mustEmbedUnimplementedUserStatusServer()
}

func RegisterUserStatusServer(s grpc.ServiceRegistrar, srv UserStatusServer) {
	// If the following call pancis, it indicates UnimplementedUserStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserStatus_ServiceDesc, srv)
}

func _UserStatus_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatus_Change_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServer).Change(ctx, req.(*UserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStatus_ServiceDesc is the grpc.ServiceDesc for UserStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_status_proto.UserStatus",
	HandlerType: (*UserStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "change",
			Handler:    _UserStatus_Change_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "membership_status.proto",
}

const (
	Membership_GetMemberships_FullMethodName     = "/user_status_proto.Membership/GetMemberships"
	Membership_Modify_FullMethodName             = "/user_status_proto.Membership/Modify"
	Membership_GetUserMemberships_FullMethodName = "/user_status_proto.Membership/GetUserMemberships"
	Membership_DeleteMemberships_FullMethodName  = "/user_status_proto.Membership/DeleteMemberships"
)

// MembershipClient is the client API for Membership service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembershipClient interface {
	// GET /organization/{organization_id}/memberships
	GetMemberships(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*ListMembershipResponse, error)
	// PUT /organizations/{organization_id}/memberships/{user_id}
	Modify(ctx context.Context, in *MembershipStatusRequest, opts ...grpc.CallOption) (*MembershipStatusResponse, error)
	// GET /users/{user_id}/memberships
	GetUserMemberships(ctx context.Context, in *UserMembershipRequest, opts ...grpc.CallOption) (*ListUserMembershipResponse, error)
	// DELETE /organizations/{organization_id}/memberships/{user_id}
	DeleteMemberships(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type membershipClient struct {
	cc grpc.ClientConnInterface
}

func NewMembershipClient(cc grpc.ClientConnInterface) MembershipClient {
	return &membershipClient{cc}
}

func (c *membershipClient) GetMemberships(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*ListMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembershipResponse)
	err := c.cc.Invoke(ctx, Membership_GetMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) Modify(ctx context.Context, in *MembershipStatusRequest, opts ...grpc.CallOption) (*MembershipStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembershipStatusResponse)
	err := c.cc.Invoke(ctx, Membership_Modify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) GetUserMemberships(ctx context.Context, in *UserMembershipRequest, opts ...grpc.CallOption) (*ListUserMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserMembershipResponse)
	err := c.cc.Invoke(ctx, Membership_GetUserMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) DeleteMemberships(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Membership_DeleteMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembershipServer is the server API for Membership service.
// All implementations must embed UnimplementedMembershipServer
// for forward compatibility.
type MembershipServer interface {
	// GET /organization/{organization_id}/memberships
	GetMemberships(context.Context, *MembershipRequest) (*ListMembershipResponse, error)
	// PUT /organizations/{organization_id}/memberships/{user_id}
	Modify(context.Context, *MembershipStatusRequest) (*MembershipStatusResponse, error)
	// GET /users/{user_id}/memberships
	GetUserMemberships(context.Context, *UserMembershipRequest) (*ListUserMembershipResponse, error)
	// DELETE /organizations/{organization_id}/memberships/{user_id}
	DeleteMemberships(context.Context, *DeleteMembershipRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMembershipServer()
}

// UnimplementedMembershipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMembershipServer struct{}

func (UnimplementedMembershipServer) GetMemberships(context.Context, *MembershipRequest) (*ListMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberships not implemented")
}
func (UnimplementedMembershipServer) Modify(context.Context, *MembershipStatusRequest) (*MembershipStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedMembershipServer) GetUserMemberships(context.Context, *UserMembershipRequest) (*ListUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMemberships not implemented")
}
func (UnimplementedMembershipServer) DeleteMemberships(context.Context, *DeleteMembershipRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberships not implemented")
}
func (UnimplementedMembershipServer) mustEmbedUnimplementedMembershipServer() {}
func (UnimplementedMembershipServer) testEmbeddedByValue()                    {}

// UnsafeMembershipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembershipServer will
// result in compilation errors.
type UnsafeMembershipServer interface {
	mustEmbedUnimplementedMembershipServer()
}

func RegisterMembershipServer(s grpc.ServiceRegistrar, srv MembershipServer) {
	// If the following call pancis, it indicates UnimplementedMembershipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Membership_ServiceDesc, srv)
}

func _Membership_GetMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).GetMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Membership_GetMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).GetMemberships(ctx, req.(*MembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Membership_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).Modify(ctx, req.(*MembershipStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_GetUserMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).GetUserMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Membership_GetUserMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).GetUserMemberships(ctx, req.(*UserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_DeleteMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).DeleteMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Membership_DeleteMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).DeleteMemberships(ctx, req.(*DeleteMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Membership_ServiceDesc is the grpc.ServiceDesc for Membership service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Membership_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_status_proto.Membership",
	HandlerType: (*MembershipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemberships",
			Handler:    _Membership_GetMemberships_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Membership_Modify_Handler,
		},
		{
			MethodName: "GetUserMemberships",
			Handler:    _Membership_GetUserMemberships_Handler,
		},
		{
			MethodName: "DeleteMemberships",
			Handler:    _Membership_DeleteMemberships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "membership_status.proto",
}
