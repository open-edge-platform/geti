// INTEL CONFIDENTIAL
//
// Copyright (C) 2023 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: organization_status.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganizationStatus_Change_FullMethodName      = "/organization_status.OrganizationStatus/change"
	OrganizationStatus_GetStatuses_FullMethodName = "/organization_status.OrganizationStatus/get_statuses"
)

// OrganizationStatusClient is the client API for OrganizationStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationStatusClient interface {
	// PUT /organizations/{id}/statuses
	Change(ctx context.Context, in *OrganizationStatusRequest, opts ...grpc.CallOption) (*OrganizationStatusResponse, error)
	// GET /organizations/{id}/statuses
	GetStatuses(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*ListOrganizationStatusesResponse, error)
}

type organizationStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationStatusClient(cc grpc.ClientConnInterface) OrganizationStatusClient {
	return &organizationStatusClient{cc}
}

func (c *organizationStatusClient) Change(ctx context.Context, in *OrganizationStatusRequest, opts ...grpc.CallOption) (*OrganizationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationStatusResponse)
	err := c.cc.Invoke(ctx, OrganizationStatus_Change_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationStatusClient) GetStatuses(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*ListOrganizationStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationStatusesResponse)
	err := c.cc.Invoke(ctx, OrganizationStatus_GetStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationStatusServer is the server API for OrganizationStatus service.
// All implementations must embed UnimplementedOrganizationStatusServer
// for forward compatibility.
type OrganizationStatusServer interface {
	// PUT /organizations/{id}/statuses
	Change(context.Context, *OrganizationStatusRequest) (*OrganizationStatusResponse, error)
	// GET /organizations/{id}/statuses
	GetStatuses(context.Context, *OrganizationIdRequest) (*ListOrganizationStatusesResponse, error)
	mustEmbedUnimplementedOrganizationStatusServer()
}

// UnimplementedOrganizationStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationStatusServer struct{}

func (UnimplementedOrganizationStatusServer) Change(context.Context, *OrganizationStatusRequest) (*OrganizationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedOrganizationStatusServer) GetStatuses(context.Context, *OrganizationIdRequest) (*ListOrganizationStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatuses not implemented")
}
func (UnimplementedOrganizationStatusServer) mustEmbedUnimplementedOrganizationStatusServer() {}
func (UnimplementedOrganizationStatusServer) testEmbeddedByValue()                            {}

// UnsafeOrganizationStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationStatusServer will
// result in compilation errors.
type UnsafeOrganizationStatusServer interface {
	mustEmbedUnimplementedOrganizationStatusServer()
}

func RegisterOrganizationStatusServer(s grpc.ServiceRegistrar, srv OrganizationStatusServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganizationStatus_ServiceDesc, srv)
}

func _OrganizationStatus_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationStatusServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationStatus_Change_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationStatusServer).Change(ctx, req.(*OrganizationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationStatus_GetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationStatusServer).GetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationStatus_GetStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationStatusServer).GetStatuses(ctx, req.(*OrganizationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationStatus_ServiceDesc is the grpc.ServiceDesc for OrganizationStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization_status.OrganizationStatus",
	HandlerType: (*OrganizationStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "change",
			Handler:    _OrganizationStatus_Change_Handler,
		},
		{
			MethodName: "get_statuses",
			Handler:    _OrganizationStatus_GetStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization_status.proto",
}
