// INTEL CONFIDENTIAL
//
// Copyright (C) 2024 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: organization.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Organization_Create_FullMethodName               = "/organization.Organization/create"
	Organization_Modify_FullMethodName               = "/organization.Organization/modify"
	Organization_GetById_FullMethodName              = "/organization.Organization/get_by_id"
	Organization_Find_FullMethodName                 = "/organization.Organization/find"
	Organization_Delete_FullMethodName               = "/organization.Organization/delete"
	Organization_AddPhoto_FullMethodName             = "/organization.Organization/add_photo"
	Organization_DeletePhoto_FullMethodName          = "/organization.Organization/delete_photo"
	Organization_GetPhoto_FullMethodName             = "/organization.Organization/get_photo"
	Organization_SendInvitation_FullMethodName       = "/organization.Organization/send_invitation"
	Organization_SendInvitationSimple_FullMethodName = "/organization.Organization/send_invitation_simple"
)

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationClient interface {
	// POST /organizations
	Create(ctx context.Context, in *OrganizationData, opts ...grpc.CallOption) (*OrganizationData, error)
	// PUT /organizations/{id}
	Modify(ctx context.Context, in *OrganizationData, opts ...grpc.CallOption) (*OrganizationData, error)
	// GET /organizations/{id}
	GetById(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*OrganizationDataWithAdmins, error)
	// GET /organizations  - conditions passed in the query string
	Find(ctx context.Context, in *FindOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// DELETE /organizations/{id}
	Delete(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /organizations/{organization_id}/photos
	AddPhoto(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OrganizationLogoRequest, empty.Empty], error)
	// DELETE /organizations/{organization_id}/photos
	DeletePhoto(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /organizations/{organization_id}/photos
	GetPhoto(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*PreUrlResponse, error)
	// POST /organizations/invitations
	SendInvitation(ctx context.Context, in *OrganizationInvitiationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// POST /organizations/invitations - simple url
	SendInvitationSimple(ctx context.Context, in *OrganizationInvitiationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type organizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationClient(cc grpc.ClientConnInterface) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) Create(ctx context.Context, in *OrganizationData, opts ...grpc.CallOption) (*OrganizationData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationData)
	err := c.cc.Invoke(ctx, Organization_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Modify(ctx context.Context, in *OrganizationData, opts ...grpc.CallOption) (*OrganizationData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationData)
	err := c.cc.Invoke(ctx, Organization_Modify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetById(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*OrganizationDataWithAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationDataWithAdmins)
	err := c.cc.Invoke(ctx, Organization_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Find(ctx context.Context, in *FindOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, Organization_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Delete(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Organization_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) AddPhoto(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OrganizationLogoRequest, empty.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Organization_ServiceDesc.Streams[0], Organization_AddPhoto_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrganizationLogoRequest, empty.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Organization_AddPhotoClient = grpc.ClientStreamingClient[OrganizationLogoRequest, empty.Empty]

func (c *organizationClient) DeletePhoto(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Organization_DeletePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetPhoto(ctx context.Context, in *OrganizationIdRequest, opts ...grpc.CallOption) (*PreUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreUrlResponse)
	err := c.cc.Invoke(ctx, Organization_GetPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SendInvitation(ctx context.Context, in *OrganizationInvitiationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Organization_SendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SendInvitationSimple(ctx context.Context, in *OrganizationInvitiationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Organization_SendInvitationSimple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
// All implementations must embed UnimplementedOrganizationServer
// for forward compatibility.
type OrganizationServer interface {
	// POST /organizations
	Create(context.Context, *OrganizationData) (*OrganizationData, error)
	// PUT /organizations/{id}
	Modify(context.Context, *OrganizationData) (*OrganizationData, error)
	// GET /organizations/{id}
	GetById(context.Context, *OrganizationIdRequest) (*OrganizationDataWithAdmins, error)
	// GET /organizations  - conditions passed in the query string
	Find(context.Context, *FindOrganizationRequest) (*ListOrganizationsResponse, error)
	// DELETE /organizations/{id}
	Delete(context.Context, *OrganizationIdRequest) (*empty.Empty, error)
	// PUT /organizations/{organization_id}/photos
	AddPhoto(grpc.ClientStreamingServer[OrganizationLogoRequest, empty.Empty]) error
	// DELETE /organizations/{organization_id}/photos
	DeletePhoto(context.Context, *OrganizationIdRequest) (*empty.Empty, error)
	// GET /organizations/{organization_id}/photos
	GetPhoto(context.Context, *OrganizationIdRequest) (*PreUrlResponse, error)
	// POST /organizations/invitations
	SendInvitation(context.Context, *OrganizationInvitiationRequest) (*empty.Empty, error)
	// POST /organizations/invitations - simple url
	SendInvitationSimple(context.Context, *OrganizationInvitiationRequest) (*empty.Empty, error)
	mustEmbedUnimplementedOrganizationServer()
}

// UnimplementedOrganizationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationServer struct{}

func (UnimplementedOrganizationServer) Create(context.Context, *OrganizationData) (*OrganizationData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServer) Modify(context.Context, *OrganizationData) (*OrganizationData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedOrganizationServer) GetById(context.Context, *OrganizationIdRequest) (*OrganizationDataWithAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOrganizationServer) Find(context.Context, *FindOrganizationRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedOrganizationServer) Delete(context.Context, *OrganizationIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationServer) AddPhoto(grpc.ClientStreamingServer[OrganizationLogoRequest, empty.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (UnimplementedOrganizationServer) DeletePhoto(context.Context, *OrganizationIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedOrganizationServer) GetPhoto(context.Context, *OrganizationIdRequest) (*PreUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoto not implemented")
}
func (UnimplementedOrganizationServer) SendInvitation(context.Context, *OrganizationInvitiationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedOrganizationServer) SendInvitationSimple(context.Context, *OrganizationInvitiationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitationSimple not implemented")
}
func (UnimplementedOrganizationServer) mustEmbedUnimplementedOrganizationServer() {}
func (UnimplementedOrganizationServer) testEmbeddedByValue()                      {}

// UnsafeOrganizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServer will
// result in compilation errors.
type UnsafeOrganizationServer interface {
	mustEmbedUnimplementedOrganizationServer()
}

func RegisterOrganizationServer(s grpc.ServiceRegistrar, srv OrganizationServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Organization_ServiceDesc, srv)
}

func _Organization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Create(ctx, req.(*OrganizationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Modify(ctx, req.(*OrganizationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetById(ctx, req.(*OrganizationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Find(ctx, req.(*FindOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Delete(ctx, req.(*OrganizationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_AddPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrganizationServer).AddPhoto(&grpc.GenericServerStream[OrganizationLogoRequest, empty.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Organization_AddPhotoServer = grpc.ClientStreamingServer[OrganizationLogoRequest, empty.Empty]

func _Organization_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeletePhoto(ctx, req.(*OrganizationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_GetPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetPhoto(ctx, req.(*OrganizationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationInvitiationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SendInvitation(ctx, req.(*OrganizationInvitiationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SendInvitationSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationInvitiationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SendInvitationSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_SendInvitationSimple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SendInvitationSimple(ctx, req.(*OrganizationInvitiationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Organization_ServiceDesc is the grpc.ServiceDesc for Organization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Organization_Create_Handler,
		},
		{
			MethodName: "modify",
			Handler:    _Organization_Modify_Handler,
		},
		{
			MethodName: "get_by_id",
			Handler:    _Organization_GetById_Handler,
		},
		{
			MethodName: "find",
			Handler:    _Organization_Find_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Organization_Delete_Handler,
		},
		{
			MethodName: "delete_photo",
			Handler:    _Organization_DeletePhoto_Handler,
		},
		{
			MethodName: "get_photo",
			Handler:    _Organization_GetPhoto_Handler,
		},
		{
			MethodName: "send_invitation",
			Handler:    _Organization_SendInvitation_Handler,
		},
		{
			MethodName: "send_invitation_simple",
			Handler:    _Organization_SendInvitationSimple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "add_photo",
			Handler:       _Organization_AddPhoto_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "organization.proto",
}
