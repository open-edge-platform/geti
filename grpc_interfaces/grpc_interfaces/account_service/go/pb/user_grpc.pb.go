// INTEL CONFIDENTIAL
//
// Copyright (C) 2024 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: user.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_Create_FullMethodName          = "/user.User/create"
	User_Modify_FullMethodName          = "/user.User/modify"
	User_GetActiveUser_FullMethodName   = "/user.User/get_active_user"
	User_GetUserProfile_FullMethodName  = "/user.User/get_user_profile"
	User_GetById_FullMethodName         = "/user.User/get_by_id"
	User_GetByExternalId_FullMethodName = "/user.User/get_by_external_id"
	User_Find_FullMethodName            = "/user.User/find"
	User_Logout_FullMethodName          = "/user.User/logout"
	User_Delete_FullMethodName          = "/user.User/delete"
	User_SendInvitation_FullMethodName  = "/user.User/send_invitation"
	User_AddPhoto_FullMethodName        = "/user.User/add_photo"
	User_DeletePhoto_FullMethodName     = "/user.User/delete_photo"
	User_GetPhoto_FullMethodName        = "/user.User/get_photo"
	User_GetRoles_FullMethodName        = "/user.User/get_roles"
	User_SetRoles_FullMethodName        = "/user.User/set_roles"
	User_GetUserRoles_FullMethodName    = "/user.User/get_user_roles"
	User_AssignRole_FullMethodName      = "/user.User/assign_role"
	User_RemoveRole_FullMethodName      = "/user.User/remove_role"
	User_GetUsers_FullMethodName        = "/user.User/get_users"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// POST /organizations/{organization_id}/users
	Create(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error)
	// PUT /organizations/{organization_id}/users/{id}
	Modify(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error)
	// GET /organizations/{organization_id}/users/activeUser
	GetActiveUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ActiveUserData, error)
	// GET /api/v1/profile
	GetUserProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserProfileData, error)
	// GET /organizations/{organization_id}/users/{id}
	GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserData, error)
	// GET /organizations/users/{external_id}
	GetByExternalId(ctx context.Context, in *UserExtIdRequest, opts ...grpc.CallOption) (*UserData, error)
	// GET /organizations/{organization_id}/users  - conditions passed in the query string
	Find(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// DELETE /organizations/{organization_id}/users/{id}
	Delete(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// POST /organizations/{organization_id}/users/invitations
	SendInvitation(ctx context.Context, in *UserInvitationRequest, opts ...grpc.CallOption) (*UserInvitationResponse, error)
	// PUT /organization/{organization_id}/users/{id}/photos
	AddPhoto(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserPhotoRequest, empty.Empty], error)
	// DELETE /organization/{organization_id}/users/{id}/photos
	DeletePhoto(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /organizations/{organization_id}/users/{id}/photos
	GetPhoto(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*PreUrlResponse, error)
	// GET /organizations/{organization_id}/users/{id}/roles/{resource_type}
	GetRoles(ctx context.Context, in *UserGetRolesRequest, opts ...grpc.CallOption) (*UserRolesResponse, error)
	// PUT /organizations/{organization_id}/users/{id}/roles
	SetRoles(ctx context.Context, in *UserRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /organizations/{org_id}/membership/{usr_id}/roles
	GetUserRoles(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*RolesResponse, error)
	// POST /organizations/{organization_id}/membership/{user_id}/roles
	AssignRole(ctx context.Context, in *UserRolePayload, opts ...grpc.CallOption) (*empty.Empty, error)
	// DELETE /organizations/{user.organization_id}/membership/{user.user_id}/roles
	RemoveRole(ctx context.Context, in *UserRolePayload, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /users
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*ListGetUsersResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Create(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, User_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Modify(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, User_Modify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetActiveUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ActiveUserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveUserData)
	err := c.cc.Invoke(ctx, User_GetActiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserProfileData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileData)
	err := c.cc.Invoke(ctx, User_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, User_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetByExternalId(ctx context.Context, in *UserExtIdRequest, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, User_GetByExternalId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Find(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, User_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Delete(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendInvitation(ctx context.Context, in *UserInvitationRequest, opts ...grpc.CallOption) (*UserInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInvitationResponse)
	err := c.cc.Invoke(ctx, User_SendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddPhoto(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserPhotoRequest, empty.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_AddPhoto_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserPhotoRequest, empty.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_AddPhotoClient = grpc.ClientStreamingClient[UserPhotoRequest, empty.Empty]

func (c *userClient) DeletePhoto(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_DeletePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPhoto(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*PreUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreUrlResponse)
	err := c.cc.Invoke(ctx, User_GetPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetRoles(ctx context.Context, in *UserGetRolesRequest, opts ...grpc.CallOption) (*UserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRolesResponse)
	err := c.cc.Invoke(ctx, User_GetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetRoles(ctx context.Context, in *UserRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_SetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserRoles(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*RolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, User_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AssignRole(ctx context.Context, in *UserRolePayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveRole(ctx context.Context, in *UserRolePayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, User_RemoveRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*ListGetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGetUsersResponse)
	err := c.cc.Invoke(ctx, User_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	// POST /organizations/{organization_id}/users
	Create(context.Context, *UserData) (*UserData, error)
	// PUT /organizations/{organization_id}/users/{id}
	Modify(context.Context, *UserData) (*UserData, error)
	// GET /organizations/{organization_id}/users/activeUser
	GetActiveUser(context.Context, *UserIdRequest) (*ActiveUserData, error)
	// GET /api/v1/profile
	GetUserProfile(context.Context, *empty.Empty) (*UserProfileData, error)
	// GET /organizations/{organization_id}/users/{id}
	GetById(context.Context, *UserIdRequest) (*UserData, error)
	// GET /organizations/users/{external_id}
	GetByExternalId(context.Context, *UserExtIdRequest) (*UserData, error)
	// GET /organizations/{organization_id}/users  - conditions passed in the query string
	Find(context.Context, *FindUserRequest) (*ListUsersResponse, error)
	Logout(context.Context, *empty.Empty) (*empty.Empty, error)
	// DELETE /organizations/{organization_id}/users/{id}
	Delete(context.Context, *UserIdRequest) (*empty.Empty, error)
	// POST /organizations/{organization_id}/users/invitations
	SendInvitation(context.Context, *UserInvitationRequest) (*UserInvitationResponse, error)
	// PUT /organization/{organization_id}/users/{id}/photos
	AddPhoto(grpc.ClientStreamingServer[UserPhotoRequest, empty.Empty]) error
	// DELETE /organization/{organization_id}/users/{id}/photos
	DeletePhoto(context.Context, *UserIdRequest) (*empty.Empty, error)
	// GET /organizations/{organization_id}/users/{id}/photos
	GetPhoto(context.Context, *UserIdRequest) (*PreUrlResponse, error)
	// GET /organizations/{organization_id}/users/{id}/roles/{resource_type}
	GetRoles(context.Context, *UserGetRolesRequest) (*UserRolesResponse, error)
	// PUT /organizations/{organization_id}/users/{id}/roles
	SetRoles(context.Context, *UserRolesRequest) (*empty.Empty, error)
	// GET /organizations/{org_id}/membership/{usr_id}/roles
	GetUserRoles(context.Context, *UserPayload) (*RolesResponse, error)
	// POST /organizations/{organization_id}/membership/{user_id}/roles
	AssignRole(context.Context, *UserRolePayload) (*empty.Empty, error)
	// DELETE /organizations/{user.organization_id}/membership/{user.user_id}/roles
	RemoveRole(context.Context, *UserRolePayload) (*empty.Empty, error)
	// GET /users
	GetUsers(context.Context, *GetUsersRequest) (*ListGetUsersResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) Create(context.Context, *UserData) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServer) Modify(context.Context, *UserData) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedUserServer) GetActiveUser(context.Context, *UserIdRequest) (*ActiveUserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveUser not implemented")
}
func (UnimplementedUserServer) GetUserProfile(context.Context, *empty.Empty) (*UserProfileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServer) GetById(context.Context, *UserIdRequest) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserServer) GetByExternalId(context.Context, *UserExtIdRequest) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByExternalId not implemented")
}
func (UnimplementedUserServer) Find(context.Context, *FindUserRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) Delete(context.Context, *UserIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserServer) SendInvitation(context.Context, *UserInvitationRequest) (*UserInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedUserServer) AddPhoto(grpc.ClientStreamingServer[UserPhotoRequest, empty.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (UnimplementedUserServer) DeletePhoto(context.Context, *UserIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedUserServer) GetPhoto(context.Context, *UserIdRequest) (*PreUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoto not implemented")
}
func (UnimplementedUserServer) GetRoles(context.Context, *UserGetRolesRequest) (*UserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedUserServer) SetRoles(context.Context, *UserRolesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoles not implemented")
}
func (UnimplementedUserServer) GetUserRoles(context.Context, *UserPayload) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedUserServer) AssignRole(context.Context, *UserRolePayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedUserServer) RemoveRole(context.Context, *UserRolePayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedUserServer) GetUsers(context.Context, *GetUsersRequest) (*ListGetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Modify(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetActiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetActiveUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserProfile(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetById(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExtIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetByExternalId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetByExternalId(ctx, req.(*UserExtIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Find(ctx, req.(*FindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Delete(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendInvitation(ctx, req.(*UserInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).AddPhoto(&grpc.GenericServerStream[UserPhotoRequest, empty.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_AddPhotoServer = grpc.ClientStreamingServer[UserPhotoRequest, empty.Empty]

func _User_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePhoto(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPhoto(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRoles(ctx, req.(*UserGetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetRoles(ctx, req.(*UserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserRoles(ctx, req.(*UserPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRolePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AssignRole(ctx, req.(*UserRolePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRolePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RemoveRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveRole(ctx, req.(*UserRolePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "modify",
			Handler:    _User_Modify_Handler,
		},
		{
			MethodName: "get_active_user",
			Handler:    _User_GetActiveUser_Handler,
		},
		{
			MethodName: "get_user_profile",
			Handler:    _User_GetUserProfile_Handler,
		},
		{
			MethodName: "get_by_id",
			Handler:    _User_GetById_Handler,
		},
		{
			MethodName: "get_by_external_id",
			Handler:    _User_GetByExternalId_Handler,
		},
		{
			MethodName: "find",
			Handler:    _User_Find_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _User_Delete_Handler,
		},
		{
			MethodName: "send_invitation",
			Handler:    _User_SendInvitation_Handler,
		},
		{
			MethodName: "delete_photo",
			Handler:    _User_DeletePhoto_Handler,
		},
		{
			MethodName: "get_photo",
			Handler:    _User_GetPhoto_Handler,
		},
		{
			MethodName: "get_roles",
			Handler:    _User_GetRoles_Handler,
		},
		{
			MethodName: "set_roles",
			Handler:    _User_SetRoles_Handler,
		},
		{
			MethodName: "get_user_roles",
			Handler:    _User_GetUserRoles_Handler,
		},
		{
			MethodName: "assign_role",
			Handler:    _User_AssignRole_Handler,
		},
		{
			MethodName: "remove_role",
			Handler:    _User_RemoveRole_Handler,
		},
		{
			MethodName: "get_users",
			Handler:    _User_GetUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "add_photo",
			Handler:       _User_AddPhoto_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
