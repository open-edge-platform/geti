// INTEL CONFIDENTIAL
//
// Copyright (C) 2024 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: workspace.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Workspace_Create_FullMethodName  = "/workspace.Workspace/create"
	Workspace_Modify_FullMethodName  = "/workspace.Workspace/modify"
	Workspace_GetById_FullMethodName = "/workspace.Workspace/get_by_id"
	Workspace_Find_FullMethodName    = "/workspace.Workspace/find"
	Workspace_Delete_FullMethodName  = "/workspace.Workspace/delete"
)

// WorkspaceClient is the client API for Workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceClient interface {
	// POST /organizations/{organization_id}/workspaces
	Create(ctx context.Context, in *WorkspaceData, opts ...grpc.CallOption) (*WorkspaceData, error)
	// PUT /organizations/{organization_id}/workspaces
	Modify(ctx context.Context, in *WorkspaceData, opts ...grpc.CallOption) (*WorkspaceData, error)
	// GET /organizations/{organization_id}/workspaces/{id}
	GetById(ctx context.Context, in *WorkspaceIdRequest, opts ...grpc.CallOption) (*WorkspaceData, error)
	// GET /organizations/{organization_id}/workspaces  - conditions passed in the query string
	Find(ctx context.Context, in *FindWorkspaceRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// DELETE /organizations/{organization_id}/workspaces/{id}
	Delete(ctx context.Context, in *WorkspaceIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workspaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceClient(cc grpc.ClientConnInterface) WorkspaceClient {
	return &workspaceClient{cc}
}

func (c *workspaceClient) Create(ctx context.Context, in *WorkspaceData, opts ...grpc.CallOption) (*WorkspaceData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceData)
	err := c.cc.Invoke(ctx, Workspace_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Modify(ctx context.Context, in *WorkspaceData, opts ...grpc.CallOption) (*WorkspaceData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceData)
	err := c.cc.Invoke(ctx, Workspace_Modify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) GetById(ctx context.Context, in *WorkspaceIdRequest, opts ...grpc.CallOption) (*WorkspaceData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceData)
	err := c.cc.Invoke(ctx, Workspace_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Find(ctx context.Context, in *FindWorkspaceRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, Workspace_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Delete(ctx context.Context, in *WorkspaceIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServer is the server API for Workspace service.
// All implementations must embed UnimplementedWorkspaceServer
// for forward compatibility.
type WorkspaceServer interface {
	// POST /organizations/{organization_id}/workspaces
	Create(context.Context, *WorkspaceData) (*WorkspaceData, error)
	// PUT /organizations/{organization_id}/workspaces
	Modify(context.Context, *WorkspaceData) (*WorkspaceData, error)
	// GET /organizations/{organization_id}/workspaces/{id}
	GetById(context.Context, *WorkspaceIdRequest) (*WorkspaceData, error)
	// GET /organizations/{organization_id}/workspaces  - conditions passed in the query string
	Find(context.Context, *FindWorkspaceRequest) (*ListWorkspacesResponse, error)
	// DELETE /organizations/{organization_id}/workspaces/{id}
	Delete(context.Context, *WorkspaceIdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWorkspaceServer()
}

// UnimplementedWorkspaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkspaceServer struct{}

func (UnimplementedWorkspaceServer) Create(context.Context, *WorkspaceData) (*WorkspaceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceServer) Modify(context.Context, *WorkspaceData) (*WorkspaceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedWorkspaceServer) GetById(context.Context, *WorkspaceIdRequest) (*WorkspaceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedWorkspaceServer) Find(context.Context, *FindWorkspaceRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedWorkspaceServer) Delete(context.Context, *WorkspaceIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkspaceServer) mustEmbedUnimplementedWorkspaceServer() {}
func (UnimplementedWorkspaceServer) testEmbeddedByValue()                   {}

// UnsafeWorkspaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServer will
// result in compilation errors.
type UnsafeWorkspaceServer interface {
	mustEmbedUnimplementedWorkspaceServer()
}

func RegisterWorkspaceServer(s grpc.ServiceRegistrar, srv WorkspaceServer) {
	// If the following call pancis, it indicates UnimplementedWorkspaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Workspace_ServiceDesc, srv)
}

func _Workspace_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Create(ctx, req.(*WorkspaceData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Modify(ctx, req.(*WorkspaceData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).GetById(ctx, req.(*WorkspaceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Find(ctx, req.(*FindWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Delete(ctx, req.(*WorkspaceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workspace_ServiceDesc is the grpc.ServiceDesc for Workspace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workspace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.Workspace",
	HandlerType: (*WorkspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Workspace_Create_Handler,
		},
		{
			MethodName: "modify",
			Handler:    _Workspace_Modify_Handler,
		},
		{
			MethodName: "get_by_id",
			Handler:    _Workspace_GetById_Handler,
		},
		{
			MethodName: "find",
			Handler:    _Workspace_Find_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Workspace_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace.proto",
}
