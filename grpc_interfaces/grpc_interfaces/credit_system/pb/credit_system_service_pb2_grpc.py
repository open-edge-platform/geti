# INTEL CONFIDENTIAL
# 
# Copyright (C) 2025 Intel Corporation
# 
# This software and the related documents are Intel copyrighted materials, and your use of them is governed by
# the express license under which they were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
# without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import credit_system_service_pb2 as credit__system__service__pb2


class ProductServiceStub(object):
    """////////////// PRODUCT SERVICE ////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_all_products = channel.unary_unary(
                '/credit_system.ProductService/get_all_products',
                request_serializer=credit__system__service__pb2.EmptyRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.ProductResponse.FromString,
                )


class ProductServiceServicer(object):
    """////////////// PRODUCT SERVICE ////////////////
    """

    def get_all_products(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_all_products': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all_products,
                    request_deserializer=credit__system__service__pb2.EmptyRequest.FromString,
                    response_serializer=credit__system__service__pb2.ProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'credit_system.ProductService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProductService(object):
    """////////////// PRODUCT SERVICE ////////////////
    """

    @staticmethod
    def get_all_products(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.ProductService/get_all_products',
            credit__system__service__pb2.EmptyRequest.SerializeToString,
            credit__system__service__pb2.ProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SubscriptionServiceStub(object):
    """////////////// SUBSCRIPTION SERVICE ////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.activate = channel.unary_unary(
                '/credit_system.SubscriptionService/activate',
                request_serializer=credit__system__service__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.SubscriptionIdResponse.FromString,
                )
        self.find_active_subscription = channel.unary_unary(
                '/credit_system.SubscriptionService/find_active_subscription',
                request_serializer=credit__system__service__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.SubscriptionIdResponse.FromString,
                )
        self.fail_subscription = channel.unary_unary(
                '/credit_system.SubscriptionService/fail_subscription',
                request_serializer=credit__system__service__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.SubscriptionIdResponse.FromString,
                )
        self.cancel_subscription = channel.unary_unary(
                '/credit_system.SubscriptionService/cancel_subscription',
                request_serializer=credit__system__service__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.SubscriptionIdResponse.FromString,
                )


class SubscriptionServiceServicer(object):
    """////////////// SUBSCRIPTION SERVICE ////////////////
    """

    def activate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_active_subscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fail_subscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel_subscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'activate': grpc.unary_unary_rpc_method_handler(
                    servicer.activate,
                    request_deserializer=credit__system__service__pb2.SubscriptionRequest.FromString,
                    response_serializer=credit__system__service__pb2.SubscriptionIdResponse.SerializeToString,
            ),
            'find_active_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.find_active_subscription,
                    request_deserializer=credit__system__service__pb2.SubscriptionRequest.FromString,
                    response_serializer=credit__system__service__pb2.SubscriptionIdResponse.SerializeToString,
            ),
            'fail_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.fail_subscription,
                    request_deserializer=credit__system__service__pb2.SubscriptionRequest.FromString,
                    response_serializer=credit__system__service__pb2.SubscriptionIdResponse.SerializeToString,
            ),
            'cancel_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel_subscription,
                    request_deserializer=credit__system__service__pb2.SubscriptionRequest.FromString,
                    response_serializer=credit__system__service__pb2.SubscriptionIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'credit_system.SubscriptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubscriptionService(object):
    """////////////// SUBSCRIPTION SERVICE ////////////////
    """

    @staticmethod
    def activate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.SubscriptionService/activate',
            credit__system__service__pb2.SubscriptionRequest.SerializeToString,
            credit__system__service__pb2.SubscriptionIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_active_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.SubscriptionService/find_active_subscription',
            credit__system__service__pb2.SubscriptionRequest.SerializeToString,
            credit__system__service__pb2.SubscriptionIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fail_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.SubscriptionService/fail_subscription',
            credit__system__service__pb2.SubscriptionRequest.SerializeToString,
            credit__system__service__pb2.SubscriptionIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.SubscriptionService/cancel_subscription',
            credit__system__service__pb2.SubscriptionRequest.SerializeToString,
            credit__system__service__pb2.SubscriptionIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QuotaServiceStub(object):
    """////////////// QUOTA SERVICE ////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/credit_system.QuotaService/get',
                request_serializer=credit__system__service__pb2.QuotaGetRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.QuotaGetResponse.FromString,
                )


class QuotaServiceServicer(object):
    """////////////// QUOTA SERVICE ////////////////
    """

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuotaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=credit__system__service__pb2.QuotaGetRequest.FromString,
                    response_serializer=credit__system__service__pb2.QuotaGetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'credit_system.QuotaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuotaService(object):
    """////////////// QUOTA SERVICE ////////////////
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.QuotaService/get',
            credit__system__service__pb2.QuotaGetRequest.SerializeToString,
            credit__system__service__pb2.QuotaGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LeaseServiceStub(object):
    """////////////// LEASE SERVICE ////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.acquire = channel.unary_unary(
                '/credit_system.LeaseService/acquire',
                request_serializer=credit__system__service__pb2.LeaseRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.LeaseIdResponse.FromString,
                )
        self.cancel = channel.unary_unary(
                '/credit_system.LeaseService/cancel',
                request_serializer=credit__system__service__pb2.CancelLeaseRequest.SerializeToString,
                response_deserializer=credit__system__service__pb2.EmptyResponse.FromString,
                )


class LeaseServiceServicer(object):
    """////////////// LEASE SERVICE ////////////////
    """

    def acquire(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'acquire': grpc.unary_unary_rpc_method_handler(
                    servicer.acquire,
                    request_deserializer=credit__system__service__pb2.LeaseRequest.FromString,
                    response_serializer=credit__system__service__pb2.LeaseIdResponse.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=credit__system__service__pb2.CancelLeaseRequest.FromString,
                    response_serializer=credit__system__service__pb2.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'credit_system.LeaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaseService(object):
    """////////////// LEASE SERVICE ////////////////
    """

    @staticmethod
    def acquire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.LeaseService/acquire',
            credit__system__service__pb2.LeaseRequest.SerializeToString,
            credit__system__service__pb2.LeaseIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/credit_system.LeaseService/cancel',
            credit__system__service__pb2.CancelLeaseRequest.SerializeToString,
            credit__system__service__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
