// INTEL CONFIDENTIAL
//
// Copyright (C) 2025 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and your use of them is governed by
// the express license under which they were provided to you ("License"). Unless the License provides otherwise,
// you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
// without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express or implied warranties,
// other than those that are expressly stated in the License.

// Code generated by mockery. DO NOT EDIT.

package modelregistration

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	modelregistration "geti.com/modelregistration"
)

// MockModelRegistrationClient is an autogenerated mock type for the ModelRegistrationClient type
type MockModelRegistrationClient struct {
	mock.Mock
}

type MockModelRegistrationClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelRegistrationClient) EXPECT() *MockModelRegistrationClient_Expecter {
	return &MockModelRegistrationClient_Expecter{mock: &_m.Mock}
}

// DeleteProjectPipelines provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) DeleteProjectPipelines(ctx context.Context, in *modelregistration.PurgeProjectRequest, opts ...grpc.CallOption) (*modelregistration.PurgeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectPipelines")
	}

	var r0 *modelregistration.PurgeProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.PurgeProjectRequest, ...grpc.CallOption) (*modelregistration.PurgeProjectResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.PurgeProjectRequest, ...grpc.CallOption) *modelregistration.PurgeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.PurgeProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.PurgeProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_DeleteProjectPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectPipelines'
type MockModelRegistrationClient_DeleteProjectPipelines_Call struct {
	*mock.Call
}

// DeleteProjectPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.PurgeProjectRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) DeleteProjectPipelines(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_DeleteProjectPipelines_Call {
	return &MockModelRegistrationClient_DeleteProjectPipelines_Call{Call: _e.mock.On("DeleteProjectPipelines",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_DeleteProjectPipelines_Call) Run(run func(ctx context.Context, in *modelregistration.PurgeProjectRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_DeleteProjectPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.PurgeProjectRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_DeleteProjectPipelines_Call) Return(_a0 *modelregistration.PurgeProjectResponse, _a1 error) *MockModelRegistrationClient_DeleteProjectPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_DeleteProjectPipelines_Call) RunAndReturn(run func(context.Context, *modelregistration.PurgeProjectRequest, ...grpc.CallOption) (*modelregistration.PurgeProjectResponse, error)) *MockModelRegistrationClient_DeleteProjectPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterPipeline provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) DeregisterPipeline(ctx context.Context, in *modelregistration.DeregisterRequest, opts ...grpc.CallOption) (*modelregistration.StatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterPipeline")
	}

	var r0 *modelregistration.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.DeregisterRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.DeregisterRequest, ...grpc.CallOption) *modelregistration.StatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.DeregisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_DeregisterPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterPipeline'
type MockModelRegistrationClient_DeregisterPipeline_Call struct {
	*mock.Call
}

// DeregisterPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.DeregisterRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) DeregisterPipeline(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_DeregisterPipeline_Call {
	return &MockModelRegistrationClient_DeregisterPipeline_Call{Call: _e.mock.On("DeregisterPipeline",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_DeregisterPipeline_Call) Run(run func(ctx context.Context, in *modelregistration.DeregisterRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_DeregisterPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.DeregisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_DeregisterPipeline_Call) Return(_a0 *modelregistration.StatusResponse, _a1 error) *MockModelRegistrationClient_DeregisterPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_DeregisterPipeline_Call) RunAndReturn(run func(context.Context, *modelregistration.DeregisterRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)) *MockModelRegistrationClient_DeregisterPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadGraph provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) DownloadGraph(ctx context.Context, in *modelregistration.DownloadGraphRequest, opts ...grpc.CallOption) (modelregistration.ModelRegistration_DownloadGraphClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadGraph")
	}

	var r0 modelregistration.ModelRegistration_DownloadGraphClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.DownloadGraphRequest, ...grpc.CallOption) (modelregistration.ModelRegistration_DownloadGraphClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.DownloadGraphRequest, ...grpc.CallOption) modelregistration.ModelRegistration_DownloadGraphClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modelregistration.ModelRegistration_DownloadGraphClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.DownloadGraphRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_DownloadGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadGraph'
type MockModelRegistrationClient_DownloadGraph_Call struct {
	*mock.Call
}

// DownloadGraph is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.DownloadGraphRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) DownloadGraph(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_DownloadGraph_Call {
	return &MockModelRegistrationClient_DownloadGraph_Call{Call: _e.mock.On("DownloadGraph",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_DownloadGraph_Call) Run(run func(ctx context.Context, in *modelregistration.DownloadGraphRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_DownloadGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.DownloadGraphRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_DownloadGraph_Call) Return(_a0 modelregistration.ModelRegistration_DownloadGraphClient, _a1 error) *MockModelRegistrationClient_DownloadGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_DownloadGraph_Call) RunAndReturn(run func(context.Context, *modelregistration.DownloadGraphRequest, ...grpc.CallOption) (modelregistration.ModelRegistration_DownloadGraphClient, error)) *MockModelRegistrationClient_DownloadGraph_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) ListPipelines(ctx context.Context, in *modelregistration.ListRequest, opts ...grpc.CallOption) (*modelregistration.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *modelregistration.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.ListRequest, ...grpc.CallOption) (*modelregistration.ListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.ListRequest, ...grpc.CallOption) *modelregistration.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type MockModelRegistrationClient_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.ListRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) ListPipelines(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_ListPipelines_Call {
	return &MockModelRegistrationClient_ListPipelines_Call{Call: _e.mock.On("ListPipelines",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_ListPipelines_Call) Run(run func(ctx context.Context, in *modelregistration.ListRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_ListPipelines_Call) Return(_a0 *modelregistration.ListResponse, _a1 error) *MockModelRegistrationClient_ListPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_ListPipelines_Call) RunAndReturn(run func(context.Context, *modelregistration.ListRequest, ...grpc.CallOption) (*modelregistration.ListResponse, error)) *MockModelRegistrationClient_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverPipeline provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) RecoverPipeline(ctx context.Context, in *modelregistration.RecoverRequest, opts ...grpc.CallOption) (*modelregistration.RecoverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RecoverPipeline")
	}

	var r0 *modelregistration.RecoverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.RecoverRequest, ...grpc.CallOption) (*modelregistration.RecoverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.RecoverRequest, ...grpc.CallOption) *modelregistration.RecoverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.RecoverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.RecoverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_RecoverPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverPipeline'
type MockModelRegistrationClient_RecoverPipeline_Call struct {
	*mock.Call
}

// RecoverPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.RecoverRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) RecoverPipeline(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_RecoverPipeline_Call {
	return &MockModelRegistrationClient_RecoverPipeline_Call{Call: _e.mock.On("RecoverPipeline",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_RecoverPipeline_Call) Run(run func(ctx context.Context, in *modelregistration.RecoverRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_RecoverPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.RecoverRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_RecoverPipeline_Call) Return(_a0 *modelregistration.RecoverResponse, _a1 error) *MockModelRegistrationClient_RecoverPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_RecoverPipeline_Call) RunAndReturn(run func(context.Context, *modelregistration.RecoverRequest, ...grpc.CallOption) (*modelregistration.RecoverResponse, error)) *MockModelRegistrationClient_RecoverPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterActivePipeline provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) RegisterActivePipeline(ctx context.Context, in *modelregistration.ActiveRequest, opts ...grpc.CallOption) (*modelregistration.StatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterActivePipeline")
	}

	var r0 *modelregistration.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.ActiveRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.ActiveRequest, ...grpc.CallOption) *modelregistration.StatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.ActiveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_RegisterActivePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterActivePipeline'
type MockModelRegistrationClient_RegisterActivePipeline_Call struct {
	*mock.Call
}

// RegisterActivePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.ActiveRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) RegisterActivePipeline(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_RegisterActivePipeline_Call {
	return &MockModelRegistrationClient_RegisterActivePipeline_Call{Call: _e.mock.On("RegisterActivePipeline",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_RegisterActivePipeline_Call) Run(run func(ctx context.Context, in *modelregistration.ActiveRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_RegisterActivePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.ActiveRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_RegisterActivePipeline_Call) Return(_a0 *modelregistration.StatusResponse, _a1 error) *MockModelRegistrationClient_RegisterActivePipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_RegisterActivePipeline_Call) RunAndReturn(run func(context.Context, *modelregistration.ActiveRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)) *MockModelRegistrationClient_RegisterActivePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNewPipelines provides a mock function with given fields: ctx, in, opts
func (_m *MockModelRegistrationClient) RegisterNewPipelines(ctx context.Context, in *modelregistration.RegisterRequest, opts ...grpc.CallOption) (*modelregistration.StatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewPipelines")
	}

	var r0 *modelregistration.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.RegisterRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelregistration.RegisterRequest, ...grpc.CallOption) *modelregistration.StatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistration.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelregistration.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistrationClient_RegisterNewPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNewPipelines'
type MockModelRegistrationClient_RegisterNewPipelines_Call struct {
	*mock.Call
}

// RegisterNewPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelregistration.RegisterRequest
//   - opts ...grpc.CallOption
func (_e *MockModelRegistrationClient_Expecter) RegisterNewPipelines(ctx interface{}, in interface{}, opts ...interface{}) *MockModelRegistrationClient_RegisterNewPipelines_Call {
	return &MockModelRegistrationClient_RegisterNewPipelines_Call{Call: _e.mock.On("RegisterNewPipelines",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelRegistrationClient_RegisterNewPipelines_Call) Run(run func(ctx context.Context, in *modelregistration.RegisterRequest, opts ...grpc.CallOption)) *MockModelRegistrationClient_RegisterNewPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelregistration.RegisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelRegistrationClient_RegisterNewPipelines_Call) Return(_a0 *modelregistration.StatusResponse, _a1 error) *MockModelRegistrationClient_RegisterNewPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistrationClient_RegisterNewPipelines_Call) RunAndReturn(run func(context.Context, *modelregistration.RegisterRequest, ...grpc.CallOption) (*modelregistration.StatusResponse, error)) *MockModelRegistrationClient_RegisterNewPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelRegistrationClient creates a new instance of MockModelRegistrationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelRegistrationClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelRegistrationClient {
	mock := &MockModelRegistrationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
