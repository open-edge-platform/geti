// INTEL CONFIDENTIAL
//
// Copyright (C) 2024 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may
// not use, modify, copy, publish, distribute, disclose or transmit this
// software or the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service.proto

package modelregistration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelRegistration_RegisterNewPipelines_FullMethodName   = "/service.ModelRegistration/register_new_pipelines"
	ModelRegistration_RegisterActivePipeline_FullMethodName = "/service.ModelRegistration/register_active_pipeline"
	ModelRegistration_DeregisterPipeline_FullMethodName     = "/service.ModelRegistration/deregister_pipeline"
	ModelRegistration_ListPipelines_FullMethodName          = "/service.ModelRegistration/list_pipelines"
	ModelRegistration_RecoverPipeline_FullMethodName        = "/service.ModelRegistration/recover_pipeline"
	ModelRegistration_DeleteProjectPipelines_FullMethodName = "/service.ModelRegistration/delete_project_pipelines"
	ModelRegistration_DownloadGraph_FullMethodName          = "/service.ModelRegistration/download_graph"
)

// ModelRegistrationClient is the client API for ModelRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelRegistrationClient interface {
	RegisterNewPipelines(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterActivePipeline(ctx context.Context, in *ActiveRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeregisterPipeline(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListPipelines(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RecoverPipeline(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
	DeleteProjectPipelines(ctx context.Context, in *PurgeProjectRequest, opts ...grpc.CallOption) (*PurgeProjectResponse, error)
	DownloadGraph(ctx context.Context, in *DownloadGraphRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Chunk], error)
}

type modelRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewModelRegistrationClient(cc grpc.ClientConnInterface) ModelRegistrationClient {
	return &modelRegistrationClient{cc}
}

func (c *modelRegistrationClient) RegisterNewPipelines(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_RegisterNewPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) RegisterActivePipeline(ctx context.Context, in *ActiveRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_RegisterActivePipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) DeregisterPipeline(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_DeregisterPipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) ListPipelines(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_ListPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) RecoverPipeline(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_RecoverPipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) DeleteProjectPipelines(ctx context.Context, in *PurgeProjectRequest, opts ...grpc.CallOption) (*PurgeProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeProjectResponse)
	err := c.cc.Invoke(ctx, ModelRegistration_DeleteProjectPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRegistrationClient) DownloadGraph(ctx context.Context, in *DownloadGraphRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Chunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelRegistration_ServiceDesc.Streams[0], ModelRegistration_DownloadGraph_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadGraphRequest, Chunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelRegistration_DownloadGraphClient = grpc.ServerStreamingClient[Chunk]

// ModelRegistrationServer is the server API for ModelRegistration service.
// All implementations must embed UnimplementedModelRegistrationServer
// for forward compatibility.
type ModelRegistrationServer interface {
	RegisterNewPipelines(context.Context, *RegisterRequest) (*StatusResponse, error)
	RegisterActivePipeline(context.Context, *ActiveRequest) (*StatusResponse, error)
	DeregisterPipeline(context.Context, *DeregisterRequest) (*StatusResponse, error)
	ListPipelines(context.Context, *ListRequest) (*ListResponse, error)
	RecoverPipeline(context.Context, *RecoverRequest) (*RecoverResponse, error)
	DeleteProjectPipelines(context.Context, *PurgeProjectRequest) (*PurgeProjectResponse, error)
	DownloadGraph(*DownloadGraphRequest, grpc.ServerStreamingServer[Chunk]) error
	mustEmbedUnimplementedModelRegistrationServer()
}

// UnimplementedModelRegistrationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelRegistrationServer struct{}

func (UnimplementedModelRegistrationServer) RegisterNewPipelines(context.Context, *RegisterRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewPipelines not implemented")
}
func (UnimplementedModelRegistrationServer) RegisterActivePipeline(context.Context, *ActiveRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterActivePipeline not implemented")
}
func (UnimplementedModelRegistrationServer) DeregisterPipeline(context.Context, *DeregisterRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterPipeline not implemented")
}
func (UnimplementedModelRegistrationServer) ListPipelines(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedModelRegistrationServer) RecoverPipeline(context.Context, *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverPipeline not implemented")
}
func (UnimplementedModelRegistrationServer) DeleteProjectPipelines(context.Context, *PurgeProjectRequest) (*PurgeProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectPipelines not implemented")
}
func (UnimplementedModelRegistrationServer) DownloadGraph(*DownloadGraphRequest, grpc.ServerStreamingServer[Chunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadGraph not implemented")
}
func (UnimplementedModelRegistrationServer) mustEmbedUnimplementedModelRegistrationServer() {}
func (UnimplementedModelRegistrationServer) testEmbeddedByValue()                           {}

// UnsafeModelRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelRegistrationServer will
// result in compilation errors.
type UnsafeModelRegistrationServer interface {
	mustEmbedUnimplementedModelRegistrationServer()
}

func RegisterModelRegistrationServer(s grpc.ServiceRegistrar, srv ModelRegistrationServer) {
	// If the following call pancis, it indicates UnimplementedModelRegistrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelRegistration_ServiceDesc, srv)
}

func _ModelRegistration_RegisterNewPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).RegisterNewPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_RegisterNewPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).RegisterNewPipelines(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_RegisterActivePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).RegisterActivePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_RegisterActivePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).RegisterActivePipeline(ctx, req.(*ActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_DeregisterPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).DeregisterPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_DeregisterPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).DeregisterPipeline(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).ListPipelines(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_RecoverPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).RecoverPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_RecoverPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).RecoverPipeline(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_DeleteProjectPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRegistrationServer).DeleteProjectPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRegistration_DeleteProjectPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRegistrationServer).DeleteProjectPipelines(ctx, req.(*PurgeProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRegistration_DownloadGraph_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadGraphRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelRegistrationServer).DownloadGraph(m, &grpc.GenericServerStream[DownloadGraphRequest, Chunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelRegistration_DownloadGraphServer = grpc.ServerStreamingServer[Chunk]

// ModelRegistration_ServiceDesc is the grpc.ServiceDesc for ModelRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ModelRegistration",
	HandlerType: (*ModelRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_new_pipelines",
			Handler:    _ModelRegistration_RegisterNewPipelines_Handler,
		},
		{
			MethodName: "register_active_pipeline",
			Handler:    _ModelRegistration_RegisterActivePipeline_Handler,
		},
		{
			MethodName: "deregister_pipeline",
			Handler:    _ModelRegistration_DeregisterPipeline_Handler,
		},
		{
			MethodName: "list_pipelines",
			Handler:    _ModelRegistration_ListPipelines_Handler,
		},
		{
			MethodName: "recover_pipeline",
			Handler:    _ModelRegistration_RecoverPipeline_Handler,
		},
		{
			MethodName: "delete_project_pipelines",
			Handler:    _ModelRegistration_DeleteProjectPipelines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "download_graph",
			Handler:       _ModelRegistration_DownloadGraph_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
