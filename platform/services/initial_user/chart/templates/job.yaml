apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "initial-user.name" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "initial-user.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 3
  template:
    {{- if not .Values.global.istio_ambient_mesh }}
    metadata:
      annotations:
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
    {{- end }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "initial-user.name" . }}
      initContainers:
        - name: init-postgresql
          image: "{{ .Values.global.busybox.registry }}/{{ if .Values.global.busybox.repository }}{{ .Values.global.busybox.repository }}/{{ end }}{{ .Values.global.busybox.name }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: [ 'sh', '-c', "until nc -w 5 -z $POSTGRES_HOST $POSTGRES_PORT; do echo wait...; sleep 2; done;" ]
          securityContext:
            {{ toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: "POSTGRES_HOST"
              value: "{{ .Values.postgresql.host }}"
            - name: "POSTGRES_PORT"
              value: "{{ .Values.postgresql.port }}"
        - name: "kubectl-wait"
          image: "{{ .Values.global.kubectl.registry }}/{{ if .Values.global.kubectl.repository }}{{ .Values.global.kubectl.repository }}/{{ end }}{{ .Values.global.kubectl.name }}"
          command: [ "/bin/bash", "-c" ]
          args:
            - >-
              kubectl wait deployment
              --timeout=1200s
              --for=condition=available
              --namespace {{ .Release.Namespace }}
              "{{ .Release.Namespace }}-account-service"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      containers:
      - name: init-user
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        image: "{{ .Values.global.registry_address }}/{{ .Values.global.docker_namespace }}/{{ .Chart.Name }}:{{ .Values.global.tag | default .Chart.AppVersion }}"
        command: [ "/bin/sh", "-c" ]
        args:
          - >-
            {{- if eq .Values.global.account_service_mode "migration" }}
            python run_migration.py;
            {{- else }}
            python create_initial_user.py;
            {{- end }}
            retVal=$?;
            echo "done" > /init/1;
            exit $retVal
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        env:
        - name: INITIAL_USER_EMAIL
          value: {{ .Values.global.initial_admin_user_login }}
        - name: INITIAL_USER_PASSWORD
          value: "{{ .Values.global.initial_admin_user_password }}"
        - name: LDAP_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.global.ldap_service_user_secret_name }}
        - name: LDAP_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.global.ldap_service_user_secret_name }}
        - name: SPICEDB_ADDRESS
          value: "{{ .Release.Namespace }}-spice-db:{{ .Values.spicedb.grpc_port }}"
        - name: SPICEDB_CREDENTIALS
          value: "token_and_ca"
        - name: SPICEDB_SSL_CERTIFICATES_DIR
          value: "/etc/tls-secrets"
        - name: SPICEDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Namespace }}-spice-db"
              key: SPICEDB_GRPC_PRESHARED_KEY
        - name: "POSTGRES_HOST"
          value: "{{ .Values.postgresql.host }}"
        - name: "POSTGRES_PORT"
          value: "{{ .Values.postgresql.port }}"
        - name: "POSTGRES_DB"
          valueFrom:
            configMapKeyRef:
              key: "postgresql-db"
              name: "{{ .Release.Namespace }}-postgresql"
        - name: "SPICEDB_POSTGRES_USER"
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Namespace }}-postgresql"
              key: "spicedb-postgresql-username"
        - name: "SPICEDB_POSTGRES_PASSWORD"
          valueFrom:
              secretKeyRef:
                name: "{{ .Release.Namespace }}-postgresql"
                key: "spicedb-postgresql-password"
        - name: LOGGING_CONFIG_DIR
          value: {{ .Values.global.logging_config_dir }}
        volumeMounts:
          - mountPath: {{ .Values.global.logging_config_dir }}
            name: config
          - name: tls-secrets
            mountPath: "/etc/tls-secrets"
            readOnly: true
          - name: tmp
            mountPath: "/tmp"
          - name: "init"
            mountPath: "/init"
      {{- if not .Values.global.istio_ambient_mesh }}
      - name: "istio-sidecar-quit"
        image: "{{ .Values.global.debian.registry }}/{{ if .Values.global.debian.repository }}{{ .Values.global.debian.repository }}/{{ end }}{{ .Values.global.debian.name }}"
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        command: [ "/bin/sh", "-c" ]
        args:
          - >-
            while [ ! -f /init/1 ]; do
              sleep 1
            done;
            curl -XPOST 127.0.0.1:15020/quitquitquit
        volumeMounts:
          - name: "init"
            mountPath: "/init"
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ .Release.Namespace }}-logging-config
        - name: tls-secrets
          secret:
            secretName: {{ .Release.Namespace }}-spice-db-tls
            items:
              - key: ca.crt
                path: ca.crt
        - name: tmp
          emptyDir: {}
        - name: "init"
          emptyDir: {}
