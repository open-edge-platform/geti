# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

"""Create usage quotas tables

Revision ID: b78cd74b4c84
Revises: ff12bbecf31c
Create Date: 2024-09-02 01:41:41.171535+00:00

"""

# DO NOT EDIT MANUALLY EXISTING MIGRATIONS.

from collections.abc import Sequence

from db.model.custom_types import UnixTimestampInMilliseconds
from db.model.product import Product, ProductQuota

from alembic import op
from sqlalchemy import select
from sqlalchemy.orm import Session
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b78cd74b4c84'
down_revision: str | None = 'ff12bbecf31c'
branch_labels: str | (Sequence[str] | None) = None
depends_on: str | (Sequence[str] | None) = None


def _populate_tables():
    with Session(bind=op.get_bind()) as session:
        stmt = select(Product).filter(Product.name == "Geti Free Tier")
        default_product: Product = session.scalars(statement=stmt).one()

        default_product_quota_accsvc = ProductQuota(
            product_id=default_product.id,
            service_name="account service",
            quota_name="Max number of users per organization",
            quota_type="MAX_USERS_COUNT",
            limit=5
        )
        default_product_quota_trainings = ProductQuota(
            product_id=default_product.id,
            service_name="trainings",
            quota_name="Max number of concurrent training jobs",
            quota_type="MAX_TRAINING_JOBS",
            limit=10
        )

        session.add(default_product_quota_accsvc)
        session.add(default_product_quota_trainings)
        session.commit()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ProductQuota',
    sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('service_name', sa.String(), nullable=False),
    sa.Column('limit', sa.BigInteger(), nullable=False),
    sa.Column('quota_name', sa.String(), nullable=False),
    sa.Column('quota_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['Product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('product_quota_product_id_idx', 'ProductQuota', ['product_id'], unique=False, postgresql_using='btree')
    op.create_table('SubscriptionQuota',
    sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('subscription_id', sa.Uuid(), nullable=False),
    sa.Column('service_name', sa.String(), nullable=False),
    sa.Column('quota_name', sa.String(), nullable=False),
    sa.Column('quota_type', sa.String(), nullable=False),
    sa.Column('limit', sa.BigInteger(), nullable=False),
    sa.Column('created', UnixTimestampInMilliseconds(), nullable=False),
    sa.Column('updated', UnixTimestampInMilliseconds(), nullable=False),
    sa.ForeignKeyConstraint(['subscription_id'], ['Subscription.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('subscription_quota_subscription_id_idx', 'SubscriptionQuota', ['subscription_id'], unique=False, postgresql_using='btree')
    # ### end Alembic commands ###

    # Populate new tables with default values
    _populate_tables()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('subscription_quota_product_id_idx', table_name='SubscriptionQuota', postgresql_using='btree')
    op.drop_table('SubscriptionQuota')
    op.drop_index('product_quota_product_id_idx', table_name='ProductQuota', postgresql_using='btree')
    op.drop_table('ProductQuota')
    # ### end Alembic commands ###
