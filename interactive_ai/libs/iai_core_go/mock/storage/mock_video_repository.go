// Code generated by mockery. DO NOT EDIT.

package storage

import (
	context "context"

	entities "geti.com/iai_core/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockVideoRepository is an autogenerated mock type for the VideoRepository type
type MockVideoRepository struct {
	mock.Mock
}

type MockVideoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVideoRepository) EXPECT() *MockVideoRepository_Expecter {
	return &MockVideoRepository_Expecter{mock: &_m.Mock}
}

// LoadVideoByID provides a mock function with given fields: ctx, videoID
func (_m *MockVideoRepository) LoadVideoByID(ctx context.Context, videoID *entities.FullVideoID) (*entities.Video, error) {
	ret := _m.Called(ctx, videoID)

	if len(ret) == 0 {
		panic("no return value specified for LoadVideoByID")
	}

	var r0 *entities.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID) (*entities.Video, error)); ok {
		return rf(ctx, videoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID) *entities.Video); ok {
		r0 = rf(ctx, videoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.FullVideoID) error); ok {
		r1 = rf(ctx, videoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVideoRepository_LoadVideoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadVideoByID'
type MockVideoRepository_LoadVideoByID_Call struct {
	*mock.Call
}

// LoadVideoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - videoID *entities.FullVideoID
func (_e *MockVideoRepository_Expecter) LoadVideoByID(ctx interface{}, videoID interface{}) *MockVideoRepository_LoadVideoByID_Call {
	return &MockVideoRepository_LoadVideoByID_Call{Call: _e.mock.On("LoadVideoByID", ctx, videoID)}
}

func (_c *MockVideoRepository_LoadVideoByID_Call) Run(run func(ctx context.Context, videoID *entities.FullVideoID)) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullVideoID))
	})
	return _c
}

func (_c *MockVideoRepository_LoadVideoByID_Call) Return(_a0 *entities.Video, _a1 error) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVideoRepository_LoadVideoByID_Call) RunAndReturn(run func(context.Context, *entities.FullVideoID) (*entities.Video, error)) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVideoRepository creates a new instance of MockVideoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVideoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVideoRepository {
	mock := &MockVideoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
