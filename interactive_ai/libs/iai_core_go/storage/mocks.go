// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"
	"image"
	"io"

	"geti.com/iai_core/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockObjectStorageHandler creates a new instance of MockObjectStorageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStorageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStorageHandler {
	mock := &MockObjectStorageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObjectStorageHandler is an autogenerated mock type for the ObjectStorageHandler type
type MockObjectStorageHandler struct {
	mock.Mock
}

type MockObjectStorageHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStorageHandler) EXPECT() *MockObjectStorageHandler_Expecter {
	return &MockObjectStorageHandler_Expecter{mock: &_m.Mock}
}

// CreateObject provides a mock function for the type MockObjectStorageHandler
func (_mock *MockObjectStorageHandler) CreateObject(ctx context.Context, objectType string, objectName string, reader io.Reader, objectSize int64) error {
	ret := _mock.Called(ctx, objectType, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for CreateObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r0 = returnFunc(ctx, objectType, objectName, reader, objectSize)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockObjectStorageHandler_CreateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateObject'
type MockObjectStorageHandler_CreateObject_Call struct {
	*mock.Call
}

// CreateObject is a helper method to define mock.On call
//   - ctx
//   - objectType
//   - objectName
//   - reader
//   - objectSize
func (_e *MockObjectStorageHandler_Expecter) CreateObject(ctx interface{}, objectType interface{}, objectName interface{}, reader interface{}, objectSize interface{}) *MockObjectStorageHandler_CreateObject_Call {
	return &MockObjectStorageHandler_CreateObject_Call{Call: _e.mock.On("CreateObject", ctx, objectType, objectName, reader, objectSize)}
}

func (_c *MockObjectStorageHandler_CreateObject_Call) Run(run func(ctx context.Context, objectType string, objectName string, reader io.Reader, objectSize int64)) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *MockObjectStorageHandler_CreateObject_Call) Return(err error) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStorageHandler_CreateObject_Call) RunAndReturn(run func(ctx context.Context, objectType string, objectName string, reader io.Reader, objectSize int64) error) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectByType provides a mock function for the type MockObjectStorageHandler
func (_mock *MockObjectStorageHandler) GetObjectByType(ctx context.Context, objectType string, objectName string) (io.ReadCloser, *entities.ObjectMetadata, error) {
	ret := _mock.Called(ctx, objectType, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectByType")
	}

	var r0 io.ReadCloser
	var r1 *entities.ObjectMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, *entities.ObjectMetadata, error)); ok {
		return returnFunc(ctx, objectType, objectName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, objectType, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) *entities.ObjectMetadata); ok {
		r1 = returnFunc(ctx, objectType, objectName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.ObjectMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, objectType, objectName)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockObjectStorageHandler_GetObjectByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectByType'
type MockObjectStorageHandler_GetObjectByType_Call struct {
	*mock.Call
}

// GetObjectByType is a helper method to define mock.On call
//   - ctx
//   - objectType
//   - objectName
func (_e *MockObjectStorageHandler_Expecter) GetObjectByType(ctx interface{}, objectType interface{}, objectName interface{}) *MockObjectStorageHandler_GetObjectByType_Call {
	return &MockObjectStorageHandler_GetObjectByType_Call{Call: _e.mock.On("GetObjectByType", ctx, objectType, objectName)}
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) Run(run func(ctx context.Context, objectType string, objectName string)) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) Return(readCloser io.ReadCloser, objectMetadata *entities.ObjectMetadata, err error) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Return(readCloser, objectMetadata, err)
	return _c
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) RunAndReturn(run func(ctx context.Context, objectType string, objectName string) (io.ReadCloser, *entities.ObjectMetadata, error)) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageRepository creates a new instance of MockImageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageRepository {
	mock := &MockImageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageRepository is an autogenerated mock type for the ImageRepository type
type MockImageRepository struct {
	mock.Mock
}

type MockImageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageRepository) EXPECT() *MockImageRepository_Expecter {
	return &MockImageRepository_Expecter{mock: &_m.Mock}
}

// LoadImageByID provides a mock function for the type MockImageRepository
func (_mock *MockImageRepository) LoadImageByID(ctx context.Context, imageID *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error) {
	ret := _mock.Called(ctx, imageID)

	if len(ret) == 0 {
		panic("no return value specified for LoadImageByID")
	}

	var r0 io.ReadCloser
	var r1 *entities.ObjectMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error)); ok {
		return returnFunc(ctx, imageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) io.ReadCloser); ok {
		r0 = returnFunc(ctx, imageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.FullImageID) *entities.ObjectMetadata); ok {
		r1 = returnFunc(ctx, imageID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.ObjectMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *entities.FullImageID) error); ok {
		r2 = returnFunc(ctx, imageID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockImageRepository_LoadImageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadImageByID'
type MockImageRepository_LoadImageByID_Call struct {
	*mock.Call
}

// LoadImageByID is a helper method to define mock.On call
//   - ctx
//   - imageID
func (_e *MockImageRepository_Expecter) LoadImageByID(ctx interface{}, imageID interface{}) *MockImageRepository_LoadImageByID_Call {
	return &MockImageRepository_LoadImageByID_Call{Call: _e.mock.On("LoadImageByID", ctx, imageID)}
}

func (_c *MockImageRepository_LoadImageByID_Call) Run(run func(ctx context.Context, imageID *entities.FullImageID)) *MockImageRepository_LoadImageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullImageID))
	})
	return _c
}

func (_c *MockImageRepository_LoadImageByID_Call) Return(readCloser io.ReadCloser, objectMetadata *entities.ObjectMetadata, err error) *MockImageRepository_LoadImageByID_Call {
	_c.Call.Return(readCloser, objectMetadata, err)
	return _c
}

func (_c *MockImageRepository_LoadImageByID_Call) RunAndReturn(run func(ctx context.Context, imageID *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error)) *MockImageRepository_LoadImageByID_Call {
	_c.Call.Return(run)
	return _c
}

// LoadThumbnailByID provides a mock function for the type MockImageRepository
func (_mock *MockImageRepository) LoadThumbnailByID(ctx context.Context, imageID *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error) {
	ret := _mock.Called(ctx, imageID)

	if len(ret) == 0 {
		panic("no return value specified for LoadThumbnailByID")
	}

	var r0 io.ReadCloser
	var r1 *entities.ObjectMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error)); ok {
		return returnFunc(ctx, imageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) io.ReadCloser); ok {
		r0 = returnFunc(ctx, imageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.FullImageID) *entities.ObjectMetadata); ok {
		r1 = returnFunc(ctx, imageID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.ObjectMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *entities.FullImageID) error); ok {
		r2 = returnFunc(ctx, imageID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockImageRepository_LoadThumbnailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadThumbnailByID'
type MockImageRepository_LoadThumbnailByID_Call struct {
	*mock.Call
}

// LoadThumbnailByID is a helper method to define mock.On call
//   - ctx
//   - imageID
func (_e *MockImageRepository_Expecter) LoadThumbnailByID(ctx interface{}, imageID interface{}) *MockImageRepository_LoadThumbnailByID_Call {
	return &MockImageRepository_LoadThumbnailByID_Call{Call: _e.mock.On("LoadThumbnailByID", ctx, imageID)}
}

func (_c *MockImageRepository_LoadThumbnailByID_Call) Run(run func(ctx context.Context, imageID *entities.FullImageID)) *MockImageRepository_LoadThumbnailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullImageID))
	})
	return _c
}

func (_c *MockImageRepository_LoadThumbnailByID_Call) Return(readCloser io.ReadCloser, objectMetadata *entities.ObjectMetadata, err error) *MockImageRepository_LoadThumbnailByID_Call {
	_c.Call.Return(readCloser, objectMetadata, err)
	return _c
}

func (_c *MockImageRepository_LoadThumbnailByID_Call) RunAndReturn(run func(ctx context.Context, imageID *entities.FullImageID) (io.ReadCloser, *entities.ObjectMetadata, error)) *MockImageRepository_LoadThumbnailByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveThumbnail provides a mock function for the type MockImageRepository
func (_mock *MockImageRepository) SaveThumbnail(ctx context.Context, imageID *entities.FullImageID, thumbnail image.Image) error {
	ret := _mock.Called(ctx, imageID, thumbnail)

	if len(ret) == 0 {
		panic("no return value specified for SaveThumbnail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullImageID, image.Image) error); ok {
		r0 = returnFunc(ctx, imageID, thumbnail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageRepository_SaveThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveThumbnail'
type MockImageRepository_SaveThumbnail_Call struct {
	*mock.Call
}

// SaveThumbnail is a helper method to define mock.On call
//   - ctx
//   - imageID
//   - thumbnail
func (_e *MockImageRepository_Expecter) SaveThumbnail(ctx interface{}, imageID interface{}, thumbnail interface{}) *MockImageRepository_SaveThumbnail_Call {
	return &MockImageRepository_SaveThumbnail_Call{Call: _e.mock.On("SaveThumbnail", ctx, imageID, thumbnail)}
}

func (_c *MockImageRepository_SaveThumbnail_Call) Run(run func(ctx context.Context, imageID *entities.FullImageID, thumbnail image.Image)) *MockImageRepository_SaveThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullImageID), args[2].(image.Image))
	})
	return _c
}

func (_c *MockImageRepository_SaveThumbnail_Call) Return(err error) *MockImageRepository_SaveThumbnail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageRepository_SaveThumbnail_Call) RunAndReturn(run func(ctx context.Context, imageID *entities.FullImageID, thumbnail image.Image) error) *MockImageRepository_SaveThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVideoRepository creates a new instance of MockVideoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVideoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVideoRepository {
	mock := &MockVideoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVideoRepository is an autogenerated mock type for the VideoRepository type
type MockVideoRepository struct {
	mock.Mock
}

type MockVideoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVideoRepository) EXPECT() *MockVideoRepository_Expecter {
	return &MockVideoRepository_Expecter{mock: &_m.Mock}
}

// LoadVideoByID provides a mock function for the type MockVideoRepository
func (_mock *MockVideoRepository) LoadVideoByID(ctx context.Context, videoID *entities.FullVideoID) (*entities.Video, error) {
	ret := _mock.Called(ctx, videoID)

	if len(ret) == 0 {
		panic("no return value specified for LoadVideoByID")
	}

	var r0 *entities.Video
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID) (*entities.Video, error)); ok {
		return returnFunc(ctx, videoID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID) *entities.Video); ok {
		r0 = returnFunc(ctx, videoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Video)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.FullVideoID) error); ok {
		r1 = returnFunc(ctx, videoID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVideoRepository_LoadVideoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadVideoByID'
type MockVideoRepository_LoadVideoByID_Call struct {
	*mock.Call
}

// LoadVideoByID is a helper method to define mock.On call
//   - ctx
//   - videoID
func (_e *MockVideoRepository_Expecter) LoadVideoByID(ctx interface{}, videoID interface{}) *MockVideoRepository_LoadVideoByID_Call {
	return &MockVideoRepository_LoadVideoByID_Call{Call: _e.mock.On("LoadVideoByID", ctx, videoID)}
}

func (_c *MockVideoRepository_LoadVideoByID_Call) Run(run func(ctx context.Context, videoID *entities.FullVideoID)) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullVideoID))
	})
	return _c
}

func (_c *MockVideoRepository_LoadVideoByID_Call) Return(video *entities.Video, err error) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Return(video, err)
	return _c
}

func (_c *MockVideoRepository_LoadVideoByID_Call) RunAndReturn(run func(ctx context.Context, videoID *entities.FullVideoID) (*entities.Video, error)) *MockVideoRepository_LoadVideoByID_Call {
	_c.Call.Return(run)
	return _c
}
