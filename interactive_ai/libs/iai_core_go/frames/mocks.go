// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package frames

import (
	"bytes"
	"context"
	"io"

	"geti.com/iai_core/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCLIFrameExtractor creates a new instance of MockCLIFrameExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCLIFrameExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCLIFrameExtractor {
	mock := &MockCLIFrameExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCLIFrameExtractor is an autogenerated mock type for the CLIFrameExtractor type
type MockCLIFrameExtractor struct {
	mock.Mock
}

type MockCLIFrameExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCLIFrameExtractor) EXPECT() *MockCLIFrameExtractor_Expecter {
	return &MockCLIFrameExtractor_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type MockCLIFrameExtractor
func (_mock *MockCLIFrameExtractor) Read(ctx context.Context, pr io.ReadCloser) <-chan *FrameData {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 <-chan *FrameData
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.ReadCloser) <-chan *FrameData); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *FrameData)
		}
	}
	return r0
}

// MockCLIFrameExtractor_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockCLIFrameExtractor_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx
//   - pr
func (_e *MockCLIFrameExtractor_Expecter) Read(ctx interface{}, pr interface{}) *MockCLIFrameExtractor_Read_Call {
	return &MockCLIFrameExtractor_Read_Call{Call: _e.mock.On("Read", ctx, pr)}
}

func (_c *MockCLIFrameExtractor_Read_Call) Run(run func(ctx context.Context, pr io.ReadCloser)) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.ReadCloser))
	})
	return _c
}

func (_c *MockCLIFrameExtractor_Read_Call) Return(frameDataCh <-chan *FrameData) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Return(frameDataCh)
	return _c
}

func (_c *MockCLIFrameExtractor_Read_Call) RunAndReturn(run func(ctx context.Context, pr io.ReadCloser) <-chan *FrameData) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockCLIFrameExtractor
func (_mock *MockCLIFrameExtractor) Start(ctx context.Context, video *entities.Video, start int, end int, skip int, writer io.WriteCloser) <-chan error {
	ret := _mock.Called(ctx, video, start, end, skip, writer)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 <-chan error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Video, int, int, int, io.WriteCloser) <-chan error); ok {
		r0 = returnFunc(ctx, video, start, end, skip, writer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}
	return r0
}

// MockCLIFrameExtractor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCLIFrameExtractor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx
//   - video
//   - start
//   - end
//   - skip
//   - writer
func (_e *MockCLIFrameExtractor_Expecter) Start(ctx interface{}, video interface{}, start interface{}, end interface{}, skip interface{}, writer interface{}) *MockCLIFrameExtractor_Start_Call {
	return &MockCLIFrameExtractor_Start_Call{Call: _e.mock.On("Start", ctx, video, start, end, skip, writer)}
}

func (_c *MockCLIFrameExtractor_Start_Call) Run(run func(ctx context.Context, video *entities.Video, start int, end int, skip int, writer io.WriteCloser)) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Video), args[2].(int), args[3].(int), args[4].(int), args[5].(io.WriteCloser))
	})
	return _c
}

func (_c *MockCLIFrameExtractor_Start_Call) Return(errCh <-chan error) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Return(errCh)
	return _c
}

func (_c *MockCLIFrameExtractor_Start_Call) RunAndReturn(run func(ctx context.Context, video *entities.Video, start int, end int, skip int, writer io.WriteCloser) <-chan error) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFrameReader creates a new instance of MockFrameReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFrameReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFrameReader {
	mock := &MockFrameReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFrameReader is an autogenerated mock type for the FrameReader type
type MockFrameReader struct {
	mock.Mock
}

type MockFrameReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFrameReader) EXPECT() *MockFrameReader_Expecter {
	return &MockFrameReader_Expecter{mock: &_m.Mock}
}

// ReadFrameToBuffer provides a mock function for the type MockFrameReader
func (_mock *MockFrameReader) ReadFrameToBuffer(path string, frameNum int) (*bytes.Buffer, error) {
	ret := _mock.Called(path, frameNum)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrameToBuffer")
	}

	var r0 *bytes.Buffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) (*bytes.Buffer, error)); ok {
		return returnFunc(path, frameNum)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) *bytes.Buffer); ok {
		r0 = returnFunc(path, frameNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(path, frameNum)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFrameReader_ReadFrameToBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrameToBuffer'
type MockFrameReader_ReadFrameToBuffer_Call struct {
	*mock.Call
}

// ReadFrameToBuffer is a helper method to define mock.On call
//   - path
//   - frameNum
func (_e *MockFrameReader_Expecter) ReadFrameToBuffer(path interface{}, frameNum interface{}) *MockFrameReader_ReadFrameToBuffer_Call {
	return &MockFrameReader_ReadFrameToBuffer_Call{Call: _e.mock.On("ReadFrameToBuffer", path, frameNum)}
}

func (_c *MockFrameReader_ReadFrameToBuffer_Call) Run(run func(path string, frameNum int)) *MockFrameReader_ReadFrameToBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockFrameReader_ReadFrameToBuffer_Call) Return(buffer *bytes.Buffer, err error) *MockFrameReader_ReadFrameToBuffer_Call {
	_c.Call.Return(buffer, err)
	return _c
}

func (_c *MockFrameReader_ReadFrameToBuffer_Call) RunAndReturn(run func(path string, frameNum int) (*bytes.Buffer, error)) *MockFrameReader_ReadFrameToBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrameToBufferFps provides a mock function for the type MockFrameReader
func (_mock *MockFrameReader) ReadFrameToBufferFps(path string, frameNum int, fps float64) (*bytes.Buffer, error) {
	ret := _mock.Called(path, frameNum, fps)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrameToBufferFps")
	}

	var r0 *bytes.Buffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, float64) (*bytes.Buffer, error)); ok {
		return returnFunc(path, frameNum, fps)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, float64) *bytes.Buffer); ok {
		r0 = returnFunc(path, frameNum, fps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, float64) error); ok {
		r1 = returnFunc(path, frameNum, fps)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFrameReader_ReadFrameToBufferFps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrameToBufferFps'
type MockFrameReader_ReadFrameToBufferFps_Call struct {
	*mock.Call
}

// ReadFrameToBufferFps is a helper method to define mock.On call
//   - path
//   - frameNum
//   - fps
func (_e *MockFrameReader_Expecter) ReadFrameToBufferFps(path interface{}, frameNum interface{}, fps interface{}) *MockFrameReader_ReadFrameToBufferFps_Call {
	return &MockFrameReader_ReadFrameToBufferFps_Call{Call: _e.mock.On("ReadFrameToBufferFps", path, frameNum, fps)}
}

func (_c *MockFrameReader_ReadFrameToBufferFps_Call) Run(run func(path string, frameNum int, fps float64)) *MockFrameReader_ReadFrameToBufferFps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(float64))
	})
	return _c
}

func (_c *MockFrameReader_ReadFrameToBufferFps_Call) Return(buffer *bytes.Buffer, err error) *MockFrameReader_ReadFrameToBufferFps_Call {
	_c.Call.Return(buffer, err)
	return _c
}

func (_c *MockFrameReader_ReadFrameToBufferFps_Call) RunAndReturn(run func(path string, frameNum int, fps float64) (*bytes.Buffer, error)) *MockFrameReader_ReadFrameToBufferFps_Call {
	_c.Call.Return(run)
	return _c
}
