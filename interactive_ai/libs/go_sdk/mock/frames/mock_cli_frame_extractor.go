// Code generated by mockery. DO NOT EDIT.

package frames

import (
	context "context"

	entities "geti.com/go_sdk/entities"
	frames "geti.com/go_sdk/frames"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockCLIFrameExtractor is an autogenerated mock type for the CLIFrameExtractor type
type MockCLIFrameExtractor struct {
	mock.Mock
}

type MockCLIFrameExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCLIFrameExtractor) EXPECT() *MockCLIFrameExtractor_Expecter {
	return &MockCLIFrameExtractor_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: ctx, pr
func (_m *MockCLIFrameExtractor) Read(ctx context.Context, pr io.ReadCloser) <-chan *frames.FrameData {
	ret := _m.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 <-chan *frames.FrameData
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadCloser) <-chan *frames.FrameData); ok {
		r0 = rf(ctx, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *frames.FrameData)
		}
	}

	return r0
}

// MockCLIFrameExtractor_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockCLIFrameExtractor_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - pr io.ReadCloser
func (_e *MockCLIFrameExtractor_Expecter) Read(ctx interface{}, pr interface{}) *MockCLIFrameExtractor_Read_Call {
	return &MockCLIFrameExtractor_Read_Call{Call: _e.mock.On("Read", ctx, pr)}
}

func (_c *MockCLIFrameExtractor_Read_Call) Run(run func(ctx context.Context, pr io.ReadCloser)) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.ReadCloser))
	})
	return _c
}

func (_c *MockCLIFrameExtractor_Read_Call) Return(_a0 <-chan *frames.FrameData) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCLIFrameExtractor_Read_Call) RunAndReturn(run func(context.Context, io.ReadCloser) <-chan *frames.FrameData) *MockCLIFrameExtractor_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, video, start, end, skip, writer
func (_m *MockCLIFrameExtractor) Start(ctx context.Context, video *entities.Video, start int, end int, skip int, writer io.WriteCloser) <-chan error {
	ret := _m.Called(ctx, video, start, end, skip, writer)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Video, int, int, int, io.WriteCloser) <-chan error); ok {
		r0 = rf(ctx, video, start, end, skip, writer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockCLIFrameExtractor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCLIFrameExtractor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - video *entities.Video
//   - start int
//   - end int
//   - skip int
//   - writer io.WriteCloser
func (_e *MockCLIFrameExtractor_Expecter) Start(ctx interface{}, video interface{}, start interface{}, end interface{}, skip interface{}, writer interface{}) *MockCLIFrameExtractor_Start_Call {
	return &MockCLIFrameExtractor_Start_Call{Call: _e.mock.On("Start", ctx, video, start, end, skip, writer)}
}

func (_c *MockCLIFrameExtractor_Start_Call) Run(run func(ctx context.Context, video *entities.Video, start int, end int, skip int, writer io.WriteCloser)) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Video), args[2].(int), args[3].(int), args[4].(int), args[5].(io.WriteCloser))
	})
	return _c
}

func (_c *MockCLIFrameExtractor_Start_Call) Return(_a0 <-chan error) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCLIFrameExtractor_Start_Call) RunAndReturn(run func(context.Context, *entities.Video, int, int, int, io.WriteCloser) <-chan error) *MockCLIFrameExtractor_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCLIFrameExtractor creates a new instance of MockCLIFrameExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCLIFrameExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCLIFrameExtractor {
	mock := &MockCLIFrameExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
