// Code generated by mockery. DO NOT EDIT.

package storage

import (
	context "context"
	io "io"

	entities "geti.com/go_sdk/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockObjectStorageHandler is an autogenerated mock type for the ObjectStorageHandler type
type MockObjectStorageHandler struct {
	mock.Mock
}

type MockObjectStorageHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStorageHandler) EXPECT() *MockObjectStorageHandler_Expecter {
	return &MockObjectStorageHandler_Expecter{mock: &_m.Mock}
}

// CreateObject provides a mock function with given fields: ctx, objectType, objectName, reader, objectSize
func (_m *MockObjectStorageHandler) CreateObject(ctx context.Context, objectType string, objectName string, reader io.Reader, objectSize int64) error {
	ret := _m.Called(ctx, objectType, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for CreateObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r0 = rf(ctx, objectType, objectName, reader, objectSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorageHandler_CreateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateObject'
type MockObjectStorageHandler_CreateObject_Call struct {
	*mock.Call
}

// CreateObject is a helper method to define mock.On call
//   - ctx context.Context
//   - objectType string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
func (_e *MockObjectStorageHandler_Expecter) CreateObject(ctx interface{}, objectType interface{}, objectName interface{}, reader interface{}, objectSize interface{}) *MockObjectStorageHandler_CreateObject_Call {
	return &MockObjectStorageHandler_CreateObject_Call{Call: _e.mock.On("CreateObject", ctx, objectType, objectName, reader, objectSize)}
}

func (_c *MockObjectStorageHandler_CreateObject_Call) Run(run func(ctx context.Context, objectType string, objectName string, reader io.Reader, objectSize int64)) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *MockObjectStorageHandler_CreateObject_Call) Return(_a0 error) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorageHandler_CreateObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64) error) *MockObjectStorageHandler_CreateObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectByType provides a mock function with given fields: ctx, objectType, objectName
func (_m *MockObjectStorageHandler) GetObjectByType(ctx context.Context, objectType string, objectName string) (io.ReadCloser, *entities.ObjectMetadata, error) {
	ret := _m.Called(ctx, objectType, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectByType")
	}

	var r0 io.ReadCloser
	var r1 *entities.ObjectMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, *entities.ObjectMetadata, error)); ok {
		return rf(ctx, objectType, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, objectType, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *entities.ObjectMetadata); ok {
		r1 = rf(ctx, objectType, objectName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.ObjectMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, objectType, objectName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStorageHandler_GetObjectByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectByType'
type MockObjectStorageHandler_GetObjectByType_Call struct {
	*mock.Call
}

// GetObjectByType is a helper method to define mock.On call
//   - ctx context.Context
//   - objectType string
//   - objectName string
func (_e *MockObjectStorageHandler_Expecter) GetObjectByType(ctx interface{}, objectType interface{}, objectName interface{}) *MockObjectStorageHandler_GetObjectByType_Call {
	return &MockObjectStorageHandler_GetObjectByType_Call{Call: _e.mock.On("GetObjectByType", ctx, objectType, objectName)}
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) Run(run func(ctx context.Context, objectType string, objectName string)) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) Return(_a0 io.ReadCloser, _a1 *entities.ObjectMetadata, _a2 error) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockObjectStorageHandler_GetObjectByType_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, *entities.ObjectMetadata, error)) *MockObjectStorageHandler_GetObjectByType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectStorageHandler creates a new instance of MockObjectStorageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStorageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStorageHandler {
	mock := &MockObjectStorageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
