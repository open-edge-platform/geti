// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllers

import (
	"bytes"
	"inference_gateway/app/entities"
	"inference_gateway/app/usecase"

	entities0 "geti.com/iai_core/entities"
	"geti.com/iai_core/errors"
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInferenceController creates a new instance of MockInferenceController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInferenceController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInferenceController {
	mock := &MockInferenceController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInferenceController is an autogenerated mock type for the InferenceController type
type MockInferenceController struct {
	mock.Mock
}

type MockInferenceController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInferenceController) EXPECT() *MockInferenceController_Expecter {
	return &MockInferenceController_Expecter{mock: &_m.Mock}
}

// BatchExplain provides a mock function for the type MockInferenceController
func (_mock *MockInferenceController) BatchExplain(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (*usecase.BatchExplainJSON, *errors.HTTPError) {
	ret := _mock.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for BatchExplain")
	}

	var r0 *usecase.BatchExplainJSON
	var r1 *errors.HTTPError
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) (*usecase.BatchExplainJSON, *errors.HTTPError)); ok {
		return returnFunc(c, params, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *usecase.BatchExplainJSON); ok {
		r0 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.BatchExplainJSON)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *errors.HTTPError); ok {
		r1 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}
	return r0, r1
}

// MockInferenceController_BatchExplain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchExplain'
type MockInferenceController_BatchExplain_Call struct {
	*mock.Call
}

// BatchExplain is a helper method to define mock.On call
//   - c
//   - params
//   - entityID
func (_e *MockInferenceController_Expecter) BatchExplain(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_BatchExplain_Call {
	return &MockInferenceController_BatchExplain_Call{Call: _e.mock.On("BatchExplain", c, params, entityID)}
}

func (_c *MockInferenceController_BatchExplain_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID)) *MockInferenceController_BatchExplain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockInferenceController_BatchExplain_Call) Return(batchExplainJSON *usecase.BatchExplainJSON, hTTPError *errors.HTTPError) *MockInferenceController_BatchExplain_Call {
	_c.Call.Return(batchExplainJSON, hTTPError)
	return _c
}

func (_c *MockInferenceController_BatchExplain_Call) RunAndReturn(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (*usecase.BatchExplainJSON, *errors.HTTPError)) *MockInferenceController_BatchExplain_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPredict provides a mock function for the type MockInferenceController
func (_mock *MockInferenceController) BatchPredict(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError) {
	ret := _mock.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for BatchPredict")
	}

	var r0 *usecase.BatchPredictionJSON
	var r1 *errors.HTTPError
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError)); ok {
		return returnFunc(c, params, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *usecase.BatchPredictionJSON); ok {
		r0 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.BatchPredictionJSON)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *errors.HTTPError); ok {
		r1 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}
	return r0, r1
}

// MockInferenceController_BatchPredict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPredict'
type MockInferenceController_BatchPredict_Call struct {
	*mock.Call
}

// BatchPredict is a helper method to define mock.On call
//   - c
//   - params
//   - entityID
func (_e *MockInferenceController_Expecter) BatchPredict(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_BatchPredict_Call {
	return &MockInferenceController_BatchPredict_Call{Call: _e.mock.On("BatchPredict", c, params, entityID)}
}

func (_c *MockInferenceController_BatchPredict_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID)) *MockInferenceController_BatchPredict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockInferenceController_BatchPredict_Call) Return(batchPredictionJSON *usecase.BatchPredictionJSON, hTTPError *errors.HTTPError) *MockInferenceController_BatchPredict_Call {
	_c.Call.Return(batchPredictionJSON, hTTPError)
	return _c
}

func (_c *MockInferenceController_BatchPredict_Call) RunAndReturn(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError)) *MockInferenceController_BatchPredict_Call {
	_c.Call.Return(run)
	return _c
}

// Explain provides a mock function for the type MockInferenceController
func (_mock *MockInferenceController) Explain(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) ([]byte, *errors.HTTPError) {
	ret := _mock.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for Explain")
	}

	var r0 []byte
	var r1 *errors.HTTPError
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) ([]byte, *errors.HTTPError)); ok {
		return returnFunc(c, params, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) []byte); ok {
		r0 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *errors.HTTPError); ok {
		r1 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}
	return r0, r1
}

// MockInferenceController_Explain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Explain'
type MockInferenceController_Explain_Call struct {
	*mock.Call
}

// Explain is a helper method to define mock.On call
//   - c
//   - params
//   - entityID
func (_e *MockInferenceController_Expecter) Explain(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_Explain_Call {
	return &MockInferenceController_Explain_Call{Call: _e.mock.On("Explain", c, params, entityID)}
}

func (_c *MockInferenceController_Explain_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID)) *MockInferenceController_Explain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockInferenceController_Explain_Call) Return(bytes []byte, hTTPError *errors.HTTPError) *MockInferenceController_Explain_Call {
	_c.Call.Return(bytes, hTTPError)
	return _c
}

func (_c *MockInferenceController_Explain_Call) RunAndReturn(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) ([]byte, *errors.HTTPError)) *MockInferenceController_Explain_Call {
	_c.Call.Return(run)
	return _c
}

// IsModelReady provides a mock function for the type MockInferenceController
func (_mock *MockInferenceController) IsModelReady(c *gin.Context, entityID string) bool {
	ret := _mock.Called(c, entityID)

	if len(ret) == 0 {
		panic("no return value specified for IsModelReady")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = returnFunc(c, entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockInferenceController_IsModelReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModelReady'
type MockInferenceController_IsModelReady_Call struct {
	*mock.Call
}

// IsModelReady is a helper method to define mock.On call
//   - c
//   - entityID
func (_e *MockInferenceController_Expecter) IsModelReady(c interface{}, entityID interface{}) *MockInferenceController_IsModelReady_Call {
	return &MockInferenceController_IsModelReady_Call{Call: _e.mock.On("IsModelReady", c, entityID)}
}

func (_c *MockInferenceController_IsModelReady_Call) Run(run func(c *gin.Context, entityID string)) *MockInferenceController_IsModelReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInferenceController_IsModelReady_Call) Return(b bool) *MockInferenceController_IsModelReady_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockInferenceController_IsModelReady_Call) RunAndReturn(run func(c *gin.Context, entityID string) bool) *MockInferenceController_IsModelReady_Call {
	_c.Call.Return(run)
	return _c
}

// Predict provides a mock function for the type MockInferenceController
func (_mock *MockInferenceController) Predict(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (int, []byte, *errors.HTTPError) {
	ret := _mock.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for Predict")
	}

	var r0 int
	var r1 []byte
	var r2 *errors.HTTPError
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) (int, []byte, *errors.HTTPError)); ok {
		return returnFunc(c, params, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) int); ok {
		r0 = returnFunc(c, params, entityID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) []byte); ok {
		r1 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *errors.HTTPError); ok {
		r2 = returnFunc(c, params, entityID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.HTTPError)
		}
	}
	return r0, r1, r2
}

// MockInferenceController_Predict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Predict'
type MockInferenceController_Predict_Call struct {
	*mock.Call
}

// Predict is a helper method to define mock.On call
//   - c
//   - params
//   - entityID
func (_e *MockInferenceController_Expecter) Predict(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_Predict_Call {
	return &MockInferenceController_Predict_Call{Call: _e.mock.On("Predict", c, params, entityID)}
}

func (_c *MockInferenceController_Predict_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID)) *MockInferenceController_Predict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockInferenceController_Predict_Call) Return(n int, bytes []byte, hTTPError *errors.HTTPError) *MockInferenceController_Predict_Call {
	_c.Call.Return(n, bytes, hTTPError)
	return _c
}

func (_c *MockInferenceController_Predict_Call) RunAndReturn(run func(c *gin.Context, params *entities.InferenceRequest, entityID entities0.ID) (int, []byte, *errors.HTTPError)) *MockInferenceController_Predict_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestHandler creates a new instance of MockRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestHandler {
	mock := &MockRequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestHandler is an autogenerated mock type for the RequestHandler type
type MockRequestHandler struct {
	mock.Mock
}

type MockRequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestHandler) EXPECT() *MockRequestHandler_Expecter {
	return &MockRequestHandler_Expecter{mock: &_m.Mock}
}

// GetMedia provides a mock function for the type MockRequestHandler
func (_mock *MockRequestHandler) GetMedia(c *gin.Context, r *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error) {
	ret := _mock.Called(c, r)

	if len(ret) == 0 {
		panic("no return value specified for GetMedia")
	}

	var r0 *bytes.Buffer
	var r1 *entities.MediaInfo
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error)); ok {
		return returnFunc(c, r)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest) *bytes.Buffer); ok {
		r0 = returnFunc(c, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest) *entities.MediaInfo); ok {
		r1 = returnFunc(c, r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.MediaInfo)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*gin.Context, *entities.InferenceRequest) error); ok {
		r2 = returnFunc(c, r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRequestHandler_GetMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMedia'
type MockRequestHandler_GetMedia_Call struct {
	*mock.Call
}

// GetMedia is a helper method to define mock.On call
//   - c
//   - r
func (_e *MockRequestHandler_Expecter) GetMedia(c interface{}, r interface{}) *MockRequestHandler_GetMedia_Call {
	return &MockRequestHandler_GetMedia_Call{Call: _e.mock.On("GetMedia", c, r)}
}

func (_c *MockRequestHandler_GetMedia_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest)) *MockRequestHandler_GetMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest))
	})
	return _c
}

func (_c *MockRequestHandler_GetMedia_Call) Return(buffer *bytes.Buffer, mediaInfo *entities.MediaInfo, err error) *MockRequestHandler_GetMedia_Call {
	_c.Call.Return(buffer, mediaInfo, err)
	return _c
}

func (_c *MockRequestHandler_GetMedia_Call) RunAndReturn(run func(c *gin.Context, r *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error)) *MockRequestHandler_GetMedia_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatchPredictionRequest provides a mock function for the type MockRequestHandler
func (_mock *MockRequestHandler) NewBatchPredictionRequest(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID) (*entities.BatchPredictionRequestData, error) {
	ret := _mock.Called(c, r, entityID)

	if len(ret) == 0 {
		panic("no return value specified for NewBatchPredictionRequest")
	}

	var r0 *entities.BatchPredictionRequestData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) (*entities.BatchPredictionRequestData, error)); ok {
		return returnFunc(c, r, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *entities.BatchPredictionRequestData); ok {
		r0 = returnFunc(c, r, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BatchPredictionRequestData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) error); ok {
		r1 = returnFunc(c, r, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestHandler_NewBatchPredictionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBatchPredictionRequest'
type MockRequestHandler_NewBatchPredictionRequest_Call struct {
	*mock.Call
}

// NewBatchPredictionRequest is a helper method to define mock.On call
//   - c
//   - r
//   - entityID
func (_e *MockRequestHandler_Expecter) NewBatchPredictionRequest(c interface{}, r interface{}, entityID interface{}) *MockRequestHandler_NewBatchPredictionRequest_Call {
	return &MockRequestHandler_NewBatchPredictionRequest_Call{Call: _e.mock.On("NewBatchPredictionRequest", c, r, entityID)}
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID)) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) Return(batchPredictionRequestData *entities.BatchPredictionRequestData, err error) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Return(batchPredictionRequestData, err)
	return _c
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) RunAndReturn(run func(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID) (*entities.BatchPredictionRequestData, error)) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewPredictionRequest provides a mock function for the type MockRequestHandler
func (_mock *MockRequestHandler) NewPredictionRequest(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID) (*entities.PredictionRequestData, error) {
	ret := _mock.Called(c, r, entityID)

	if len(ret) == 0 {
		panic("no return value specified for NewPredictionRequest")
	}

	var r0 *entities.PredictionRequestData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) (*entities.PredictionRequestData, error)); ok {
		return returnFunc(c, r, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) *entities.PredictionRequestData); ok {
		r0 = returnFunc(c, r, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PredictionRequestData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, entities0.ID) error); ok {
		r1 = returnFunc(c, r, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestHandler_NewPredictionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPredictionRequest'
type MockRequestHandler_NewPredictionRequest_Call struct {
	*mock.Call
}

// NewPredictionRequest is a helper method to define mock.On call
//   - c
//   - r
//   - entityID
func (_e *MockRequestHandler_Expecter) NewPredictionRequest(c interface{}, r interface{}, entityID interface{}) *MockRequestHandler_NewPredictionRequest_Call {
	return &MockRequestHandler_NewPredictionRequest_Call{Call: _e.mock.On("NewPredictionRequest", c, r, entityID)}
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID)) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(entities0.ID))
	})
	return _c
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) Return(predictionRequestData *entities.PredictionRequestData, err error) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Return(predictionRequestData, err)
	return _c
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) RunAndReturn(run func(c *gin.Context, r *entities.InferenceRequest, entityID entities0.ID) (*entities.PredictionRequestData, error)) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Return(run)
	return _c
}
