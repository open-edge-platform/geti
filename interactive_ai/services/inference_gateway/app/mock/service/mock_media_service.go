// Code generated by mockery. DO NOT EDIT.

package service

import (
	bytes "bytes"
	context "context"

	entities "geti.com/iai_core/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockMediaService is an autogenerated mock type for the MediaService type
type MockMediaService struct {
	mock.Mock
}

type MockMediaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaService) EXPECT() *MockMediaService_Expecter {
	return &MockMediaService_Expecter{mock: &_m.Mock}
}

// GetFrame provides a mock function with given fields: ctx, fullVideoID, frameIndex
func (_m *MockMediaService) GetFrame(ctx context.Context, fullVideoID *entities.FullVideoID, frameIndex int) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, fullVideoID, frameIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetFrame")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID, int) (*bytes.Buffer, error)); ok {
		return rf(ctx, fullVideoID, frameIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullVideoID, int) *bytes.Buffer); ok {
		r0 = rf(ctx, fullVideoID, frameIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.FullVideoID, int) error); ok {
		r1 = rf(ctx, fullVideoID, frameIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaService_GetFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFrame'
type MockMediaService_GetFrame_Call struct {
	*mock.Call
}

// GetFrame is a helper method to define mock.On call
//   - ctx context.Context
//   - fullVideoID *entities.FullVideoID
//   - frameIndex int
func (_e *MockMediaService_Expecter) GetFrame(ctx interface{}, fullVideoID interface{}, frameIndex interface{}) *MockMediaService_GetFrame_Call {
	return &MockMediaService_GetFrame_Call{Call: _e.mock.On("GetFrame", ctx, fullVideoID, frameIndex)}
}

func (_c *MockMediaService_GetFrame_Call) Run(run func(ctx context.Context, fullVideoID *entities.FullVideoID, frameIndex int)) *MockMediaService_GetFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullVideoID), args[2].(int))
	})
	return _c
}

func (_c *MockMediaService_GetFrame_Call) Return(_a0 *bytes.Buffer, _a1 error) *MockMediaService_GetFrame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaService_GetFrame_Call) RunAndReturn(run func(context.Context, *entities.FullVideoID, int) (*bytes.Buffer, error)) *MockMediaService_GetFrame_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: ctx, fullImageID
func (_m *MockMediaService) GetImage(ctx context.Context, fullImageID *entities.FullImageID) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, fullImageID)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) (*bytes.Buffer, error)); ok {
		return rf(ctx, fullImageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.FullImageID) *bytes.Buffer); ok {
		r0 = rf(ctx, fullImageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.FullImageID) error); ok {
		r1 = rf(ctx, fullImageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaService_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockMediaService_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - fullImageID *entities.FullImageID
func (_e *MockMediaService_Expecter) GetImage(ctx interface{}, fullImageID interface{}) *MockMediaService_GetImage_Call {
	return &MockMediaService_GetImage_Call{Call: _e.mock.On("GetImage", ctx, fullImageID)}
}

func (_c *MockMediaService_GetImage_Call) Run(run func(ctx context.Context, fullImageID *entities.FullImageID)) *MockMediaService_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.FullImageID))
	})
	return _c
}

func (_c *MockMediaService_GetImage_Call) Return(_a0 *bytes.Buffer, _a1 error) *MockMediaService_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaService_GetImage_Call) RunAndReturn(run func(context.Context, *entities.FullImageID) (*bytes.Buffer, error)) *MockMediaService_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMediaService creates a new instance of MockMediaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaService {
	mock := &MockMediaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
