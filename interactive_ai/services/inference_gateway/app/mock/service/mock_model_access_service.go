// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"

	predictv2 "geti.com/predict"
	mock "github.com/stretchr/testify/mock"

	service "inference_gateway/app/service"
)

// MockModelAccessService is an autogenerated mock type for the ModelAccessService type
type MockModelAccessService struct {
	mock.Mock
}

type MockModelAccessService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelAccessService) EXPECT() *MockModelAccessService_Expecter {
	return &MockModelAccessService_Expecter{mock: &_m.Mock}
}

// InferImageBytes provides a mock function with given fields: ctx, params
func (_m *MockModelAccessService) InferImageBytes(ctx context.Context, params service.InferParameters) (*predictv2.ModelInferResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InferImageBytes")
	}

	var r0 *predictv2.ModelInferResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.InferParameters) (*predictv2.ModelInferResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.InferParameters) *predictv2.ModelInferResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelInferResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.InferParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelAccessService_InferImageBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InferImageBytes'
type MockModelAccessService_InferImageBytes_Call struct {
	*mock.Call
}

// InferImageBytes is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.InferParameters
func (_e *MockModelAccessService_Expecter) InferImageBytes(ctx interface{}, params interface{}) *MockModelAccessService_InferImageBytes_Call {
	return &MockModelAccessService_InferImageBytes_Call{Call: _e.mock.On("InferImageBytes", ctx, params)}
}

func (_c *MockModelAccessService_InferImageBytes_Call) Run(run func(ctx context.Context, params service.InferParameters)) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.InferParameters))
	})
	return _c
}

func (_c *MockModelAccessService_InferImageBytes_Call) Return(_a0 *predictv2.ModelInferResponse, _a1 error) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelAccessService_InferImageBytes_Call) RunAndReturn(run func(context.Context, service.InferParameters) (*predictv2.ModelInferResponse, error)) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Return(run)
	return _c
}

// IsModelReady provides a mock function with given fields: ctx, modelID
func (_m *MockModelAccessService) IsModelReady(ctx context.Context, modelID string) bool {
	ret := _m.Called(ctx, modelID)

	if len(ret) == 0 {
		panic("no return value specified for IsModelReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, modelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockModelAccessService_IsModelReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModelReady'
type MockModelAccessService_IsModelReady_Call struct {
	*mock.Call
}

// IsModelReady is a helper method to define mock.On call
//   - ctx context.Context
//   - modelID string
func (_e *MockModelAccessService_Expecter) IsModelReady(ctx interface{}, modelID interface{}) *MockModelAccessService_IsModelReady_Call {
	return &MockModelAccessService_IsModelReady_Call{Call: _e.mock.On("IsModelReady", ctx, modelID)}
}

func (_c *MockModelAccessService_IsModelReady_Call) Run(run func(ctx context.Context, modelID string)) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelAccessService_IsModelReady_Call) Return(_a0 bool) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelAccessService_IsModelReady_Call) RunAndReturn(run func(context.Context, string) bool) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Return(run)
	return _c
}

// TryRecoverModel provides a mock function with given fields: ctx, params
func (_m *MockModelAccessService) TryRecoverModel(ctx context.Context, params service.InferParameters) (*predictv2.ModelInferResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for TryRecoverModel")
	}

	var r0 *predictv2.ModelInferResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.InferParameters) (*predictv2.ModelInferResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.InferParameters) *predictv2.ModelInferResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelInferResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.InferParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelAccessService_TryRecoverModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryRecoverModel'
type MockModelAccessService_TryRecoverModel_Call struct {
	*mock.Call
}

// TryRecoverModel is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.InferParameters
func (_e *MockModelAccessService_Expecter) TryRecoverModel(ctx interface{}, params interface{}) *MockModelAccessService_TryRecoverModel_Call {
	return &MockModelAccessService_TryRecoverModel_Call{Call: _e.mock.On("TryRecoverModel", ctx, params)}
}

func (_c *MockModelAccessService_TryRecoverModel_Call) Run(run func(ctx context.Context, params service.InferParameters)) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.InferParameters))
	})
	return _c
}

func (_c *MockModelAccessService_TryRecoverModel_Call) Return(_a0 *predictv2.ModelInferResponse, _a1 error) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelAccessService_TryRecoverModel_Call) RunAndReturn(run func(context.Context, service.InferParameters) (*predictv2.ModelInferResponse, error)) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelAccessService creates a new instance of MockModelAccessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelAccessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelAccessService {
	mock := &MockModelAccessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
