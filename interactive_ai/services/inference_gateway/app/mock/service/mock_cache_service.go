// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"
	entities "inference_gateway/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheService is an autogenerated mock type for the CacheService type
type MockCacheService struct {
	mock.Mock
}

type MockCacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheService) EXPECT() *MockCacheService_Expecter {
	return &MockCacheService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCacheService) Get(ctx context.Context, request *entities.PredictionRequestData) (int, []byte, bool) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 []byte
	var r2 bool
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) (int, []byte, bool)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.PredictionRequestData) []byte); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entities.PredictionRequestData) bool); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockCacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request *entities.PredictionRequestData
func (_e *MockCacheService_Expecter) Get(ctx interface{}, request interface{}) *MockCacheService_Get_Call {
	return &MockCacheService_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCacheService_Get_Call) Run(run func(ctx context.Context, request *entities.PredictionRequestData)) *MockCacheService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.PredictionRequestData))
	})
	return _c
}

func (_c *MockCacheService_Get_Call) Return(_a0 int, _a1 []byte, _a2 bool) *MockCacheService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCacheService_Get_Call) RunAndReturn(run func(context.Context, *entities.PredictionRequestData) (int, []byte, bool)) *MockCacheService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheService creates a new instance of MockCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheService {
	mock := &MockCacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
