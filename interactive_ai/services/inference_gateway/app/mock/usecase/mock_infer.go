// Code generated by mockery. DO NOT EDIT.

package usecase

import (
	context "context"
	entities "inference_gateway/app/entities"

	mock "github.com/stretchr/testify/mock"

	usecase "inference_gateway/app/usecase"
)

// MockInfer is an autogenerated mock type for the Infer type
type MockInfer[T interface {
	usecase.BatchPredictionJSON | usecase.BatchExplainJSON
}] struct {
	mock.Mock
}

type MockInfer_Expecter[T interface {
	usecase.BatchPredictionJSON | usecase.BatchExplainJSON
}] struct {
	mock *mock.Mock
}

func (_m *MockInfer[T]) EXPECT() *MockInfer_Expecter[T] {
	return &MockInfer_Expecter[T]{mock: &_m.Mock}
}

// Batch provides a mock function with given fields: ctx, request
func (_m *MockInfer[T]) Batch(ctx context.Context, request *entities.BatchPredictionRequestData) (*T, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Batch")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BatchPredictionRequestData) (*T, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BatchPredictionRequestData) *T); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.BatchPredictionRequestData) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInfer_Batch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Batch'
type MockInfer_Batch_Call[T interface {
	usecase.BatchPredictionJSON | usecase.BatchExplainJSON
}] struct {
	*mock.Call
}

// Batch is a helper method to define mock.On call
//   - ctx context.Context
//   - request *entities.BatchPredictionRequestData
func (_e *MockInfer_Expecter[T]) Batch(ctx interface{}, request interface{}) *MockInfer_Batch_Call[T] {
	return &MockInfer_Batch_Call[T]{Call: _e.mock.On("Batch", ctx, request)}
}

func (_c *MockInfer_Batch_Call[T]) Run(run func(ctx context.Context, request *entities.BatchPredictionRequestData)) *MockInfer_Batch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.BatchPredictionRequestData))
	})
	return _c
}

func (_c *MockInfer_Batch_Call[T]) Return(_a0 *T, _a1 error) *MockInfer_Batch_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInfer_Batch_Call[T]) RunAndReturn(run func(context.Context, *entities.BatchPredictionRequestData) (*T, error)) *MockInfer_Batch_Call[T] {
	_c.Call.Return(run)
	return _c
}

// One provides a mock function with given fields: ctx, request
func (_m *MockInfer[T]) One(ctx context.Context, request *entities.PredictionRequestData) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for One")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.PredictionRequestData) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInfer_One_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'One'
type MockInfer_One_Call[T interface {
	usecase.BatchPredictionJSON | usecase.BatchExplainJSON
}] struct {
	*mock.Call
}

// One is a helper method to define mock.On call
//   - ctx context.Context
//   - request *entities.PredictionRequestData
func (_e *MockInfer_Expecter[T]) One(ctx interface{}, request interface{}) *MockInfer_One_Call[T] {
	return &MockInfer_One_Call[T]{Call: _e.mock.On("One", ctx, request)}
}

func (_c *MockInfer_One_Call[T]) Run(run func(ctx context.Context, request *entities.PredictionRequestData)) *MockInfer_One_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.PredictionRequestData))
	})
	return _c
}

func (_c *MockInfer_One_Call[T]) Return(_a0 string, _a1 error) *MockInfer_One_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInfer_One_Call[T]) RunAndReturn(run func(context.Context, *entities.PredictionRequestData) (string, error)) *MockInfer_One_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockInfer creates a new instance of MockInfer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfer[T interface {
	usecase.BatchPredictionJSON | usecase.BatchExplainJSON
}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfer[T] {
	mock := &MockInfer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
