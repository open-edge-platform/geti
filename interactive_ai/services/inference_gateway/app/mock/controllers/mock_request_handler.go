// Code generated by mockery. DO NOT EDIT.

package controllers

import (
	bytes "bytes"

	entities "inference_gateway/app/entities"

	gin "github.com/gin-gonic/gin"

	go_sdkentities "geti.com/go_sdk/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockRequestHandler is an autogenerated mock type for the RequestHandler type
type MockRequestHandler struct {
	mock.Mock
}

type MockRequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestHandler) EXPECT() *MockRequestHandler_Expecter {
	return &MockRequestHandler_Expecter{mock: &_m.Mock}
}

// GetMedia provides a mock function with given fields: c, r
func (_m *MockRequestHandler) GetMedia(c *gin.Context, r *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error) {
	ret := _m.Called(c, r)

	if len(ret) == 0 {
		panic("no return value specified for GetMedia")
	}

	var r0 *bytes.Buffer
	var r1 *entities.MediaInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error)); ok {
		return rf(c, r)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest) *bytes.Buffer); ok {
		r0 = rf(c, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest) *entities.MediaInfo); ok {
		r1 = rf(c, r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.MediaInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, *entities.InferenceRequest) error); ok {
		r2 = rf(c, r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRequestHandler_GetMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMedia'
type MockRequestHandler_GetMedia_Call struct {
	*mock.Call
}

// GetMedia is a helper method to define mock.On call
//   - c *gin.Context
//   - r *entities.InferenceRequest
func (_e *MockRequestHandler_Expecter) GetMedia(c interface{}, r interface{}) *MockRequestHandler_GetMedia_Call {
	return &MockRequestHandler_GetMedia_Call{Call: _e.mock.On("GetMedia", c, r)}
}

func (_c *MockRequestHandler_GetMedia_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest)) *MockRequestHandler_GetMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest))
	})
	return _c
}

func (_c *MockRequestHandler_GetMedia_Call) Return(_a0 *bytes.Buffer, _a1 *entities.MediaInfo, _a2 error) *MockRequestHandler_GetMedia_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRequestHandler_GetMedia_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest) (*bytes.Buffer, *entities.MediaInfo, error)) *MockRequestHandler_GetMedia_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatchPredictionRequest provides a mock function with given fields: c, r, entityID
func (_m *MockRequestHandler) NewBatchPredictionRequest(c *gin.Context, r *entities.InferenceRequest, entityID go_sdkentities.ID) (*entities.BatchPredictionRequestData, error) {
	ret := _m.Called(c, r, entityID)

	if len(ret) == 0 {
		panic("no return value specified for NewBatchPredictionRequest")
	}

	var r0 *entities.BatchPredictionRequestData
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*entities.BatchPredictionRequestData, error)); ok {
		return rf(c, r, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *entities.BatchPredictionRequestData); ok {
		r0 = rf(c, r, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BatchPredictionRequestData)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) error); ok {
		r1 = rf(c, r, entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestHandler_NewBatchPredictionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBatchPredictionRequest'
type MockRequestHandler_NewBatchPredictionRequest_Call struct {
	*mock.Call
}

// NewBatchPredictionRequest is a helper method to define mock.On call
//   - c *gin.Context
//   - r *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockRequestHandler_Expecter) NewBatchPredictionRequest(c interface{}, r interface{}, entityID interface{}) *MockRequestHandler_NewBatchPredictionRequest_Call {
	return &MockRequestHandler_NewBatchPredictionRequest_Call{Call: _e.mock.On("NewBatchPredictionRequest", c, r, entityID)}
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) Return(_a0 *entities.BatchPredictionRequestData, _a1 error) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestHandler_NewBatchPredictionRequest_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*entities.BatchPredictionRequestData, error)) *MockRequestHandler_NewBatchPredictionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewPredictionRequest provides a mock function with given fields: c, r, entityID
func (_m *MockRequestHandler) NewPredictionRequest(c *gin.Context, r *entities.InferenceRequest, entityID go_sdkentities.ID) (*entities.PredictionRequestData, error) {
	ret := _m.Called(c, r, entityID)

	if len(ret) == 0 {
		panic("no return value specified for NewPredictionRequest")
	}

	var r0 *entities.PredictionRequestData
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*entities.PredictionRequestData, error)); ok {
		return rf(c, r, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *entities.PredictionRequestData); ok {
		r0 = rf(c, r, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PredictionRequestData)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) error); ok {
		r1 = rf(c, r, entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestHandler_NewPredictionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPredictionRequest'
type MockRequestHandler_NewPredictionRequest_Call struct {
	*mock.Call
}

// NewPredictionRequest is a helper method to define mock.On call
//   - c *gin.Context
//   - r *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockRequestHandler_Expecter) NewPredictionRequest(c interface{}, r interface{}, entityID interface{}) *MockRequestHandler_NewPredictionRequest_Call {
	return &MockRequestHandler_NewPredictionRequest_Call{Call: _e.mock.On("NewPredictionRequest", c, r, entityID)}
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) Run(run func(c *gin.Context, r *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) Return(_a0 *entities.PredictionRequestData, _a1 error) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestHandler_NewPredictionRequest_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*entities.PredictionRequestData, error)) *MockRequestHandler_NewPredictionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestHandler creates a new instance of MockRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestHandler {
	mock := &MockRequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
