// Code generated by mockery. DO NOT EDIT.

package controllers

import (
	entities "inference_gateway/app/entities"

	errors "geti.com/go_sdk/errors"

	gin "github.com/gin-gonic/gin"

	go_sdkentities "geti.com/go_sdk/entities"

	mock "github.com/stretchr/testify/mock"

	usecase "inference_gateway/app/usecase"
)

// MockInferenceController is an autogenerated mock type for the InferenceController type
type MockInferenceController struct {
	mock.Mock
}

type MockInferenceController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInferenceController) EXPECT() *MockInferenceController_Expecter {
	return &MockInferenceController_Expecter{mock: &_m.Mock}
}

// BatchExplain provides a mock function with given fields: c, params, entityID
func (_m *MockInferenceController) BatchExplain(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID) (*usecase.BatchExplainJSON, *errors.HTTPError) {
	ret := _m.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for BatchExplain")
	}

	var r0 *usecase.BatchExplainJSON
	var r1 *errors.HTTPError
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*usecase.BatchExplainJSON, *errors.HTTPError)); ok {
		return rf(c, params, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *usecase.BatchExplainJSON); ok {
		r0 = rf(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.BatchExplainJSON)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *errors.HTTPError); ok {
		r1 = rf(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}

	return r0, r1
}

// MockInferenceController_BatchExplain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchExplain'
type MockInferenceController_BatchExplain_Call struct {
	*mock.Call
}

// BatchExplain is a helper method to define mock.On call
//   - c *gin.Context
//   - params *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockInferenceController_Expecter) BatchExplain(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_BatchExplain_Call {
	return &MockInferenceController_BatchExplain_Call{Call: _e.mock.On("BatchExplain", c, params, entityID)}
}

func (_c *MockInferenceController_BatchExplain_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockInferenceController_BatchExplain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockInferenceController_BatchExplain_Call) Return(_a0 *usecase.BatchExplainJSON, _a1 *errors.HTTPError) *MockInferenceController_BatchExplain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInferenceController_BatchExplain_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*usecase.BatchExplainJSON, *errors.HTTPError)) *MockInferenceController_BatchExplain_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPredict provides a mock function with given fields: c, params, entityID
func (_m *MockInferenceController) BatchPredict(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError) {
	ret := _m.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for BatchPredict")
	}

	var r0 *usecase.BatchPredictionJSON
	var r1 *errors.HTTPError
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError)); ok {
		return rf(c, params, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *usecase.BatchPredictionJSON); ok {
		r0 = rf(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.BatchPredictionJSON)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *errors.HTTPError); ok {
		r1 = rf(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}

	return r0, r1
}

// MockInferenceController_BatchPredict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPredict'
type MockInferenceController_BatchPredict_Call struct {
	*mock.Call
}

// BatchPredict is a helper method to define mock.On call
//   - c *gin.Context
//   - params *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockInferenceController_Expecter) BatchPredict(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_BatchPredict_Call {
	return &MockInferenceController_BatchPredict_Call{Call: _e.mock.On("BatchPredict", c, params, entityID)}
}

func (_c *MockInferenceController_BatchPredict_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockInferenceController_BatchPredict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockInferenceController_BatchPredict_Call) Return(_a0 *usecase.BatchPredictionJSON, _a1 *errors.HTTPError) *MockInferenceController_BatchPredict_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInferenceController_BatchPredict_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (*usecase.BatchPredictionJSON, *errors.HTTPError)) *MockInferenceController_BatchPredict_Call {
	_c.Call.Return(run)
	return _c
}

// Explain provides a mock function with given fields: c, params, entityID
func (_m *MockInferenceController) Explain(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID) ([]byte, *errors.HTTPError) {
	ret := _m.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for Explain")
	}

	var r0 []byte
	var r1 *errors.HTTPError
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) ([]byte, *errors.HTTPError)); ok {
		return rf(c, params, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) []byte); ok {
		r0 = rf(c, params, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *errors.HTTPError); ok {
		r1 = rf(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HTTPError)
		}
	}

	return r0, r1
}

// MockInferenceController_Explain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Explain'
type MockInferenceController_Explain_Call struct {
	*mock.Call
}

// Explain is a helper method to define mock.On call
//   - c *gin.Context
//   - params *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockInferenceController_Expecter) Explain(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_Explain_Call {
	return &MockInferenceController_Explain_Call{Call: _e.mock.On("Explain", c, params, entityID)}
}

func (_c *MockInferenceController_Explain_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockInferenceController_Explain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockInferenceController_Explain_Call) Return(_a0 []byte, _a1 *errors.HTTPError) *MockInferenceController_Explain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInferenceController_Explain_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) ([]byte, *errors.HTTPError)) *MockInferenceController_Explain_Call {
	_c.Call.Return(run)
	return _c
}

// IsModelReady provides a mock function with given fields: c, entityID
func (_m *MockInferenceController) IsModelReady(c *gin.Context, entityID string) bool {
	ret := _m.Called(c, entityID)

	if len(ret) == 0 {
		panic("no return value specified for IsModelReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = rf(c, entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInferenceController_IsModelReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModelReady'
type MockInferenceController_IsModelReady_Call struct {
	*mock.Call
}

// IsModelReady is a helper method to define mock.On call
//   - c *gin.Context
//   - entityID string
func (_e *MockInferenceController_Expecter) IsModelReady(c interface{}, entityID interface{}) *MockInferenceController_IsModelReady_Call {
	return &MockInferenceController_IsModelReady_Call{Call: _e.mock.On("IsModelReady", c, entityID)}
}

func (_c *MockInferenceController_IsModelReady_Call) Run(run func(c *gin.Context, entityID string)) *MockInferenceController_IsModelReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInferenceController_IsModelReady_Call) Return(_a0 bool) *MockInferenceController_IsModelReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInferenceController_IsModelReady_Call) RunAndReturn(run func(*gin.Context, string) bool) *MockInferenceController_IsModelReady_Call {
	_c.Call.Return(run)
	return _c
}

// Predict provides a mock function with given fields: c, params, entityID
func (_m *MockInferenceController) Predict(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID) (int, []byte, *errors.HTTPError) {
	ret := _m.Called(c, params, entityID)

	if len(ret) == 0 {
		panic("no return value specified for Predict")
	}

	var r0 int
	var r1 []byte
	var r2 *errors.HTTPError
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (int, []byte, *errors.HTTPError)); ok {
		return rf(c, params, entityID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) int); ok {
		r0 = rf(c, params, entityID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) []byte); ok {
		r1 = rf(c, params, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) *errors.HTTPError); ok {
		r2 = rf(c, params, entityID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.HTTPError)
		}
	}

	return r0, r1, r2
}

// MockInferenceController_Predict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Predict'
type MockInferenceController_Predict_Call struct {
	*mock.Call
}

// Predict is a helper method to define mock.On call
//   - c *gin.Context
//   - params *entities.InferenceRequest
//   - entityID go_sdkentities.ID
func (_e *MockInferenceController_Expecter) Predict(c interface{}, params interface{}, entityID interface{}) *MockInferenceController_Predict_Call {
	return &MockInferenceController_Predict_Call{Call: _e.mock.On("Predict", c, params, entityID)}
}

func (_c *MockInferenceController_Predict_Call) Run(run func(c *gin.Context, params *entities.InferenceRequest, entityID go_sdkentities.ID)) *MockInferenceController_Predict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(*entities.InferenceRequest), args[2].(go_sdkentities.ID))
	})
	return _c
}

func (_c *MockInferenceController_Predict_Call) Return(_a0 int, _a1 []byte, _a2 *errors.HTTPError) *MockInferenceController_Predict_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInferenceController_Predict_Call) RunAndReturn(run func(*gin.Context, *entities.InferenceRequest, go_sdkentities.ID) (int, []byte, *errors.HTTPError)) *MockInferenceController_Predict_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInferenceController creates a new instance of MockInferenceController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInferenceController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInferenceController {
	mock := &MockInferenceController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
