// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"bytes"
	"context"
	"inference_gateway/app/entities"

	entities0 "geti.com/iai_core/entities"
	"geti.com/predict"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheService creates a new instance of MockCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheService {
	mock := &MockCacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheService is an autogenerated mock type for the CacheService type
type MockCacheService struct {
	mock.Mock
}

type MockCacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheService) EXPECT() *MockCacheService_Expecter {
	return &MockCacheService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockCacheService
func (_mock *MockCacheService) Get(ctx context.Context, request *entities.PredictionRequestData) (int, []byte, bool) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 []byte
	var r2 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) (int, []byte, bool)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData) int); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.PredictionRequestData) []byte); ok {
		r1 = returnFunc(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *entities.PredictionRequestData) bool); ok {
		r2 = returnFunc(ctx, request)
	} else {
		r2 = ret.Get(2).(bool)
	}
	return r0, r1, r2
}

// MockCacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockCacheService_Expecter) Get(ctx interface{}, request interface{}) *MockCacheService_Get_Call {
	return &MockCacheService_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCacheService_Get_Call) Run(run func(ctx context.Context, request *entities.PredictionRequestData)) *MockCacheService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.PredictionRequestData))
	})
	return _c
}

func (_c *MockCacheService_Get_Call) Return(n int, bytes []byte, b bool) *MockCacheService_Get_Call {
	_c.Call.Return(n, bytes, b)
	return _c
}

func (_c *MockCacheService_Get_Call) RunAndReturn(run func(ctx context.Context, request *entities.PredictionRequestData) (int, []byte, bool)) *MockCacheService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMediaService creates a new instance of MockMediaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaService {
	mock := &MockMediaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMediaService is an autogenerated mock type for the MediaService type
type MockMediaService struct {
	mock.Mock
}

type MockMediaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaService) EXPECT() *MockMediaService_Expecter {
	return &MockMediaService_Expecter{mock: &_m.Mock}
}

// GetFrame provides a mock function for the type MockMediaService
func (_mock *MockMediaService) GetFrame(ctx context.Context, fullVideoID *entities0.FullVideoID, frameIndex int) (*bytes.Buffer, error) {
	ret := _mock.Called(ctx, fullVideoID, frameIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetFrame")
	}

	var r0 *bytes.Buffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities0.FullVideoID, int) (*bytes.Buffer, error)); ok {
		return returnFunc(ctx, fullVideoID, frameIndex)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities0.FullVideoID, int) *bytes.Buffer); ok {
		r0 = returnFunc(ctx, fullVideoID, frameIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities0.FullVideoID, int) error); ok {
		r1 = returnFunc(ctx, fullVideoID, frameIndex)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaService_GetFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFrame'
type MockMediaService_GetFrame_Call struct {
	*mock.Call
}

// GetFrame is a helper method to define mock.On call
//   - ctx
//   - fullVideoID
//   - frameIndex
func (_e *MockMediaService_Expecter) GetFrame(ctx interface{}, fullVideoID interface{}, frameIndex interface{}) *MockMediaService_GetFrame_Call {
	return &MockMediaService_GetFrame_Call{Call: _e.mock.On("GetFrame", ctx, fullVideoID, frameIndex)}
}

func (_c *MockMediaService_GetFrame_Call) Run(run func(ctx context.Context, fullVideoID *entities0.FullVideoID, frameIndex int)) *MockMediaService_GetFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities0.FullVideoID), args[2].(int))
	})
	return _c
}

func (_c *MockMediaService_GetFrame_Call) Return(buffer *bytes.Buffer, err error) *MockMediaService_GetFrame_Call {
	_c.Call.Return(buffer, err)
	return _c
}

func (_c *MockMediaService_GetFrame_Call) RunAndReturn(run func(ctx context.Context, fullVideoID *entities0.FullVideoID, frameIndex int) (*bytes.Buffer, error)) *MockMediaService_GetFrame_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function for the type MockMediaService
func (_mock *MockMediaService) GetImage(ctx context.Context, fullImageID *entities0.FullImageID) (*bytes.Buffer, error) {
	ret := _mock.Called(ctx, fullImageID)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *bytes.Buffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities0.FullImageID) (*bytes.Buffer, error)); ok {
		return returnFunc(ctx, fullImageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities0.FullImageID) *bytes.Buffer); ok {
		r0 = returnFunc(ctx, fullImageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities0.FullImageID) error); ok {
		r1 = returnFunc(ctx, fullImageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaService_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockMediaService_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx
//   - fullImageID
func (_e *MockMediaService_Expecter) GetImage(ctx interface{}, fullImageID interface{}) *MockMediaService_GetImage_Call {
	return &MockMediaService_GetImage_Call{Call: _e.mock.On("GetImage", ctx, fullImageID)}
}

func (_c *MockMediaService_GetImage_Call) Run(run func(ctx context.Context, fullImageID *entities0.FullImageID)) *MockMediaService_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities0.FullImageID))
	})
	return _c
}

func (_c *MockMediaService_GetImage_Call) Return(buffer *bytes.Buffer, err error) *MockMediaService_GetImage_Call {
	_c.Call.Return(buffer, err)
	return _c
}

func (_c *MockMediaService_GetImage_Call) RunAndReturn(run func(ctx context.Context, fullImageID *entities0.FullImageID) (*bytes.Buffer, error)) *MockMediaService_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelAccessService creates a new instance of MockModelAccessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelAccessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelAccessService {
	mock := &MockModelAccessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockModelAccessService is an autogenerated mock type for the ModelAccessService type
type MockModelAccessService struct {
	mock.Mock
}

type MockModelAccessService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelAccessService) EXPECT() *MockModelAccessService_Expecter {
	return &MockModelAccessService_Expecter{mock: &_m.Mock}
}

// InferImageBytes provides a mock function for the type MockModelAccessService
func (_mock *MockModelAccessService) InferImageBytes(ctx context.Context, params InferParameters) (*predictv2.ModelInferResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InferImageBytes")
	}

	var r0 *predictv2.ModelInferResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, InferParameters) (*predictv2.ModelInferResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, InferParameters) *predictv2.ModelInferResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelInferResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, InferParameters) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModelAccessService_InferImageBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InferImageBytes'
type MockModelAccessService_InferImageBytes_Call struct {
	*mock.Call
}

// InferImageBytes is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockModelAccessService_Expecter) InferImageBytes(ctx interface{}, params interface{}) *MockModelAccessService_InferImageBytes_Call {
	return &MockModelAccessService_InferImageBytes_Call{Call: _e.mock.On("InferImageBytes", ctx, params)}
}

func (_c *MockModelAccessService_InferImageBytes_Call) Run(run func(ctx context.Context, params InferParameters)) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InferParameters))
	})
	return _c
}

func (_c *MockModelAccessService_InferImageBytes_Call) Return(modelInferResponse *predictv2.ModelInferResponse, err error) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Return(modelInferResponse, err)
	return _c
}

func (_c *MockModelAccessService_InferImageBytes_Call) RunAndReturn(run func(ctx context.Context, params InferParameters) (*predictv2.ModelInferResponse, error)) *MockModelAccessService_InferImageBytes_Call {
	_c.Call.Return(run)
	return _c
}

// IsModelReady provides a mock function for the type MockModelAccessService
func (_mock *MockModelAccessService) IsModelReady(ctx context.Context, modelID string) bool {
	ret := _mock.Called(ctx, modelID)

	if len(ret) == 0 {
		panic("no return value specified for IsModelReady")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, modelID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockModelAccessService_IsModelReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModelReady'
type MockModelAccessService_IsModelReady_Call struct {
	*mock.Call
}

// IsModelReady is a helper method to define mock.On call
//   - ctx
//   - modelID
func (_e *MockModelAccessService_Expecter) IsModelReady(ctx interface{}, modelID interface{}) *MockModelAccessService_IsModelReady_Call {
	return &MockModelAccessService_IsModelReady_Call{Call: _e.mock.On("IsModelReady", ctx, modelID)}
}

func (_c *MockModelAccessService_IsModelReady_Call) Run(run func(ctx context.Context, modelID string)) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelAccessService_IsModelReady_Call) Return(b bool) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockModelAccessService_IsModelReady_Call) RunAndReturn(run func(ctx context.Context, modelID string) bool) *MockModelAccessService_IsModelReady_Call {
	_c.Call.Return(run)
	return _c
}

// TryRecoverModel provides a mock function for the type MockModelAccessService
func (_mock *MockModelAccessService) TryRecoverModel(ctx context.Context, params InferParameters) (*predictv2.ModelInferResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for TryRecoverModel")
	}

	var r0 *predictv2.ModelInferResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, InferParameters) (*predictv2.ModelInferResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, InferParameters) *predictv2.ModelInferResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelInferResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, InferParameters) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModelAccessService_TryRecoverModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryRecoverModel'
type MockModelAccessService_TryRecoverModel_Call struct {
	*mock.Call
}

// TryRecoverModel is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockModelAccessService_Expecter) TryRecoverModel(ctx interface{}, params interface{}) *MockModelAccessService_TryRecoverModel_Call {
	return &MockModelAccessService_TryRecoverModel_Call{Call: _e.mock.On("TryRecoverModel", ctx, params)}
}

func (_c *MockModelAccessService_TryRecoverModel_Call) Run(run func(ctx context.Context, params InferParameters)) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InferParameters))
	})
	return _c
}

func (_c *MockModelAccessService_TryRecoverModel_Call) Return(modelInferResponse *predictv2.ModelInferResponse, err error) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Return(modelInferResponse, err)
	return _c
}

func (_c *MockModelAccessService_TryRecoverModel_Call) RunAndReturn(run func(ctx context.Context, params InferParameters) (*predictv2.ModelInferResponse, error)) *MockModelAccessService_TryRecoverModel_Call {
	_c.Call.Return(run)
	return _c
}
