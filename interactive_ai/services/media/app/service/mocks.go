// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"image"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCropper creates a new instance of MockCropper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCropper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCropper {
	mock := &MockCropper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCropper is an autogenerated mock type for the Cropper type
type MockCropper struct {
	mock.Mock
}

type MockCropper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCropper) EXPECT() *MockCropper_Expecter {
	return &MockCropper_Expecter{mock: &_m.Mock}
}

// CropImage provides a mock function for the type MockCropper
func (_mock *MockCropper) CropImage(reader io.Reader, tWidth int, tHeight int) (image.Image, error) {
	ret := _mock.Called(reader, tWidth, tHeight)

	if len(ret) == 0 {
		panic("no return value specified for CropImage")
	}

	var r0 image.Image
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader, int, int) (image.Image, error)); ok {
		return returnFunc(reader, tWidth, tHeight)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader, int, int) image.Image); ok {
		r0 = returnFunc(reader, tWidth, tHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader, int, int) error); ok {
		r1 = returnFunc(reader, tWidth, tHeight)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCropper_CropImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CropImage'
type MockCropper_CropImage_Call struct {
	*mock.Call
}

// CropImage is a helper method to define mock.On call
//   - reader
//   - tWidth
//   - tHeight
func (_e *MockCropper_Expecter) CropImage(reader interface{}, tWidth interface{}, tHeight interface{}) *MockCropper_CropImage_Call {
	return &MockCropper_CropImage_Call{Call: _e.mock.On("CropImage", reader, tWidth, tHeight)}
}

func (_c *MockCropper_CropImage_Call) Run(run func(reader io.Reader, tWidth int, tHeight int)) *MockCropper_CropImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockCropper_CropImage_Call) Return(image1 image.Image, err error) *MockCropper_CropImage_Call {
	_c.Call.Return(image1, err)
	return _c
}

func (_c *MockCropper_CropImage_Call) RunAndReturn(run func(reader io.Reader, tWidth int, tHeight int) (image.Image, error)) *MockCropper_CropImage_Call {
	_c.Call.Return(run)
	return _c
}
