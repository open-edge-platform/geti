#  INTEL CONFIDENTIAL
#
#  Copyright (C) 2023 Intel Corporation
#
#  This software and the related documents are Intel copyrighted materials, and your use of them is governed by
#  the express license under which they were provided to you ("License"). Unless the License provides otherwise,
#  you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents
#  without Intel's prior written permission.
#
#  This software and the related documents are provided as is, with no express or implied warranties,
#  other than those that are expressly stated in the License.

apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: set-authorization-from-cookie
  namespace: {{ include "gateway.namespace" . }}
spec:
  workloadSelector:
    labels:
      istio: gateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_FIRST
        value:
          name: my.filters.auth.authorization_header_setter
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              -- Adapted from https://github.com/BarDweller/istio-content-based-routing
              -- Base64 decoding based on wikipedia description of 8/6bit encoding.
              -- base64 char array.. note final 2 chars are for RFC4648-URL encoding
              -- as per JWT spec section 2 terminology 'Base64url Encoding'
              local alpha='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
              -- convert to 6 char long binary string. (max int 64!)
              function toBinaryString(int)
                  if int > 64 then
                      error("Bad number "..int.." to convert to binary")
                  end
                  local remaining = tonumber(int)
                  local bits = ''
                  for i = 5, 0, -1 do
                      local pow = 2 ^ i
                      if remaining >= pow then
                          bits = bits .. '1'
                          remaining = remaining - pow
                      else
                          bits = bits .. '0'
                      end
                  end
                  return bits
              end
              function fromBinaryString(bits)
                  return tonumber(bits, 2)
              end
              function decodeBase64(encoded)
                  local bitstr = ''
                  local decoded = ''
                  -- decode chars into bitstring
                  for i = 1, string.len(encoded) do
                      local offset, _ = string.find(alpha, string.sub(encoded, i, i))
                      if offset == nil then
                          error("Bad base64 character " .. string.sub(encoded, i, i))
                      end
                      bitstr = bitstr .. toBinaryString(offset-1)
                  end
                  -- decode bitstring back to chars
                  for i = 1, string.len(bitstr), 8 do
                      decoded = decoded .. string.char(fromBinaryString(string.sub(bitstr, i, i+7)))
                  end
                  return decoded
              end
              function decode_jwt(jwt)
                i=0
                result = {}
                for match in (jwt..'.'):gmatch("(.-)%.") do
                    result[i]=decodeBase64(match)
                    i=i+1
                end
                claims = result[1]
                return claims
              end
  
              function stringSplit(inputstr, sep)
                if sep == nil then
                  sep = "%s"
                end
                local t={}
                for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                  table.insert(t, str)
                end
                return t
              end
  
              function envoy_on_request(handle)
                handle:logDebug("Set Header from Cookie Lua Filter started")
  
                headers = handle:headers()
  
                -- Run the filter ONLY on /api/ paths
                path = headers:get(":path")
                if not string.find(path, "^/api/") then
                  handle:logDebug("Not an API path detected, exiting")
                  return
                end
  
                -- If Authorization header is present, don't change it
                authorizationString = headers:get("authorization")
                if authorizationString ~= nil then
                  handle:logDebug("Authorization header found, exiting")
                  return
                else
                  handle:logDebug("Authorization header not found, proceeding")
                end
  
                cookieString = headers:get("cookie")
                if cookieString == nil then
                  handle:logDebug("Cookie header not found")
                  return
                end
  
                handle:logDebug("Found cookie header: "..cookieString)
  
                splitCookieString = stringSplit(cookieString, ";")
  
                jwt = nil
                for i, cookieItem in ipairs(splitCookieString) do
                  handle:logDebug("Checking if this is geti-cookie cookie: "..cookieItem)
                  if string.find(cookieItem, "geti%-cookie=") ~= nil then
                    handle:logDebug("YES!")
                    jwt = string.gsub(cookieItem, "geti%-cookie=", "")
                  else
                    handle:logDebug("NO")
                  end
                end
  
                if jwt == nil then
                  return
                end
  
                access_token = string.gsub(jwt, "^ ", "")
                content = decode_jwt(access_token)
  
                exp_start, exp_stop = string.find(content, '"exp":%d+')
                if exp_start == nil then
                  handle:logDebug("EXP claim not found, ignoring token.")
                  return
                end
  
                exp_part = string.sub(content, exp_start, exp_stop)
                exp = tonumber(string.gsub(exp_part, '^"exp":', ''), 10)
  
                handle:logDebug("Extracted EXP claim: "..exp)
  
                now = os.time()
                handle:logDebug("Current time: "..now)

              if (exp < now) then
                handle:logDebug("Token already expired, ignoring token.")
                return
              end

              headers:replace("authorization", "Bearer "..access_token)
              handle:logDebug("Authorization header added from Cookie")
              end
