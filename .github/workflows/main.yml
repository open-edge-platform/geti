name: Detection workflow

on:
  merge_group:
    branches:
      - main
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch, tag or SHA to checkout'
        required: true
        default: ""

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions: {} # No permissions by default on workflow level

jobs:
  get-vars:
    name: Get variables
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 10
    outputs:

      build_all: ${{ steps.set-vars.outputs.build_all }}
      publish_binaries: ${{ steps.set-vars.outputs.publish_binaries }}
      checkout_ref: ${{ steps.set-vars.outputs.checkout_ref }}

      image-tag: "${{ steps.prepare-build-version.outputs.version }}"
      components-list: ${{ steps.components-list.outputs.paths_list }}
      filtered-components-list: ${{ steps.filtered-components-list.outputs.filtered-list }}
      libs-list: ${{ steps.libs-list.outputs.paths_list }}

    steps:
      - name: Prepare environment variables
        id: set-vars
        env:
          EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          DISPATCH_PUB: ${{ github.event.inputs.publish_binaries }}
          DISPATCH_REF: ${{ github.event.inputs.ref }}
        run: |
          # BUILD_ALL: true on manual dispatch or any tag
          if [[ "$EVENT_NAME" == "workflow_dispatch" || "$GITHUB_REF" == refs/tags/* ]]; then
            build_all=true
          else
            build_all=false
          fi
          
          # PUBLISH_BINARIES: only if manual & publish=true, or on any tag
          if [[ ( "$EVENT_NAME" == "workflow_dispatch" && "$DISPATCH_PUB" == "true" ) || "$GITHUB_REF" == refs/tags/* ]]; then
            publish_binaries=true
          else
            publish_binaries=false
          fi
          
          # CHECKOUT_REF: use manual input if provided, else real ref
          if [[ "$EVENT_NAME" == "workflow_dispatch" && -n "$DISPATCH_REF" ]]; then
            checkout_ref="$DISPATCH_REF"
          else
            checkout_ref="$GITHUB_REF"
          fi
          
          echo "build_all=$build_all"               >> $GITHUB_OUTPUT
          echo "publish_binaries=$publish_binaries" >> $GITHUB_OUTPUT
          echo "checkout_ref=$checkout_ref"         >> $GITHUB_OUTPUT
          
          echo "build_all=$build_all"
          echo "publish_binaries=$publish_binaries"
          echo "checkout_ref=$checkout_ref"

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Prepare build version
        id: prepare-build-version
        uses: ./.github/actions/build-version
        with:
          ref: ${{ steps.set-vars.outputs.checkout_ref }}

      - name: Get changed components dirs
        id: components-list
        uses: ./.github/actions/change-detection
        with:
          path_filter: "./.github/components-path-filters.yml"
          get_all: ${{ steps.set-vars.outputs.build_all }}

      - name: Get changed libs dirs
        id: libs-list
        uses: ./.github/actions/change-detection
        with:
          path_filter: "./.github/libs-path-filters.yml"
          get_all: ${{ steps.set-vars.outputs.build_all }}

      - name: Filter components (exclude 'web_ui')
        id: filtered-components-list
        run: |
          components=$(echo ${CHANGES} | sed "s/'/\"/g")
          filtered=$(echo $components | jq -c '[.[] | select(. != "web_ui")]')
          echo "::group::Components to run"
          echo $filtered
          echo "::endgroup::"
          echo "filtered-list=$filtered" >> $GITHUB_OUTPUT
        env:
          CHANGES: ${{ steps.components-list.outputs.paths_list }}

  lib_test_workflow:
    name: Lib test workflow
    needs: get-vars
    permissions:
      contents: read
    uses: ./.github/workflows/libs_test.yml
    if: ${{ !contains(needs.get-vars.outputs.libs-list, '[]') }}
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJSON(needs.get-vars.outputs.libs-list) }}
    with:
      component-dir: ${{ matrix.component }}
      ref: ${{ inputs.ref || '' }}

  component-workflow:
    name: Component workflow
    needs: get-vars
    permissions:
      contents: read
      id-token: write # is required by nested component-check
    secrets:
      AWS_ROLE: ${{ secrets.AWS_ROLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      REGISTRY: ${{ secrets.REGISTRY }}
    uses: ./.github/workflows/component.yml
    if: ${{ !contains(needs.get-vars.outputs.filtered-components-list, '[]') }}
    strategy:
      fail-fast: false
      matrix:
        # The web-ui-workflow will call component-workflow after it succeeds,
        # therefore we filter out the web_ui component here
        component: ${{ fromJSON(needs.get-vars.outputs.filtered-components-list) }}
    with:
      image-tag: ${{ needs.get-vars.outputs.image-tag }}
      component-dir: ${{ matrix.component }}
      push: ${{ inputs.push || false }}
      ref: ${{ inputs.ref || '' }}

  web-ui-workflow:
    name: Web UI workflow
    needs: get-vars
    permissions:
      contents: read
      id-token: write # is required by nested component-check
    secrets:
      AWS_ROLE: ${{ secrets.AWS_ROLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      REGISTRY: ${{ secrets.REGISTRY }}
    uses: ./.github/workflows/web-ui.yml
    if: ${{ contains(needs.get-vars.outputs.components-list, 'web_ui') }}
    with:
      image-tag: ${{ needs.get-vars.outputs.image-tag }}
      push: ${{ needs.get-vars.outputs.publish_binaries }}
      ref: ${{ needs.get-vars.outputs.checkout_ref }}

  success:
    name: Required status checks
    needs:
      - component-workflow
      - web-ui-workflow
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    env:
      CHECKS: ${{ join(needs.*.result, ' ') }}
    steps:
      - name: Check
        run: |
          for check in ${CHECKS}; do
            echo "::notice::check=${check}"
            if [[ "$check" != "success" && "$check" != "skipped" ]]; then
              echo "::error ::Required status checks failed. They must succeed before this pull request can be merged."
              exit 1
            fi
          done
