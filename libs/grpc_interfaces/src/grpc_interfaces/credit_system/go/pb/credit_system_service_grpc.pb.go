// Copyright (C) 2022-2025 Intel Corporation
// LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: credit_system_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_GetAllProducts_FullMethodName = "/credit_system.ProductService/get_all_products"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////// PRODUCT SERVICE ////////////////
type ProductServiceClient interface {
	GetAllProducts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetAllProducts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
//
// ////////////// PRODUCT SERVICE ////////////////
type ProductServiceServer interface {
	GetAllProducts(context.Context, *EmptyRequest) (*ProductResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) GetAllProducts(context.Context, *EmptyRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllProducts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_system.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_all_products",
			Handler:    _ProductService_GetAllProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_system_service.proto",
}

const (
	SubscriptionService_Activate_FullMethodName               = "/credit_system.SubscriptionService/activate"
	SubscriptionService_FindActiveSubscription_FullMethodName = "/credit_system.SubscriptionService/find_active_subscription"
	SubscriptionService_FailSubscription_FullMethodName       = "/credit_system.SubscriptionService/fail_subscription"
	SubscriptionService_CancelSubscription_FullMethodName     = "/credit_system.SubscriptionService/cancel_subscription"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////// SUBSCRIPTION SERVICE ////////////////
type SubscriptionServiceClient interface {
	Activate(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error)
	FindActiveSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error)
	FailSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error)
	CancelSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Activate(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionIdResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) FindActiveSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionIdResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_FindActiveSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) FailSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionIdResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_FailSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CancelSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionIdResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility.
//
// ////////////// SUBSCRIPTION SERVICE ////////////////
type SubscriptionServiceServer interface {
	Activate(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error)
	FindActiveSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error)
	FailSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error)
	CancelSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServiceServer struct{}

func (UnimplementedSubscriptionServiceServer) Activate(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedSubscriptionServiceServer) FindActiveSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindActiveSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) FailSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) CancelSubscription(context.Context, *SubscriptionRequest) (*SubscriptionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}
func (UnimplementedSubscriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Activate(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_FindActiveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).FindActiveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_FindActiveSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).FindActiveSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_FailSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).FailSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_FailSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).FailSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CancelSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_system.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "activate",
			Handler:    _SubscriptionService_Activate_Handler,
		},
		{
			MethodName: "find_active_subscription",
			Handler:    _SubscriptionService_FindActiveSubscription_Handler,
		},
		{
			MethodName: "fail_subscription",
			Handler:    _SubscriptionService_FailSubscription_Handler,
		},
		{
			MethodName: "cancel_subscription",
			Handler:    _SubscriptionService_CancelSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_system_service.proto",
}

const (
	QuotaService_Get_FullMethodName = "/credit_system.QuotaService/get"
)

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////// QUOTA SERVICE ////////////////
type QuotaServiceClient interface {
	Get(ctx context.Context, in *QuotaGetRequest, opts ...grpc.CallOption) (*QuotaGetResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) Get(ctx context.Context, in *QuotaGetRequest, opts ...grpc.CallOption) (*QuotaGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaGetResponse)
	err := c.cc.Invoke(ctx, QuotaService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations must embed UnimplementedQuotaServiceServer
// for forward compatibility.
//
// ////////////// QUOTA SERVICE ////////////////
type QuotaServiceServer interface {
	Get(context.Context, *QuotaGetRequest) (*QuotaGetResponse, error)
	mustEmbedUnimplementedQuotaServiceServer()
}

// UnimplementedQuotaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuotaServiceServer struct{}

func (UnimplementedQuotaServiceServer) Get(context.Context, *QuotaGetRequest) (*QuotaGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuotaServiceServer) mustEmbedUnimplementedQuotaServiceServer() {}
func (UnimplementedQuotaServiceServer) testEmbeddedByValue()                      {}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuotaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).Get(ctx, req.(*QuotaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_system.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _QuotaService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_system_service.proto",
}

const (
	LeaseService_Acquire_FullMethodName = "/credit_system.LeaseService/acquire"
	LeaseService_Cancel_FullMethodName  = "/credit_system.LeaseService/cancel"
)

// LeaseServiceClient is the client API for LeaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////// LEASE SERVICE ////////////////
type LeaseServiceClient interface {
	Acquire(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseIdResponse, error)
	Cancel(ctx context.Context, in *CancelLeaseRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type leaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseServiceClient(cc grpc.ClientConnInterface) LeaseServiceClient {
	return &leaseServiceClient{cc}
}

func (c *leaseServiceClient) Acquire(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaseIdResponse)
	err := c.cc.Invoke(ctx, LeaseService_Acquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) Cancel(ctx context.Context, in *CancelLeaseRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, LeaseService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseServiceServer is the server API for LeaseService service.
// All implementations must embed UnimplementedLeaseServiceServer
// for forward compatibility.
//
// ////////////// LEASE SERVICE ////////////////
type LeaseServiceServer interface {
	Acquire(context.Context, *LeaseRequest) (*LeaseIdResponse, error)
	Cancel(context.Context, *CancelLeaseRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedLeaseServiceServer()
}

// UnimplementedLeaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaseServiceServer struct{}

func (UnimplementedLeaseServiceServer) Acquire(context.Context, *LeaseRequest) (*LeaseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acquire not implemented")
}
func (UnimplementedLeaseServiceServer) Cancel(context.Context, *CancelLeaseRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedLeaseServiceServer) mustEmbedUnimplementedLeaseServiceServer() {}
func (UnimplementedLeaseServiceServer) testEmbeddedByValue()                      {}

// UnsafeLeaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseServiceServer will
// result in compilation errors.
type UnsafeLeaseServiceServer interface {
	mustEmbedUnimplementedLeaseServiceServer()
}

func RegisterLeaseServiceServer(s grpc.ServiceRegistrar, srv LeaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaseService_ServiceDesc, srv)
}

func _LeaseService_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseService_Acquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).Acquire(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).Cancel(ctx, req.(*CancelLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseService_ServiceDesc is the grpc.ServiceDesc for LeaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_system.LeaseService",
	HandlerType: (*LeaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "acquire",
			Handler:    _LeaseService_Acquire_Handler,
		},
		{
			MethodName: "cancel",
			Handler:    _LeaseService_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_system_service.proto",
}
