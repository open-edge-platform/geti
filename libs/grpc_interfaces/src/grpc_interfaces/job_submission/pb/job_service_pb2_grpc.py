# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import job_service_pb2 as job__service__pb2


class JobServiceStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.submit = channel.unary_unary(
                "/JobService/submit",
                request_serializer=job__service__pb2.SubmitJobRequest.SerializeToString,
                response_deserializer=job__service__pb2.JobIdResponse.FromString,
                )
        self.get_by_id = channel.unary_unary(
                "/JobService/get_by_id",
                request_serializer=job__service__pb2.GetJobByIdRequest.SerializeToString,
                response_deserializer=job__service__pb2.JobResponse.FromString,
                )
        self.cancel = channel.unary_unary(
                "/JobService/cancel",
                request_serializer=job__service__pb2.CancelJobRequest.SerializeToString,
                response_deserializer=job__service__pb2.EmptyResponse.FromString,
                )
        self.get_count = channel.unary_unary(
                "/JobService/get_count",
                request_serializer=job__service__pb2.GetJobsCountRequest.SerializeToString,
                response_deserializer=job__service__pb2.GetJobsCountResponse.FromString,
                )
        self.find = channel.unary_unary(
                "/JobService/find",
                request_serializer=job__service__pb2.FindJobsRequest.SerializeToString,
                response_deserializer=job__service__pb2.ListJobsResponse.FromString,
                )


class JobServiceServicer:
    """Missing associated documentation comment in .proto file."""

    def submit(self, request, context):
        """Submit a new job to the job service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_by_id(self, request, context):
        """Returns the job given its id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def cancel(self, request, context):
        """Cancel a job by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_count(self, request, context):
        """Retrieves the number of jobs that match the filter criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def find(self, request, context):
        """Find jobs based on the filters and return a stream of JobResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_JobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            "submit": grpc.unary_unary_rpc_method_handler(
                    servicer.submit,
                    request_deserializer=job__service__pb2.SubmitJobRequest.FromString,
                    response_serializer=job__service__pb2.JobIdResponse.SerializeToString,
            ),
            "get_by_id": grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=job__service__pb2.GetJobByIdRequest.FromString,
                    response_serializer=job__service__pb2.JobResponse.SerializeToString,
            ),
            "cancel": grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=job__service__pb2.CancelJobRequest.FromString,
                    response_serializer=job__service__pb2.EmptyResponse.SerializeToString,
            ),
            "get_count": grpc.unary_unary_rpc_method_handler(
                    servicer.get_count,
                    request_deserializer=job__service__pb2.GetJobsCountRequest.FromString,
                    response_serializer=job__service__pb2.GetJobsCountResponse.SerializeToString,
            ),
            "find": grpc.unary_unary_rpc_method_handler(
                    servicer.find,
                    request_deserializer=job__service__pb2.FindJobsRequest.FromString,
                    response_serializer=job__service__pb2.ListJobsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            "JobService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobService:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def submit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, "/JobService/submit",
            job__service__pb2.SubmitJobRequest.SerializeToString,
            job__service__pb2.JobIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, "/JobService/get_by_id",
            job__service__pb2.GetJobByIdRequest.SerializeToString,
            job__service__pb2.JobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, "/JobService/cancel",
            job__service__pb2.CancelJobRequest.SerializeToString,
            job__service__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, "/JobService/get_count",
            job__service__pb2.GetJobsCountRequest.SerializeToString,
            job__service__pb2.GetJobsCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, "/JobService/find",
            job__service__pb2.FindJobsRequest.SerializeToString,
            job__service__pb2.ListJobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
