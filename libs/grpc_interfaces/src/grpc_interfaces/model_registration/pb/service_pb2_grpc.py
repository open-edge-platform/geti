# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import service_pb2 as service__pb2


class ModelRegistrationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register_new_pipelines = channel.unary_unary(
                '/service.ModelRegistration/register_new_pipelines',
                request_serializer=service__pb2.RegisterRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                )
        self.register_active_pipeline = channel.unary_unary(
                '/service.ModelRegistration/register_active_pipeline',
                request_serializer=service__pb2.ActiveRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                )
        self.deregister_pipeline = channel.unary_unary(
                '/service.ModelRegistration/deregister_pipeline',
                request_serializer=service__pb2.DeregisterRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                )
        self.list_pipelines = channel.unary_unary(
                '/service.ModelRegistration/list_pipelines',
                request_serializer=service__pb2.ListRequest.SerializeToString,
                response_deserializer=service__pb2.ListResponse.FromString,
                )
        self.recover_pipeline = channel.unary_unary(
                '/service.ModelRegistration/recover_pipeline',
                request_serializer=service__pb2.RecoverRequest.SerializeToString,
                response_deserializer=service__pb2.RecoverResponse.FromString,
                )
        self.delete_project_pipelines = channel.unary_unary(
                '/service.ModelRegistration/delete_project_pipelines',
                request_serializer=service__pb2.PurgeProjectRequest.SerializeToString,
                response_deserializer=service__pb2.PurgeProjectResponse.FromString,
                )
        self.download_graph = channel.unary_stream(
                '/service.ModelRegistration/download_graph',
                request_serializer=service__pb2.DownloadGraphRequest.SerializeToString,
                response_deserializer=service__pb2.Chunk.FromString,
                )


class ModelRegistrationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register_new_pipelines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_active_pipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deregister_pipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_pipelines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recover_pipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_project_pipelines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download_graph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelRegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register_new_pipelines': grpc.unary_unary_rpc_method_handler(
                    servicer.register_new_pipelines,
                    request_deserializer=service__pb2.RegisterRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'register_active_pipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.register_active_pipeline,
                    request_deserializer=service__pb2.ActiveRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'deregister_pipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.deregister_pipeline,
                    request_deserializer=service__pb2.DeregisterRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'list_pipelines': grpc.unary_unary_rpc_method_handler(
                    servicer.list_pipelines,
                    request_deserializer=service__pb2.ListRequest.FromString,
                    response_serializer=service__pb2.ListResponse.SerializeToString,
            ),
            'recover_pipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.recover_pipeline,
                    request_deserializer=service__pb2.RecoverRequest.FromString,
                    response_serializer=service__pb2.RecoverResponse.SerializeToString,
            ),
            'delete_project_pipelines': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_project_pipelines,
                    request_deserializer=service__pb2.PurgeProjectRequest.FromString,
                    response_serializer=service__pb2.PurgeProjectResponse.SerializeToString,
            ),
            'download_graph': grpc.unary_stream_rpc_method_handler(
                    servicer.download_graph,
                    request_deserializer=service__pb2.DownloadGraphRequest.FromString,
                    response_serializer=service__pb2.Chunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.ModelRegistration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelRegistration(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register_new_pipelines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/register_new_pipelines',
            service__pb2.RegisterRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register_active_pipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/register_active_pipeline',
            service__pb2.ActiveRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deregister_pipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/deregister_pipeline',
            service__pb2.DeregisterRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_pipelines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/list_pipelines',
            service__pb2.ListRequest.SerializeToString,
            service__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recover_pipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/recover_pipeline',
            service__pb2.RecoverRequest.SerializeToString,
            service__pb2.RecoverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_project_pipelines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.ModelRegistration/delete_project_pipelines',
            service__pb2.PurgeProjectRequest.SerializeToString,
            service__pb2.PurgeProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def download_graph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/service.ModelRegistration/download_graph',
            service__pb2.DownloadGraphRequest.SerializeToString,
            service__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
