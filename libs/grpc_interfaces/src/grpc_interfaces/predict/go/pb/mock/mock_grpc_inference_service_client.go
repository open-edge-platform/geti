// Code generated by mockery. DO NOT EDIT.

package predictv2

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	predictv2 "geti.com/predict"
)

// MockGRPCInferenceServiceClient is an autogenerated mock type for the GRPCInferenceServiceClient type
type MockGRPCInferenceServiceClient struct {
	mock.Mock
}

type MockGRPCInferenceServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGRPCInferenceServiceClient) EXPECT() *MockGRPCInferenceServiceClient_Expecter {
	return &MockGRPCInferenceServiceClient_Expecter{mock: &_m.Mock}
}

// ModelInfer provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ModelInfer(ctx context.Context, in *predictv2.ModelInferRequest, opts ...grpc.CallOption) (*predictv2.ModelInferResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModelInfer")
	}

	var r0 *predictv2.ModelInferResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelInferRequest, ...grpc.CallOption) (*predictv2.ModelInferResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelInferRequest, ...grpc.CallOption) *predictv2.ModelInferResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelInferResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ModelInferRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ModelInfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModelInfer'
type MockGRPCInferenceServiceClient_ModelInfer_Call struct {
	*mock.Call
}

// ModelInfer is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ModelInferRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ModelInfer(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ModelInfer_Call {
	return &MockGRPCInferenceServiceClient_ModelInfer_Call{Call: _e.mock.On("ModelInfer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ModelInfer_Call) Run(run func(ctx context.Context, in *predictv2.ModelInferRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ModelInfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ModelInferRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelInfer_Call) Return(_a0 *predictv2.ModelInferResponse, _a1 error) *MockGRPCInferenceServiceClient_ModelInfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelInfer_Call) RunAndReturn(run func(context.Context, *predictv2.ModelInferRequest, ...grpc.CallOption) (*predictv2.ModelInferResponse, error)) *MockGRPCInferenceServiceClient_ModelInfer_Call {
	_c.Call.Return(run)
	return _c
}

// ModelMetadata provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ModelMetadata(ctx context.Context, in *predictv2.ModelMetadataRequest, opts ...grpc.CallOption) (*predictv2.ModelMetadataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModelMetadata")
	}

	var r0 *predictv2.ModelMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelMetadataRequest, ...grpc.CallOption) (*predictv2.ModelMetadataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelMetadataRequest, ...grpc.CallOption) *predictv2.ModelMetadataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ModelMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ModelMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModelMetadata'
type MockGRPCInferenceServiceClient_ModelMetadata_Call struct {
	*mock.Call
}

// ModelMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ModelMetadataRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ModelMetadata(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ModelMetadata_Call {
	return &MockGRPCInferenceServiceClient_ModelMetadata_Call{Call: _e.mock.On("ModelMetadata",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ModelMetadata_Call) Run(run func(ctx context.Context, in *predictv2.ModelMetadataRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ModelMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ModelMetadataRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelMetadata_Call) Return(_a0 *predictv2.ModelMetadataResponse, _a1 error) *MockGRPCInferenceServiceClient_ModelMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelMetadata_Call) RunAndReturn(run func(context.Context, *predictv2.ModelMetadataRequest, ...grpc.CallOption) (*predictv2.ModelMetadataResponse, error)) *MockGRPCInferenceServiceClient_ModelMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ModelReady provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ModelReady(ctx context.Context, in *predictv2.ModelReadyRequest, opts ...grpc.CallOption) (*predictv2.ModelReadyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModelReady")
	}

	var r0 *predictv2.ModelReadyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelReadyRequest, ...grpc.CallOption) (*predictv2.ModelReadyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ModelReadyRequest, ...grpc.CallOption) *predictv2.ModelReadyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ModelReadyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ModelReadyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ModelReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModelReady'
type MockGRPCInferenceServiceClient_ModelReady_Call struct {
	*mock.Call
}

// ModelReady is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ModelReadyRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ModelReady(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ModelReady_Call {
	return &MockGRPCInferenceServiceClient_ModelReady_Call{Call: _e.mock.On("ModelReady",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ModelReady_Call) Run(run func(ctx context.Context, in *predictv2.ModelReadyRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ModelReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ModelReadyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelReady_Call) Return(_a0 *predictv2.ModelReadyResponse, _a1 error) *MockGRPCInferenceServiceClient_ModelReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ModelReady_Call) RunAndReturn(run func(context.Context, *predictv2.ModelReadyRequest, ...grpc.CallOption) (*predictv2.ModelReadyResponse, error)) *MockGRPCInferenceServiceClient_ModelReady_Call {
	_c.Call.Return(run)
	return _c
}

// ServerLive provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ServerLive(ctx context.Context, in *predictv2.ServerLiveRequest, opts ...grpc.CallOption) (*predictv2.ServerLiveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ServerLive")
	}

	var r0 *predictv2.ServerLiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerLiveRequest, ...grpc.CallOption) (*predictv2.ServerLiveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerLiveRequest, ...grpc.CallOption) *predictv2.ServerLiveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ServerLiveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ServerLiveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ServerLive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerLive'
type MockGRPCInferenceServiceClient_ServerLive_Call struct {
	*mock.Call
}

// ServerLive is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ServerLiveRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ServerLive(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ServerLive_Call {
	return &MockGRPCInferenceServiceClient_ServerLive_Call{Call: _e.mock.On("ServerLive",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ServerLive_Call) Run(run func(ctx context.Context, in *predictv2.ServerLiveRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ServerLive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ServerLiveRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerLive_Call) Return(_a0 *predictv2.ServerLiveResponse, _a1 error) *MockGRPCInferenceServiceClient_ServerLive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerLive_Call) RunAndReturn(run func(context.Context, *predictv2.ServerLiveRequest, ...grpc.CallOption) (*predictv2.ServerLiveResponse, error)) *MockGRPCInferenceServiceClient_ServerLive_Call {
	_c.Call.Return(run)
	return _c
}

// ServerMetadata provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ServerMetadata(ctx context.Context, in *predictv2.ServerMetadataRequest, opts ...grpc.CallOption) (*predictv2.ServerMetadataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ServerMetadata")
	}

	var r0 *predictv2.ServerMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerMetadataRequest, ...grpc.CallOption) (*predictv2.ServerMetadataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerMetadataRequest, ...grpc.CallOption) *predictv2.ServerMetadataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ServerMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ServerMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ServerMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerMetadata'
type MockGRPCInferenceServiceClient_ServerMetadata_Call struct {
	*mock.Call
}

// ServerMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ServerMetadataRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ServerMetadata(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ServerMetadata_Call {
	return &MockGRPCInferenceServiceClient_ServerMetadata_Call{Call: _e.mock.On("ServerMetadata",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ServerMetadata_Call) Run(run func(ctx context.Context, in *predictv2.ServerMetadataRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ServerMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ServerMetadataRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerMetadata_Call) Return(_a0 *predictv2.ServerMetadataResponse, _a1 error) *MockGRPCInferenceServiceClient_ServerMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerMetadata_Call) RunAndReturn(run func(context.Context, *predictv2.ServerMetadataRequest, ...grpc.CallOption) (*predictv2.ServerMetadataResponse, error)) *MockGRPCInferenceServiceClient_ServerMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ServerReady provides a mock function with given fields: ctx, in, opts
func (_m *MockGRPCInferenceServiceClient) ServerReady(ctx context.Context, in *predictv2.ServerReadyRequest, opts ...grpc.CallOption) (*predictv2.ServerReadyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ServerReady")
	}

	var r0 *predictv2.ServerReadyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerReadyRequest, ...grpc.CallOption) (*predictv2.ServerReadyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *predictv2.ServerReadyRequest, ...grpc.CallOption) *predictv2.ServerReadyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictv2.ServerReadyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *predictv2.ServerReadyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCInferenceServiceClient_ServerReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerReady'
type MockGRPCInferenceServiceClient_ServerReady_Call struct {
	*mock.Call
}

// ServerReady is a helper method to define mock.On call
//   - ctx context.Context
//   - in *predictv2.ServerReadyRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCInferenceServiceClient_Expecter) ServerReady(ctx interface{}, in interface{}, opts ...interface{}) *MockGRPCInferenceServiceClient_ServerReady_Call {
	return &MockGRPCInferenceServiceClient_ServerReady_Call{Call: _e.mock.On("ServerReady",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGRPCInferenceServiceClient_ServerReady_Call) Run(run func(ctx context.Context, in *predictv2.ServerReadyRequest, opts ...grpc.CallOption)) *MockGRPCInferenceServiceClient_ServerReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*predictv2.ServerReadyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerReady_Call) Return(_a0 *predictv2.ServerReadyResponse, _a1 error) *MockGRPCInferenceServiceClient_ServerReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCInferenceServiceClient_ServerReady_Call) RunAndReturn(run func(context.Context, *predictv2.ServerReadyRequest, ...grpc.CallOption) (*predictv2.ServerReadyResponse, error)) *MockGRPCInferenceServiceClient_ServerReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGRPCInferenceServiceClient creates a new instance of MockGRPCInferenceServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGRPCInferenceServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGRPCInferenceServiceClient {
	mock := &MockGRPCInferenceServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
