// Copyright (C) 2022-2025 Intel Corporation
// LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: personal_access_token.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonalAccessToken_Create_FullMethodName          = "/personal_access_token.PersonalAccessToken/create"
	PersonalAccessToken_GetByHash_FullMethodName       = "/personal_access_token.PersonalAccessToken/get_by_hash"
	PersonalAccessToken_GetOrgFromToken_FullMethodName = "/personal_access_token.PersonalAccessToken/get_org_from_token"
	PersonalAccessToken_Extend_FullMethodName          = "/personal_access_token.PersonalAccessToken/extend"
	PersonalAccessToken_Revoke_FullMethodName          = "/personal_access_token.PersonalAccessToken/revoke"
	PersonalAccessToken_Find_FullMethodName            = "/personal_access_token.PersonalAccessToken/find"
)

// PersonalAccessTokenClient is the client API for PersonalAccessToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalAccessTokenClient interface {
	// POST /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens
	Create(ctx context.Context, in *PersonalAccessTokenCreateRequest, opts ...grpc.CallOption) (*PersonalAccessTokenCreateResponse, error)
	// GET /api/v1/personal_access_tokens/{hash}
	GetByHash(ctx context.Context, in *GetByHashRequest, opts ...grpc.CallOption) (*PersonalAccessTokenResponse, error)
	// GET /api/v1/personal_access_tokens/organization
	GetOrgFromToken(ctx context.Context, in *GetOrgFromTokenRequest, opts ...grpc.CallOption) (*GetOrganizationByTokenResponse, error)
	// PATCH /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens/{id}
	Extend(ctx context.Context, in *PersonalAccessTokenExtendRequest, opts ...grpc.CallOption) (*PersonalAccessTokenResponse, error)
	// DELETE /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens/{id}
	Revoke(ctx context.Context, in *PersonalAccessTokenRevokeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens
	Find(ctx context.Context, in *PersonalAccessTokenFindRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error)
}

type personalAccessTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalAccessTokenClient(cc grpc.ClientConnInterface) PersonalAccessTokenClient {
	return &personalAccessTokenClient{cc}
}

func (c *personalAccessTokenClient) Create(ctx context.Context, in *PersonalAccessTokenCreateRequest, opts ...grpc.CallOption) (*PersonalAccessTokenCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAccessTokenCreateResponse)
	err := c.cc.Invoke(ctx, PersonalAccessToken_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenClient) GetByHash(ctx context.Context, in *GetByHashRequest, opts ...grpc.CallOption) (*PersonalAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, PersonalAccessToken_GetByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenClient) GetOrgFromToken(ctx context.Context, in *GetOrgFromTokenRequest, opts ...grpc.CallOption) (*GetOrganizationByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationByTokenResponse)
	err := c.cc.Invoke(ctx, PersonalAccessToken_GetOrgFromToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenClient) Extend(ctx context.Context, in *PersonalAccessTokenExtendRequest, opts ...grpc.CallOption) (*PersonalAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, PersonalAccessToken_Extend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenClient) Revoke(ctx context.Context, in *PersonalAccessTokenRevokeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PersonalAccessToken_Revoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenClient) Find(ctx context.Context, in *PersonalAccessTokenFindRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonalAccessTokensResponse)
	err := c.cc.Invoke(ctx, PersonalAccessToken_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalAccessTokenServer is the server API for PersonalAccessToken service.
// All implementations must embed UnimplementedPersonalAccessTokenServer
// for forward compatibility.
type PersonalAccessTokenServer interface {
	// POST /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens
	Create(context.Context, *PersonalAccessTokenCreateRequest) (*PersonalAccessTokenCreateResponse, error)
	// GET /api/v1/personal_access_tokens/{hash}
	GetByHash(context.Context, *GetByHashRequest) (*PersonalAccessTokenResponse, error)
	// GET /api/v1/personal_access_tokens/organization
	GetOrgFromToken(context.Context, *GetOrgFromTokenRequest) (*GetOrganizationByTokenResponse, error)
	// PATCH /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens/{id}
	Extend(context.Context, *PersonalAccessTokenExtendRequest) (*PersonalAccessTokenResponse, error)
	// DELETE /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens/{id}
	Revoke(context.Context, *PersonalAccessTokenRevokeRequest) (*empty.Empty, error)
	// GET /api/v1/organizations/{organization_id}/users/{user_id}/personal_access_tokens
	Find(context.Context, *PersonalAccessTokenFindRequest) (*ListPersonalAccessTokensResponse, error)
	mustEmbedUnimplementedPersonalAccessTokenServer()
}

// UnimplementedPersonalAccessTokenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonalAccessTokenServer struct{}

func (UnimplementedPersonalAccessTokenServer) Create(context.Context, *PersonalAccessTokenCreateRequest) (*PersonalAccessTokenCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonalAccessTokenServer) GetByHash(context.Context, *GetByHashRequest) (*PersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByHash not implemented")
}
func (UnimplementedPersonalAccessTokenServer) GetOrgFromToken(context.Context, *GetOrgFromTokenRequest) (*GetOrganizationByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgFromToken not implemented")
}
func (UnimplementedPersonalAccessTokenServer) Extend(context.Context, *PersonalAccessTokenExtendRequest) (*PersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extend not implemented")
}
func (UnimplementedPersonalAccessTokenServer) Revoke(context.Context, *PersonalAccessTokenRevokeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedPersonalAccessTokenServer) Find(context.Context, *PersonalAccessTokenFindRequest) (*ListPersonalAccessTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPersonalAccessTokenServer) mustEmbedUnimplementedPersonalAccessTokenServer() {}
func (UnimplementedPersonalAccessTokenServer) testEmbeddedByValue()                             {}

// UnsafePersonalAccessTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalAccessTokenServer will
// result in compilation errors.
type UnsafePersonalAccessTokenServer interface {
	mustEmbedUnimplementedPersonalAccessTokenServer()
}

func RegisterPersonalAccessTokenServer(s grpc.ServiceRegistrar, srv PersonalAccessTokenServer) {
	// If the following call pancis, it indicates UnimplementedPersonalAccessTokenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonalAccessToken_ServiceDesc, srv)
}

func _PersonalAccessToken_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalAccessTokenCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).Create(ctx, req.(*PersonalAccessTokenCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessToken_GetByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).GetByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_GetByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).GetByHash(ctx, req.(*GetByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessToken_GetOrgFromToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgFromTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).GetOrgFromToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_GetOrgFromToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).GetOrgFromToken(ctx, req.(*GetOrgFromTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessToken_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalAccessTokenExtendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_Extend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).Extend(ctx, req.(*PersonalAccessTokenExtendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessToken_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalAccessTokenRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_Revoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).Revoke(ctx, req.(*PersonalAccessTokenRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessToken_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalAccessTokenFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalAccessToken_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServer).Find(ctx, req.(*PersonalAccessTokenFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalAccessToken_ServiceDesc is the grpc.ServiceDesc for PersonalAccessToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalAccessToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personal_access_token.PersonalAccessToken",
	HandlerType: (*PersonalAccessTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PersonalAccessToken_Create_Handler,
		},
		{
			MethodName: "get_by_hash",
			Handler:    _PersonalAccessToken_GetByHash_Handler,
		},
		{
			MethodName: "get_org_from_token",
			Handler:    _PersonalAccessToken_GetOrgFromToken_Handler,
		},
		{
			MethodName: "extend",
			Handler:    _PersonalAccessToken_Extend_Handler,
		},
		{
			MethodName: "revoke",
			Handler:    _PersonalAccessToken_Revoke_Handler,
		},
		{
			MethodName: "find",
			Handler:    _PersonalAccessToken_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personal_access_token.proto",
}
