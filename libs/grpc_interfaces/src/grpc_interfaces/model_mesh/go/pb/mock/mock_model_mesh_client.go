// Code generated by mockery. DO NOT EDIT.

package modelmesh

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	modelmesh "geti.com/modelmesh"
)

// MockModelMeshClient is an autogenerated mock type for the ModelMeshClient type
type MockModelMeshClient struct {
	mock.Mock
}

type MockModelMeshClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelMeshClient) EXPECT() *MockModelMeshClient_Expecter {
	return &MockModelMeshClient_Expecter{mock: &_m.Mock}
}

// DeleteVModel provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) DeleteVModel(ctx context.Context, in *modelmesh.DeleteVModelRequest, opts ...grpc.CallOption) (*modelmesh.DeleteVModelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVModel")
	}

	var r0 *modelmesh.DeleteVModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.DeleteVModelRequest, ...grpc.CallOption) (*modelmesh.DeleteVModelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.DeleteVModelRequest, ...grpc.CallOption) *modelmesh.DeleteVModelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.DeleteVModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.DeleteVModelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_DeleteVModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVModel'
type MockModelMeshClient_DeleteVModel_Call struct {
	*mock.Call
}

// DeleteVModel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.DeleteVModelRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) DeleteVModel(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_DeleteVModel_Call {
	return &MockModelMeshClient_DeleteVModel_Call{Call: _e.mock.On("DeleteVModel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_DeleteVModel_Call) Run(run func(ctx context.Context, in *modelmesh.DeleteVModelRequest, opts ...grpc.CallOption)) *MockModelMeshClient_DeleteVModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.DeleteVModelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_DeleteVModel_Call) Return(_a0 *modelmesh.DeleteVModelResponse, _a1 error) *MockModelMeshClient_DeleteVModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_DeleteVModel_Call) RunAndReturn(run func(context.Context, *modelmesh.DeleteVModelRequest, ...grpc.CallOption) (*modelmesh.DeleteVModelResponse, error)) *MockModelMeshClient_DeleteVModel_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureLoaded provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) EnsureLoaded(ctx context.Context, in *modelmesh.EnsureLoadedRequest, opts ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnsureLoaded")
	}

	var r0 *modelmesh.ModelStatusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.EnsureLoadedRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.EnsureLoadedRequest, ...grpc.CallOption) *modelmesh.ModelStatusInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.ModelStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.EnsureLoadedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_EnsureLoaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureLoaded'
type MockModelMeshClient_EnsureLoaded_Call struct {
	*mock.Call
}

// EnsureLoaded is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.EnsureLoadedRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) EnsureLoaded(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_EnsureLoaded_Call {
	return &MockModelMeshClient_EnsureLoaded_Call{Call: _e.mock.On("EnsureLoaded",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_EnsureLoaded_Call) Run(run func(ctx context.Context, in *modelmesh.EnsureLoadedRequest, opts ...grpc.CallOption)) *MockModelMeshClient_EnsureLoaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.EnsureLoadedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_EnsureLoaded_Call) Return(_a0 *modelmesh.ModelStatusInfo, _a1 error) *MockModelMeshClient_EnsureLoaded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_EnsureLoaded_Call) RunAndReturn(run func(context.Context, *modelmesh.EnsureLoadedRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)) *MockModelMeshClient_EnsureLoaded_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelStatus provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) GetModelStatus(ctx context.Context, in *modelmesh.GetStatusRequest, opts ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModelStatus")
	}

	var r0 *modelmesh.ModelStatusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.GetStatusRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.GetStatusRequest, ...grpc.CallOption) *modelmesh.ModelStatusInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.ModelStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.GetStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_GetModelStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelStatus'
type MockModelMeshClient_GetModelStatus_Call struct {
	*mock.Call
}

// GetModelStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.GetStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) GetModelStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_GetModelStatus_Call {
	return &MockModelMeshClient_GetModelStatus_Call{Call: _e.mock.On("GetModelStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_GetModelStatus_Call) Run(run func(ctx context.Context, in *modelmesh.GetStatusRequest, opts ...grpc.CallOption)) *MockModelMeshClient_GetModelStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.GetStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_GetModelStatus_Call) Return(_a0 *modelmesh.ModelStatusInfo, _a1 error) *MockModelMeshClient_GetModelStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_GetModelStatus_Call) RunAndReturn(run func(context.Context, *modelmesh.GetStatusRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)) *MockModelMeshClient_GetModelStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetVModelStatus provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) GetVModelStatus(ctx context.Context, in *modelmesh.GetVModelStatusRequest, opts ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVModelStatus")
	}

	var r0 *modelmesh.VModelStatusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.GetVModelStatusRequest, ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.GetVModelStatusRequest, ...grpc.CallOption) *modelmesh.VModelStatusInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.VModelStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.GetVModelStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_GetVModelStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVModelStatus'
type MockModelMeshClient_GetVModelStatus_Call struct {
	*mock.Call
}

// GetVModelStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.GetVModelStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) GetVModelStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_GetVModelStatus_Call {
	return &MockModelMeshClient_GetVModelStatus_Call{Call: _e.mock.On("GetVModelStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_GetVModelStatus_Call) Run(run func(ctx context.Context, in *modelmesh.GetVModelStatusRequest, opts ...grpc.CallOption)) *MockModelMeshClient_GetVModelStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.GetVModelStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_GetVModelStatus_Call) Return(_a0 *modelmesh.VModelStatusInfo, _a1 error) *MockModelMeshClient_GetVModelStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_GetVModelStatus_Call) RunAndReturn(run func(context.Context, *modelmesh.GetVModelStatusRequest, ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error)) *MockModelMeshClient_GetVModelStatus_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterModel provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) RegisterModel(ctx context.Context, in *modelmesh.RegisterModelRequest, opts ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterModel")
	}

	var r0 *modelmesh.ModelStatusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.RegisterModelRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.RegisterModelRequest, ...grpc.CallOption) *modelmesh.ModelStatusInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.ModelStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.RegisterModelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_RegisterModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterModel'
type MockModelMeshClient_RegisterModel_Call struct {
	*mock.Call
}

// RegisterModel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.RegisterModelRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) RegisterModel(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_RegisterModel_Call {
	return &MockModelMeshClient_RegisterModel_Call{Call: _e.mock.On("RegisterModel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_RegisterModel_Call) Run(run func(ctx context.Context, in *modelmesh.RegisterModelRequest, opts ...grpc.CallOption)) *MockModelMeshClient_RegisterModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.RegisterModelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_RegisterModel_Call) Return(_a0 *modelmesh.ModelStatusInfo, _a1 error) *MockModelMeshClient_RegisterModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_RegisterModel_Call) RunAndReturn(run func(context.Context, *modelmesh.RegisterModelRequest, ...grpc.CallOption) (*modelmesh.ModelStatusInfo, error)) *MockModelMeshClient_RegisterModel_Call {
	_c.Call.Return(run)
	return _c
}

// SetVModel provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) SetVModel(ctx context.Context, in *modelmesh.SetVModelRequest, opts ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetVModel")
	}

	var r0 *modelmesh.VModelStatusInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.SetVModelRequest, ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.SetVModelRequest, ...grpc.CallOption) *modelmesh.VModelStatusInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.VModelStatusInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.SetVModelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_SetVModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVModel'
type MockModelMeshClient_SetVModel_Call struct {
	*mock.Call
}

// SetVModel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.SetVModelRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) SetVModel(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_SetVModel_Call {
	return &MockModelMeshClient_SetVModel_Call{Call: _e.mock.On("SetVModel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_SetVModel_Call) Run(run func(ctx context.Context, in *modelmesh.SetVModelRequest, opts ...grpc.CallOption)) *MockModelMeshClient_SetVModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.SetVModelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_SetVModel_Call) Return(_a0 *modelmesh.VModelStatusInfo, _a1 error) *MockModelMeshClient_SetVModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_SetVModel_Call) RunAndReturn(run func(context.Context, *modelmesh.SetVModelRequest, ...grpc.CallOption) (*modelmesh.VModelStatusInfo, error)) *MockModelMeshClient_SetVModel_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterModel provides a mock function with given fields: ctx, in, opts
func (_m *MockModelMeshClient) UnregisterModel(ctx context.Context, in *modelmesh.UnregisterModelRequest, opts ...grpc.CallOption) (*modelmesh.UnregisterModelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterModel")
	}

	var r0 *modelmesh.UnregisterModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.UnregisterModelRequest, ...grpc.CallOption) (*modelmesh.UnregisterModelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modelmesh.UnregisterModelRequest, ...grpc.CallOption) *modelmesh.UnregisterModelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelmesh.UnregisterModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modelmesh.UnregisterModelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelMeshClient_UnregisterModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterModel'
type MockModelMeshClient_UnregisterModel_Call struct {
	*mock.Call
}

// UnregisterModel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *modelmesh.UnregisterModelRequest
//   - opts ...grpc.CallOption
func (_e *MockModelMeshClient_Expecter) UnregisterModel(ctx interface{}, in interface{}, opts ...interface{}) *MockModelMeshClient_UnregisterModel_Call {
	return &MockModelMeshClient_UnregisterModel_Call{Call: _e.mock.On("UnregisterModel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockModelMeshClient_UnregisterModel_Call) Run(run func(ctx context.Context, in *modelmesh.UnregisterModelRequest, opts ...grpc.CallOption)) *MockModelMeshClient_UnregisterModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*modelmesh.UnregisterModelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockModelMeshClient_UnregisterModel_Call) Return(_a0 *modelmesh.UnregisterModelResponse, _a1 error) *MockModelMeshClient_UnregisterModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelMeshClient_UnregisterModel_Call) RunAndReturn(run func(context.Context, *modelmesh.UnregisterModelRequest, ...grpc.CallOption) (*modelmesh.UnregisterModelResponse, error)) *MockModelMeshClient_UnregisterModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelMeshClient creates a new instance of MockModelMeshClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelMeshClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelMeshClient {
	mock := &MockModelMeshClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
