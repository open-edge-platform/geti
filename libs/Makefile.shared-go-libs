.PHONY: clean tests test-unit test-integration coverage static-code-analysis lint

GOPATH ?= $(HOME)/go
GOBIN ?= $(GOPATH)/bin
GOLANGCI_LINT_VERSION = v1.64.2
TIMEOUT = 15m

# Go commands
GOCMD   := go
GOTEST  := $(GOCMD) test
GOINSTALL := $(GOCMD) install

clean: ## Remove coverage artifacts
	rm -f coverage.out

tests: test-unit test-integration

test-unit: ## Run unit tests
	$(GOTEST) -v -race -short ./...

test-integration: ## Run integration tests (requires -tags=integration in code)
	$(GOTEST) -v -race -tags=integration ./...

coverage: ## Run tests and generate a coverage profile
	$(GOTEST) -coverprofile=coverage.out ./...
	@echo "Coverage report generated at coverage.out"

## Run static analysis/linters in read-only mode (e.g., for CI checks).
## This will fail on lint errors but won't modify any files.
static-code-analysis: lint-install
	$(GOBIN)/golangci-lint run --timeout $(TIMEOUT)

## Run linter in "fix" mode to automatically correct code where possible.
## Generally used locally to clean up code before committing.
lint: lint-install
	$(GOBIN)/golangci-lint run --fix --timeout $(TIMEOUT)

lint-install:
	@echo "Installing golangci-lint $(GOLANGCI_LINT_VERSION)..."
	@if ! command -v $(GOBIN)/golangci-lint >/dev/null 2>&1 || [ "$$($(GOBIN)/golangci-lint --version | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')" != "$(GOLANGCI_LINT_VERSION)" ]; then \
		GOBIN=$(GOBIN) go install github.com/golangci/golangci-lint/cmd/golangci-lint@$(GOLANGCI_LINT_VERSION); \
		echo "golangci-lint $(GOLANGCI_LINT_VERSION) installed at $(GOBIN)/golangci-lint"; \
	else \
		echo "golangci-lint $(GOLANGCI_LINT_VERSION) already installed"; \
	fi
