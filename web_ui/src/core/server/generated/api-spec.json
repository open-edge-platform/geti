{
  "openapi": "3.1.0",
  "info": {
    "title": "Intel® Geti™ REST API",
    "version": "2.9.0",
    "description": "REST API documentation for Intel® Geti™."
  },
  "servers": [
    {
      "url": "{Server address}/api/{API version}",
      "description": "The base URL of the Intel® Geti™ API",
      "variables": {
        "Server address": {
          "default": "https://server.ip"
        },
        "API version": {
          "default": "v1",
          "enum": [
            "v1"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Organizations"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Workspaces"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Datasets"
    },
    {
      "name": "Media"
    },
    {
      "name": "Annotations"
    },
    {
      "name": "Models"
    },
    {
      "name": "Training dataset versions"
    },
    {
      "name": "Predictions"
    },
    {
      "name": "Active Learning"
    },
    {
      "name": "Tests"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Configuration"
    },
    {
      "name": "Product Info"
    },
    {
      "name": "Dataset Import/Export"
    },
    {
      "name": "Project Import/Export"
    },
    {
      "name": "Code Deployment"
    },
    {
      "name": "Balance"
    },
    {
      "name": "Credit Accounts"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "System"
    }
  ],
  "paths": {
    "/organizations/users/external": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/users/{external_id}",
        "operationId": "User_get_by_external_id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_commonUserData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/activeUser": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/{organization_id}/users/active",
        "operationId": "User_get_active_user",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_commonUserData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/{organization_id}/users  - conditions passed in the query string",
        "operationId": "User_find",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secondName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSuccessfulLoginFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastSuccessfulLoginTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modifiedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "attribute name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "asc/desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "user to search for first name OR second name OR email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userListUsersResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "POST /organizations/{organization_id}/users",
        "operationId": "User_create",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "secondName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "organizationStatus": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/user_commonUserRole"
                    }
                  },
                  "lastSuccessfulLogin": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "modifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "modifiedBy": {
                    "type": "string"
                  },
                  "telemetryConsent": {
                    "type": "string"
                  },
                  "telemetryConsentAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "userConsent": {
                    "type": "string"
                  },
                  "userConsentAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "presignedUrl": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_commonUserData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organizationId}/users/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "PUT /organizations/{organization_id}/users/{id}",
        "operationId": "User_modify",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "secondName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "organizationStatus": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/user_commonUserRole"
                    }
                  },
                  "lastSuccessfulLogin": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "modifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "modifiedBy": {
                    "type": "string"
                  },
                  "telemetryConsent": {
                    "type": "string"
                  },
                  "telemetryConsentAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "userConsent": {
                    "type": "string"
                  },
                  "userConsentAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "presignedUrl": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_commonUserData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organizationId}/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/{organization_id}/users/{id}",
        "operationId": "User_get_by_id",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_commonUserData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "DELETE /organizations/{organization_id}/users/{id}",
        "operationId": "User_delete",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/users/{userId}/photos": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/{organization_id}/users/{id}/photos",
        "operationId": "User_get_photo",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commonPreUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "DELETE /organization/{organization_id}/users/{id}/photos",
        "operationId": "User_delete_photo",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/users/{userId}/roles": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "PUT /organizations/{organization_id}/users/{id}/roles",
        "operationId": "User_set_roles",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/user_commonUserRoleOperation"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organizationId}/users/{userId}/roles/{resourceType}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /organizations/{organization_id}/users/{id}/roles/{resource_type}",
        "operationId": "User_get_roles",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userUserRolesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{user.organizationId}/users/invitations": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "POST /organizations/{organization_id}/users/invitations",
        "operationId": "User_send_invitation",
        "parameters": [
          {
            "name": "user.organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "secondName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "externalId": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "organizationStatus": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/user_commonUserRole"
                        }
                      },
                      "lastSuccessfulLogin": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "createdBy": {
                        "type": "string"
                      },
                      "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "modifiedBy": {
                        "type": "string"
                      },
                      "telemetryConsent": {
                        "type": "string"
                      },
                      "telemetryConsentAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "userConsent": {
                        "type": "string"
                      },
                      "userConsentAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "presignedUrl": {
                        "type": "string"
                      }
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/user_commonUserRoleOperation"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userUserInvitationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "GET /api/v1/profile",
        "operationId": "User_get_user_profile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userUserProfileData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "GET /organizations  - conditions passed in the query string",
        "operationId": "Organization_find",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cellId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modifiedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "attribute name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "asc/desc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organizationListOrganizationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "POST /organizations",
        "operationId": "Organization_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organizationOrganizationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organizationOrganizationData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/invitations": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "POST /organizations/invitations",
        "operationId": "Organization_send_invitation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organizationOrganizationInvitiationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "GET /organizations/{id}",
        "operationId": "Organization_get_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organizationOrganizationData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "PUT /organizations/{id}",
        "operationId": "Organization_modify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "cellId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "modifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "modifiedBy": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organizationOrganizationData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "DELETE /organizations/{id}",
        "operationId": "Organization_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/photos": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "GET /organizations/{organization_id}/photos",
        "operationId": "Organization_get_photo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commonPreUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "DELETE /organizations/{organization_id}/photos",
        "operationId": "Organization_delete_photo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/workspaces": {
      "get": {
        "tags": [
          "Workspace"
        ],
        "summary": "GET /organizations/{organization_id}/workspaces  - conditions passed in the query string",
        "operationId": "Workspace_find",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "billingChildAccountId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modifiedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedAtTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "attribute name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "asc/desc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspaceListWorkspacesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workspace"
        ],
        "summary": "POST /organizations/{organization_id}/workspaces",
        "operationId": "Workspace_create",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "modifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "modifiedBy": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspaceWorkspaceData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organizationId}/workspaces/{id}": {
      "get": {
        "tags": [
          "Workspace"
        ],
        "summary": "GET /organizations/{organization_id}/workspaces/{id}",
        "operationId": "Workspace_get_by_id",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspaceWorkspaceData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workspace"
        ],
        "summary": "PUT /organizations/{organization_id}/workspaces",
        "operationId": "Workspace_modify",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "modifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "modifiedBy": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspaceWorkspaceData"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Workspace"
        ],
        "summary": "DELETE /organizations/{organization_id}/workspaces/{id}",
        "operationId": "Workspace_delete",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/users/{userId}/statuses": {
      "put": {
        "tags": [
          "UserStatus"
        ],
        "summary": "PUT /organizations/{organization_id}/users/{user_id}/statuses",
        "operationId": "UserStatus_change",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "createdBy": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_statusUserStatusResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/active": {
      "get": {
        "tags": [
          "users",
          "users"
        ],
        "summary": "Active User",
        "operationId": "active_user_users_active_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Auth-Request-User",
              "type": "string"
            },
            "name": "x-auth-request-user",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List Users",
        "description": "Get the list of users\n\n:param access_resource_type: Access resource type to filter the users by.\n:param access_resource_id: Access resource id to filter the users by.",
        "operationId": "list_users_users__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccessResourceType"
            },
            "name": "access_resource_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Resource Id",
              "type": "string"
            },
            "name": "access_resource_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Users Users  Get",
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserModel"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "operationId": "create_user_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "409": {
            "description": "This email address is already being used."
          },
          "422": {
            "description": "Invalid email."
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User By Id",
        "description": "Endpoint for getting user's data.",
        "operationId": "get_user_by_id_users__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Edit User",
        "description": "Endpoint for updating user's data.",
        "operationId": "edit_user_users__user_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "409": {
            "description": "Request conflict"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "/delete/{user_id} handler",
        "operationId": "delete_user_users__user_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "User was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Server got itself in trouble"
          },
          "HTTPSTATUS.UNPROCESSABLE_ENTITY": {
            "description": "User is the last global admin so they cant be deleted"
          }
        }
      }
    },
    "/users/{user_id}/photo": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Photo",
        "operationId": "get_user_photo_users__user_id__photo_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Photo of requested user.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "User not found or no photo uploaded."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Upload User Photo",
        "operationId": "upload_user_photo_users__user_id__photo_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_user_photo_users__user_id__photo_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "413": {
            "description": "Entity is too large"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User Photo",
        "description": "DELETE /users/{user_id}/photo handler",
        "operationId": "delete_user_photo_users__user_id__photo_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "User photo was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Server got itself in trouble"
          }
        }
      }
    },
    "/users/{user_id}/sessions": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User Sessions",
        "description": "DELETE /{user_id}/sessions handler",
        "operationId": "delete_user_sessions_users__user_id__sessions_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "User sessions were successfully deleted.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invite",
        "operationId": "invite_users_invite_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User has been successfully invited.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Login User",
        "description": "/users/login handler",
        "operationId": "login_user_users_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct username and password provided, auth cookies set",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Password not base64 encoded"
          },
          "401": {
            "description": "Invalid username or password provided"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal call to login service has missing required data"
          }
        }
      }
    },
    "/users/request_password_reset": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Request Password Reset",
        "description": "Request password endpoint on /users/request_password_reset\"\n:param user_data: data payload containing user's email address.\n:param background_tasks: background tasks to be run after returning a response.",
        "operationId": "request_password_reset_users_request_password_reset_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRequestResetData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Password reset request sent.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "SMTP Server not configured."
          },
          "404": {
            "description": "User does not exist."
          },
          "422": {
            "description": "Invalid email."
          }
        }
      }
    },
    "/users/reset_password": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Reset Password",
        "description": "/users/reset_password handler",
        "operationId": "reset_password_users_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "401": {
            "description": "No permission -- see authorization schemes"
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/confirm_registration": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Confirm Registration",
        "description": "/users/confirm_registration handler",
        "operationId": "confirm_registration_users_confirm_registration_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmRegistrationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "401": {
            "description": "No permission -- see authorization schemes"
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/registration/reset-password": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Check Token Validity For Registration",
        "operationId": "check_token_validity_for_registration_users_registration_reset_password_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string"
            },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "410": {
            "description": "URI no longer exists and has been permanently removed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/registration/sign-up": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Check Token Validity For Registration",
        "operationId": "check_token_validity_for_registration_users_registration_sign_up_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string"
            },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "410": {
            "description": "URI no longer exists and has been permanently removed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Roles By Id",
        "description": "Returns user's roles for given specific resource, or all resources of given type.\nIf both resource_type and resource_id parameters are passed, roles for that specific resource will be returned.\nIf only resource_type is passed, roles for all resources of given type will be returned.",
        "operationId": "get_user_roles_by_id_users__user_id__roles_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccessResourceType"
            },
            "name": "resource_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Id",
              "type": "string"
            },
            "name": "resource_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesOutputModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "404": {
            "description": "Nothing matches the given URI"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "HTTPSTATUS.OK": {
            "description": "Roles of requested User."
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patch User Roles By Id",
        "description": "Endpoint for getting user's data.",
        "operationId": "patch_user_roles_by_id_users__user_id__roles_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "maxLength": 200,
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Auth-Request-User",
              "type": "string"
            },
            "name": "x-auth-request-user",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesPatchModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "User roles were updated"
          },
          "400": {
            "description": "Invalid resource id"
          },
          "401": {
            "description": "Invalid authentication header"
          },
          "403": {
            "description": "Lack of permissions for resources present in the request"
          },
          "404": {
            "description": "Requested user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "HTTPSTATUS.UNPROCESSABLE_ENTITY": {
            "description": "User is the last global admin so he cant be deleted"
          }
        }
      }
    },
    "/users/{user_id}/update_password": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update User Password",
        "description": "/users/[user_id]/update_password handler",
        "operationId": "update_user_password_users__user_id__update_password_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "401": {
            "description": "No permission -- see authorization schemes"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/get_user_id": {
      "get": {
        "tags": [
          "users",
          "users"
        ],
        "summary": "Get User Id From Protobuf",
        "description": "Returns user id calculated based on the protobuf content from the HTTP request.",
        "operationId": "get_user_id_from_protobuf_users_get_user_id_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Calculated user id.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get User Id From Protobuf Users Get User Id Get",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request syntax or unsupported method"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/service_accounts/access_token": {
      "post": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Get Access Token",
        "operationId": "get_access_token_service_accounts_access_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIdData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct service id provided, access_token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenOutputModel"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired service id."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/service_accounts": {
      "get": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Get Service Account",
        "operationId": "get_service_account_service_accounts__get",
        "responses": {
          "200": {
            "description": "Returns Service Account connected to the current user with expiration date.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountOutputModel"
                }
              }
            }
          },
          "204": {
            "description": "Service account doesn't exist."
          },
          "401": {
            "description": "No permission -- see authorization schemes"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Refresh Service Account",
        "operationId": "refresh_service_account_service_accounts__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshServiceUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service account was refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountWithPasswordOutputModel"
                }
              }
            }
          },
          "400": {
            "description": "Expiration date is invalid."
          },
          "401": {
            "description": "User doesn't exist."
          },
          "404": {
            "description": "Service account doesn't exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Create Service Account",
        "operationId": "create_service_account_service_accounts__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service account was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountWithPasswordOutputModel"
                }
              }
            }
          },
          "400": {
            "description": "Expiration date is invalid."
          },
          "401": {
            "description": "User doesn't exist."
          },
          "409": {
            "description": "Service account already exists."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Delete Service Account",
        "operationId": "delete_service_account_service_accounts__delete",
        "responses": {
          "200": {
            "description": "Service account removed.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "No permission -- see authorization schemes"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/feature_flags": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List Feature Flags",
        "description": "Get map of feature flags to their corresponding enablement status.",
        "operationId": "list_feature_flags_feature_flags__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "HTTPSTATUS.OK": {
            "description": "Returns feature flags list"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "summary": "Logs Endpoint",
        "description": "Request logs endpoint on /logs\"",
        "operationId": "logs_endpoint_logs__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Type",
              "maxLength": 7,
              "type": "string",
              "default": "logs"
            },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operation-Id",
              "type": "string"
            },
            "name": "operation-id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Start-Date",
              "type": "string"
            },
            "name": "start-date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End-Date",
              "type": "string"
            },
            "name": "end-date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Log-Level",
              "type": "string"
            },
            "name": "log-level",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the tar.gz file with logs",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Unknown log type. Please make sure specified value parameter is either \"cluster\" or \"logs\".",
            "content": {
              "text/plain": {}
            }
          },
          "403": {
            "description": "Access denied - user is not an administrator.",
            "content": {
              "text/plain": {}
            }
          },
          "404": {
            "description": "Error when preparing a zipped folder with logs",
            "content": {
              "text/plain": {}
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products",
          "Products"
        ],
        "summary": "Get All Products",
        "description": "Returns all available Geti SaaS subscription products",
        "operationId": "get_all_products_api_v1_products_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": [
          "Products",
          "Products"
        ],
        "summary": "Get Product By Id",
        "description": "Returns Geti SaaS subscription product with the specified id",
        "operationId": "get_product_by_id_api_v1_products__product_id__get",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Product Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/balance": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "Get Balance",
        "description": "The running credit balance of an organization is calculated during the current subscription cycle",
        "operationId": "get_balance_api_v1_organizations__org_id__balance_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/credit_accounts/{account_id}/balance": {
      "put": {
        "tags": [
          "Balance"
        ],
        "summary": "Edit Account Balance",
        "description": "Edits balance of a certain credit account by comparing current available balance\nwith a balance in the provided payload, and creating a credits transaction covering the difference.",
        "operationId": "edit_account_balance_api_v1_organizations__org_id__credit_accounts__account_id__balance_put",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalancePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/credit_accounts": {
      "get": {
        "tags": [
          "Credit accounts"
        ],
        "summary": "Get Credit Accounts",
        "description": "Returns billable credit accounts of the organization ('asset' account type, not expired).\nLease and SaaS provider accounts not included.",
        "operationId": "get_credit_accounts_api_v1_organizations__org_id__credit_accounts_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAccountsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Credit accounts"
        ],
        "summary": "Create Credit Account",
        "description": "Creates a new asset account for the organization.",
        "operationId": "create_credit_account_api_v1_organizations__org_id__credit_accounts_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditAccountPostPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/credit_accounts/{acc_id}": {
      "put": {
        "tags": [
          "Credit accounts"
        ],
        "summary": "Update Credit Account",
        "description": "Updates the credit account of the organization.",
        "operationId": "update_credit_account_api_v1_organizations__org_id__credit_accounts__acc_id__put",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          },
          {
            "name": "acc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Acc Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditAccountPutPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAccount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create Subscription",
        "description": "Creates new subscription within organization for specified product",
        "operationId": "create_subscription_api_v1_organizations__organization_id__subscriptions_post",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[SaaS] Get all organization's subscriptions",
        "description": "<i>Not available on on-premises environments.</i><br><br> Returns all organization's subscriptions.",
        "operationId": "get_organization_subscriptions_api_v1_organizations__organization_id__subscriptions_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 0,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_matched": {
                      "type": "integer",
                      "title": "Total Matched"
                    },
                    "next_page": {
                      "anyOf": [
                        {
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "title": "Limit"
                            },
                            "skip": {
                              "type": "integer",
                              "title": "Skip"
                            }
                          },
                          "type": "object",
                          "required": [
                            "limit",
                            "skip"
                          ],
                          "title": "NextPage"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "subscriptions": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                          },
                          "organization_id": {
                            "type": "string",
                            "title": "Organization Id"
                          },
                          "workspace_id": {
                            "type": "string",
                            "title": "Workspace Id"
                          },
                          "product_id": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Product Id"
                          },
                          "status": {
                            "type": "string",
                            "title": "Status"
                          },
                          "created": {
                            "type": "integer",
                            "title": "Created"
                          },
                          "updated": {
                            "type": "integer",
                            "title": "Updated"
                          },
                          "next_renewal_date": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Next Renewal Date"
                          },
                          "previous_renewal_date": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Previous Renewal Date"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "organization_id",
                          "workspace_id",
                          "product_id",
                          "status",
                          "created",
                          "updated"
                        ],
                        "title": "SubscriptionResponse"
                      },
                      "type": "array",
                      "title": "Subscriptions"
                    }
                  },
                  "type": "object",
                  "required": [
                    "total_matched",
                    "subscriptions"
                  ],
                  "title": "OrgSubscriptionsResponse"
                },
                "example": {
                  "total_matched": 1,
                  "next_page": null,
                  "subscriptions": [
                    {
                      "id": "e4187c27-2c1a-4265-9233-04950fd93471",
                      "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                      "workspace_id": "23f347e1-cefc-4d98-9001-c551b6edb269",
                      "product_id": "fafa904e-4ae9-4a5c-a4a7-ea22eee73c03",
                      "status": "ACTIVE",
                      "created": 1722439231555,
                      "updated": 1722439231555,
                      "next_renewal_date": 1725062400000,
                      "previous_renewal_date": null
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get Subscription By Id",
        "description": "Returns organization's subscription with the requested id",
        "operationId": "get_subscription_by_id_api_v1_organizations__organization_id__subscriptions__subscription_id__get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Subscription Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/transactions/aggregates": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Credit Consumption Aggregates",
        "description": "The Aggregating endpoint allows to retrieve credit consumption grouped by various\ndimensions such as project and workspace, date, etc.",
        "operationId": "get_credit_consumption_aggregates_api_v1_organizations__org_id__transactions_aggregates_get",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AggregatesKey"
              },
              "title": "Key"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From Date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "To Date"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Transactions",
        "description": "The Aggregating endpoint allows to retrieve credit consumption grouped by various\ndimensions such as project and workspace, date, etc.",
        "operationId": "get_transactions_api_v1_organizations__org_id__transactions_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/tasks/credit_accounts/rollover": {
      "post": {
        "tags": [
          "Credit accounts",
          "Internal"
        ],
        "summary": "Rollover Credit Accounts",
        "description": "Performs credit accounts renewal.",
        "operationId": "rollover_credit_accounts_api_v1_internal_tasks_credit_accounts_rollover_post",
        "parameters": [
          {
            "name": "renewal_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Renewal Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/tasks/credit_accounts/snapshot": {
      "post": {
        "tags": [
          "Internal"
        ],
        "summary": "Calculate Snapshot",
        "description": "Get all non-renewable, active (not expired) asset credit accounts,\nand for each of them calculate and write to the database a balance snapshot, with available and incoming balances.\n\nCalculation takes the latest account's snapshot value (if available) and incorporates\ntransactions created thereafter until the present moment",
        "operationId": "calculate_snapshot_api_v1_internal_tasks_credit_accounts_snapshot_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/personal_access_tokens/organization": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization ID for Personal Access Token.",
        "description": "Return ID for Organization that Personal Account Token is created for. Use returned value in all subsequent calls as `organization_id` parameter.",
        "operationId": "PersonalAccessTokenOrganization",
        "responses": {
          "200": {
            "description": "Organization data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "organizationId"
                  ]
                },
                "example": {
                  "organizationId": "2503c663-b4e1-4162-ba32-11ba5b50722d"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get information about all workspaces",
        "description": "List all workspaces in an organization.",
        "operationId": "GetAllWorkspaces",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested workspaces info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workspaces": {
                      "type": "array",
                      "description": "Array of workspaces",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 36,
                            "maxLength": 36,
                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                            "description": "UUID of the object"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Name of the workspace"
                          },
                          "description": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Description of the workspace"
                          },
                          "creator_name": {
                            "type": "string",
                            "description": "Name of the creator of the workspace"
                          },
                          "creation_date": {
                            "type": "string",
                            "description": "Creation date of the workspace"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      }
                    }
                  },
                  "required": [
                    "workspaces"
                  ]
                },
                "example": {
                  "workspaces": [
                    {
                      "creation_date": "2021-07-28T09:07:13.999000+00:00",
                      "creator_name": "dummy",
                      "description": "This is the first workspace.",
                      "id": "97041954-7589-448a-808f-a32d607852cb",
                      "name": "Workspace 1"
                    },
                    {
                      "creation_date": "2021-07-28T09:07:15.985000+00:00",
                      "creator_name": "dummy",
                      "description": "This is another workspace.",
                      "id": "7a3cb253-4532-44b8-a490-6b0ca023b9b2",
                      "name": "Workspace 2"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a project",
        "description": "Create a project in a workspace. Please refer to the schema to see all the supported tasks and please refer to the examples to see how\nthe project is constructed. At the moment, Geti supports projects with a single deep learning task, or with two in a \nchain (Detection -> Classification and Detection -> Segmentation).\nA few label constraints:  \n- Detection projects must have at least 1 label provided.\n- A default 'No object' label is automatically created for detection and segmentation tasks. \n- Classification projects require at least two labels (top-level, if hierarchical). For binary classification, please declare the negative label explicitly.\n- A default 'No class' label is automatically created for classification tasks if there are no exclusive groups with 2+ labels. In practice, multilabel classification has the empty label, multiclass classification does not.\n- Anomaly project must either have 2 labels provided (one being is_anomalous), or no labels provided.",
        "operationId": "CreateProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "pipeline"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Project name",
                    "minLength": 1
                  },
                  "pipeline": {
                    "required": [
                      "connections",
                      "tasks"
                    ],
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "connections": {
                        "type": "array",
                        "items": {
                          "required": [
                            "from",
                            "to"
                          ],
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "type": "string",
                              "description": "Title of source task"
                            },
                            "to": {
                              "type": "string",
                              "description": "Title of destination task"
                            }
                          }
                        },
                        "description": "List of connections between pipeline tasks"
                      },
                      "tasks": {
                        "type": "array",
                        "items": {
                          "required": [
                            "title",
                            "task_type"
                          ],
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "Task title, must be unique"
                            },
                            "task_type": {
                              "type": "string",
                              "enum": [
                                "dataset",
                                "crop",
                                "classification",
                                "detection",
                                "segmentation",
                                "rotated_detection",
                                "instance_segmentation",
                                "anomaly",
                                "keypoint_detection"
                              ],
                              "description": "Type of task, can only be one of the predefined task types"
                            },
                            "labels": {
                              "type": "array",
                              "description": "List of labels",
                              "items": {
                                "required": [
                                  "name"
                                ],
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Label name, must be unique"
                                  },
                                  "color": {
                                    "type": "string",
                                    "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                    "description": "Label color, picked at random if not specified"
                                  },
                                  "hotkey": {
                                    "type": "string",
                                    "description": "Key or combination of key to select this label. Can be empty (no key).",
                                    "minLength": 0
                                  },
                                  "group": {
                                    "type": "string",
                                    "description": "Name of label group"
                                  },
                                  "parent_id": {
                                    "description": "Name of parent label"
                                  }
                                }
                              }
                            },
                            "keypoint_structure": {
                              "type": "object",
                              "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                              "edges": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "nodes"
                                  ],
                                  "properties": {
                                    "nodes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "positions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "label",
                                    "x",
                                    "y"
                                  ],
                                  "properties": {
                                    "label": {
                                      "type": "string"
                                    },
                                    "x": {
                                      "type": "number",
                                      "format": "float"
                                    },
                                    "y": {
                                      "type": "number",
                                      "format": "float"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "description": "List of tasks in the pipeline"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Creating task chain project": {
                  "value": {
                    "name": "Example chain project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample detection task"
                        },
                        {
                          "from": "Sample detection task",
                          "to": "crop task"
                        },
                        {
                          "from": "crop task",
                          "to": "Sample classification task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_detection",
                              "hotkey": "ctrl+5",
                              "name": "object"
                            }
                          ],
                          "task_type": "detection",
                          "title": "Sample detection task"
                        },
                        {
                          "task_type": "crop",
                          "title": "crop task"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_classification",
                              "hotkey": "ctrl+6",
                              "name": "rectangle"
                            },
                            {
                              "color": "#7F000AFF",
                              "group": "default_classification",
                              "hotkey": "ctrl+7",
                              "name": "circle"
                            },
                            {
                              "color": "#15FF00FF",
                              "group": "default_classification",
                              "hotkey": "ctrl+8",
                              "name": "triangle"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Creating single detection project": {
                  "value": {
                    "name": "Example detection project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample detection task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_detection",
                              "hotkey": "ctrl+5",
                              "name": "object"
                            }
                          ],
                          "task_type": "detection",
                          "title": "Sample detection task"
                        }
                      ]
                    }
                  }
                },
                "Creating single classification project": {
                  "value": {
                    "name": "Example classification project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample classification task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015ffff",
                              "group": "species",
                              "hotkey": "ctrl+5",
                              "name": "horse"
                            },
                            {
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+6",
                              "name": "donkey"
                            },
                            {
                              "color": "#00aaaaff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+7",
                              "name": "saddled"
                            },
                            {
                              "color": "#00aaffff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+8",
                              "name": "unsaddled"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Creating single classification project with label hierarchy": {
                  "value": {
                    "name": "Example classification project - label hierarchy",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample classification task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015ddff",
                              "hotkey": "",
                              "name": "animal",
                              "group": "living"
                            },
                            {
                              "color": "#0015ffff",
                              "group": "species",
                              "hotkey": "ctrl+5",
                              "name": "horse",
                              "parent_id": "animal"
                            },
                            {
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+6",
                              "name": "donkey",
                              "parent_id": "animal"
                            },
                            {
                              "color": "#00aaaaff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+7",
                              "name": "saddled"
                            },
                            {
                              "color": "#00aaffff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+8",
                              "name": "unsaddled"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Creating single segmentation project": {
                  "value": {
                    "name": "Example segmentation project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample segmentation task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_segmentation",
                              "hotkey": "ctrl+5",
                              "name": "object"
                            }
                          ],
                          "task_type": "segmentation",
                          "title": "Sample segmentation task"
                        }
                      ]
                    }
                  }
                },
                "Creating keypoint project": {
                  "value": {
                    "name": "Example keypoint project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "Dataset",
                          "to": "Sample keypoint detection task"
                        }
                      ],
                      "tasks": [
                        {
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "task_type": "keypoint_detection",
                          "title": "Sample keypoint detection task",
                          "labels": [
                            {
                              "color": "#0009FF27",
                              "group": "default_keypoint_detection",
                              "hotkey": "ctrl+1",
                              "name": "head"
                            },
                            {
                              "color": "#00FF7809",
                              "group": "default_keypoint_detection",
                              "hotkey": "ctrl+2",
                              "name": "neck"
                            },
                            {
                              "color": "#000919FF",
                              "group": "default_keypoint_detection",
                              "hotkey": "ctrl+3",
                              "name": "back"
                            },
                            {
                              "color": "#00FF09BD",
                              "group": "default_keypoint_detection",
                              "hotkey": "ctrl+4",
                              "name": "left_shoulder"
                            },
                            {
                              "color": "#00FF0909",
                              "group": "default_keypoint_detection",
                              "hotkey": "ctrl+5",
                              "name": "right_shoulder"
                            }
                          ],
                          "keypoint_structure": {
                            "edges": [
                              {
                                "nodes": [
                                  "head",
                                  "neck"
                                ]
                              },
                              {
                                "nodes": [
                                  "neck",
                                  "back"
                                ]
                              },
                              {
                                "nodes": [
                                  "neck",
                                  "left_shoulder"
                                ]
                              },
                              {
                                "nodes": [
                                  "neck",
                                  "right_shoulder"
                                ]
                              }
                            ],
                            "positions": [
                              {
                                "label": "head",
                                "x": 0.1,
                                "y": 0.2
                              },
                              {
                                "label": "neck",
                                "x": 0.3,
                                "y": 0.4
                              },
                              {
                                "label": "back",
                                "x": 0.5,
                                "y": 0.6
                              },
                              {
                                "label": "left_shoulder",
                                "x": 0.7,
                                "y": 0.8
                              },
                              {
                                "label": "right_shoulder",
                                "x": 0.9,
                                "y": 0.1
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Project successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Project name",
                      "minLength": 1
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "pipeline": {
                      "type": "object",
                      "properties": {
                        "connections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "to": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          },
                          "description": "List of connections between pipeline tasks"
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "required": [
                              "id",
                              "title",
                              "task_type"
                            ],
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Task title, must be unique"
                              },
                              "task_type": {
                                "type": "string",
                                "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                              },
                              "labels": {
                                "type": "array",
                                "description": "List of labels",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Label name, must be unique"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "color": {
                                      "type": "string",
                                      "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                      "description": "Label color, picked at random if not specified"
                                    },
                                    "group": {
                                      "type": "string",
                                      "description": "Name of label group"
                                    },
                                    "parent_id": {
                                      "oneOf": [
                                        {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ],
                                      "description": "Name of parent label"
                                    },
                                    "is_empty": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is an empty label"
                                    },
                                    "is_anomalous": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is anomalous or not"
                                    },
                                    "is_deleted": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is deleted"
                                    },
                                    "hotkey": {
                                      "type": "string",
                                      "description": "Key or combination of key to select this label. Can be empty (no key).",
                                      "minLength": 0
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "color",
                                    "group",
                                    "parent_id",
                                    "hotkey",
                                    "is_empty",
                                    "is_anomalous"
                                  ]
                                }
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "label_schema_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "keypoint_structure": {
                                "type": "object",
                                "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                                "edges": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "nodes"
                                    ],
                                    "properties": {
                                      "nodes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        }
                                      }
                                    }
                                  }
                                },
                                "positions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "label",
                                      "x",
                                      "y"
                                    ],
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "x": {
                                        "type": "number",
                                        "format": "float"
                                      },
                                      "y": {
                                        "type": "number",
                                        "format": "float"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "List of tasks in the pipeline"
                        }
                      },
                      "required": [
                        "connections",
                        "tasks"
                      ]
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the project"
                    },
                    "creator_id": {
                      "type": "string",
                      "description": "The ID of the user who created the project"
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "format": "float",
                          "description": "Average score of task scores of a project, null if no model is trained."
                        },
                        "task_performances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "task_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "score": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Value of the score."
                                      },
                                      "metric_type": {
                                        "type": "string",
                                        "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "metric_type"
                                    ]
                                  }
                                ],
                                "description": "Model score for the task, null if no model is trained."
                              }
                            },
                            "required": [
                              "score",
                              "task_id"
                            ]
                          }
                        }
                      }
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Thumbnail url"
                    },
                    "datasets": {
                      "type": "array",
                      "description": "List of datasets in the project",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset"
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the dataset"
                          },
                          "use_for_training": {
                            "type": "boolean",
                            "description": "Indicates if the dataset is used to train the active model"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "creation_time",
                          "use_for_training"
                        ]
                      }
                    },
                    "storage_info": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "title": "Project size in bytes",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "required": [
                    "pipeline",
                    "datasets",
                    "storage_info"
                  ]
                },
                "examples": {
                  "Task chain creation response": {
                    "value": {
                      "creation_time": "2021-06-29T16:24:30.928000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60db493ed20945a0046f56ce",
                      "name": "Example chain project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60db493fd20945a0046f56cf",
                            "to": "60db493fd20945a0046f56d2"
                          },
                          {
                            "from": "60db493fd20945a0046f56d2",
                            "to": "60db493fd20945a0046f56d3"
                          },
                          {
                            "from": "60db493fd20945a0046f56d3",
                            "to": "60db493fd20945a0046f56d6"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60db493fd20945a0046f56cf",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60db493fd20945a0046f56d2",
                            "label_schema_id": "60db493fd20945a0046f56d5",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "60db493ed20945a0046f56c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "object"
                              },
                              {
                                "color": "#ea879cff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d3",
                            "task_type": "crop",
                            "title": "crop task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d6",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_classification",
                                "hotkey": "ctrl+6",
                                "id": "60db493ed20945a0046f56c7",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#7f000aff",
                                "group": "default_classification",
                                "hotkey": "ctrl+7",
                                "id": "60db493ed20945a0046f56c8",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "circle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#15ff00ff",
                                "group": "default_classification",
                                "hotkey": "ctrl+8",
                                "id": "60db493ed20945a0046f56c9",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "triangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#a311f7ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56cb",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60db493fd20945a0046f56d2",
                            "score": {
                              "value": 0.5,
                              "metric_type": "f-measure"
                            }
                          },
                          {
                            "task_id": "60db493fd20945a0046f56d6",
                            "score": {
                              "value": 0.9,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60db493ed20945a0046f56ce/thumbnail"
                    }
                  },
                  "Detection Segmentation Task chain creation response": {
                    "value": {
                      "creation_time": "2021-06-29T16:24:30.928000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project"
                        }
                      ],
                      "id": "60db493ed20945a0046f56ce",
                      "storage_info": {},
                      "name": "Example chain project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60db493fd20945a0046f56cf",
                            "to": "60db493fd20945a0046f56d2"
                          },
                          {
                            "from": "60db493fd20945a0046f56d2",
                            "to": "60db493fd20945a0046f56d3"
                          },
                          {
                            "from": "60db493fd20945a0046f56d3",
                            "to": "60db493fd20945a0046f56d6"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60db493fd20945a0046f56cf",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60db493fd20945a0046f56d2",
                            "label_schema_id": "60db493fd20945a0046f56d5",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "60db493ed20945a0046f56c6",
                                "is_empty": false,
                                "is_deleted": false,
                                "name": "object"
                              },
                              {
                                "color": "#ea879cff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56ca",
                                "is_empty": true,
                                "is_deleted": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d3",
                            "task_type": "crop",
                            "title": "crop task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d6",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_segmentation",
                                "hotkey": "ctrl+6",
                                "id": "60db493ed20945a0046f56c7",
                                "is_empty": false,
                                "is_deleted": false,
                                "name": "rectangle",
                                "parent_id": null
                              }
                            ],
                            "task_type": "segmentation",
                            "title": "Sample segmentation task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0,
                        "task_performances": [
                          {
                            "task_id": "60db493fd20945a0046f56d2",
                            "score": {
                              "value": 0,
                              "metric_type": "accuracy"
                            }
                          },
                          {
                            "task_id": "60db493fd20945a0046f56d6",
                            "score": null
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60db493ed20945a0046f56ce/thumbnail"
                    }
                  },
                  "Single detection task creation response": {
                    "value": {
                      "creation_time": "2021-06-23T11:14:27.344000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example detection project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60d31793d5f1fb7e6e3c1a4c",
                      "storage_info": {},
                      "name": "Example detection project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60d31793d5f1fb7e6e3c1a4e",
                            "to": "60d31793d5f1fb7e6e3c1a51"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60d31793d5f1fb7e6e3c1a4e",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60d31793d5f1fb7e6e3c1a51",
                            "label_schema_id": "60d31793d5f1fb7e6e3c1a62",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default",
                                "hotkey": "ctrl+5",
                                "id": "60d31793d5f1fb7e6e3c1a46",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle"
                              },
                              {
                                "color": "#2a2b2eff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60d31793d5f1fb7e6e3c1a49",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60d31793d5f1fb7e6e3c1a51",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60d31793d5f1fb7e6e3c1a4c/thumbnail"
                    }
                  },
                  "Single classification task creation response": {
                    "value": {
                      "creation_time": "2021-07-28T09:37:17.319000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example classification project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "storage_info": {},
                      "name": "Example classification project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6101254defba22ca453f11ce",
                            "to": "6101254defba22ca453f11d1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6101254defba22ca453f11ce",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6101254defba22ca453f11d1",
                            "label_schema_id": "6101254defba22ca453f11c2",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "6101254defba22ca453f11c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse"
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "6101254defba22ca453f11c7",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey"
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "6101254defba22ca453f11c8",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled"
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "6101254defba22ca453f11c9",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled"
                              },
                              {
                                "color": "#7ada55ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "6101254defba22ca453f11ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "6101254defba22ca453f11d1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6101254defba22ca453f11cd/thumbnail"
                    }
                  },
                  "Single classification task creation with label hierarchy response": {
                    "value": {
                      "creation_time": "2021-07-28T10:09:31.764000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example classification project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "storage_info": {},
                      "name": "Example classification project - label hierarchy",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "61012cdb1d38a5e71ef3bafa",
                            "to": "61012cdb1d38a5e71ef3bafd"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "61012cdb1d38a5e71ef3bafa",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "61012cdb1d38a5e71ef3bafd",
                            "label_schema_id": "61012cdb1d38a5e71ef3bae1",
                            "labels": [
                              {
                                "color": "#0015ddff",
                                "group": "default - Sample classification task",
                                "hotkey": "",
                                "id": "61012cdb1d38a5e71ef3baf1",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "animal"
                              },
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "61012cdb1d38a5e71ef3baf2",
                                "parent_id": "61012cdb1d38a5e71ef3baf1",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse"
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "61012cdb1d38a5e71ef3baf3",
                                "parent_id": "61012cdb1d38a5e71ef3baf1",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey"
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "61012cdb1d38a5e71ef3baf4",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled"
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "61012cdb1d38a5e71ef3baf5",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled"
                              },
                              {
                                "color": "#9ee8d3ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "61012cdb1d38a5e71ef3baf6",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "61012cdb1d38a5e71ef3bafd",
                            "score": {
                              "value": 0.7,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012cdb1d38a5e71ef3baf9/thumbnail"
                    }
                  },
                  "Single segmentation task creation response": {
                    "value": {
                      "creation_time": "2021-07-28T09:31:18.137000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example segmentation project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "610123e6efba22ca453f11bd",
                      "storage_info": {},
                      "name": "Example segmentation project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "610123e6efba22ca453f11be",
                            "to": "610123e6efba22ca453f11c1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "610123e6efba22ca453f11be",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "610123e6efba22ca453f11c1",
                            "label_schema_id": "610123e6efba22ca453f11d1",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_segmentation",
                                "hotkey": "ctrl+5",
                                "id": "610123e5efba22ca453f11b9",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "object"
                              },
                              {
                                "color": "#b10334ff",
                                "group": "Empty",
                                "hotkey": "ctrl+0",
                                "id": "610123e5efba22ca453f11ba",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "Empty"
                              }
                            ],
                            "task_type": "segmentation",
                            "title": "Sample segmentation task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "610123e6efba22ca453f11c1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "dice_average"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bd/thumbnail"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The provided information is insufficient to create a project.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "No pipeline": {
                    "value": {
                      "http_status": 400,
                      "message": "'pipeline' is a required property",
                      "error_code": "bad_request"
                    }
                  },
                  "No name": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "'name' is a required property"
                    }
                  },
                  "Duplicate task title": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "Task titles must be unique"
                    }
                  },
                  "No connections": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "'connections' is a required property"
                    }
                  },
                  "Unconnected task": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "One or more tasks are not connected in the pipeline"
                    }
                  },
                  "Wrong number of nodes": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "One of the edges of the graph has an incorrect name."
                    }
                  },
                  "Incorrect node name": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "One of the edges of the graph has a wrong number of nodes."
                    }
                  },
                  "Duplicate edge in graph": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "The provided graph contains a duplicate edge."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get info about all projects in a workspace",
        "description": "Get all projects in the workspace.",
        "operationId": "GetAllProjectsInAWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "style": "form",
            "description": "Fill this field to filter the list based on project name. This is an `include` filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by, could be name or creation_date",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "creation_date"
              ]
            }
          },
          {
            "in": "query",
            "name": "with_size",
            "style": "form",
            "description": "Set to true to return the project size in the response. Default is False.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested project info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "description": "Array of projects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Project name",
                            "minLength": 1
                          },
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "pipeline": {
                            "type": "object",
                            "properties": {
                              "connections": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "from": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "to": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    }
                                  }
                                },
                                "description": "List of connections between pipeline tasks"
                              },
                              "tasks": {
                                "type": "array",
                                "items": {
                                  "required": [
                                    "id",
                                    "title",
                                    "task_type"
                                  ],
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "title": {
                                      "type": "string",
                                      "description": "Task title, must be unique"
                                    },
                                    "task_type": {
                                      "type": "string",
                                      "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                                    },
                                    "labels": {
                                      "type": "array",
                                      "description": "List of labels",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Label name, must be unique"
                                          },
                                          "id": {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          "color": {
                                            "type": "string",
                                            "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                            "description": "Label color, picked at random if not specified"
                                          },
                                          "group": {
                                            "type": "string",
                                            "description": "Name of label group"
                                          },
                                          "parent_id": {
                                            "oneOf": [
                                              {
                                                "type": "string",
                                                "minLength": 24,
                                                "maxLength": 24,
                                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                                "description": "Mongo ID of the object"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "description": "Name of parent label"
                                          },
                                          "is_empty": {
                                            "type": "boolean",
                                            "description": "Indicates whether the label is an empty label"
                                          },
                                          "is_anomalous": {
                                            "type": "boolean",
                                            "description": "Indicates whether the label is anomalous or not"
                                          },
                                          "is_deleted": {
                                            "type": "boolean",
                                            "description": "Indicates whether the label is deleted"
                                          },
                                          "hotkey": {
                                            "type": "string",
                                            "description": "Key or combination of key to select this label. Can be empty (no key).",
                                            "minLength": 0
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "color",
                                          "group",
                                          "parent_id",
                                          "hotkey",
                                          "is_empty",
                                          "is_anomalous"
                                        ]
                                      }
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "label_schema_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "keypoint_structure": {
                                      "type": "object",
                                      "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                                      "edges": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "nodes"
                                          ],
                                          "properties": {
                                            "nodes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string",
                                                "minLength": 24,
                                                "maxLength": 24,
                                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                                "description": "Mongo ID of the object"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "positions": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "label",
                                            "x",
                                            "y"
                                          ],
                                          "properties": {
                                            "label": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "x": {
                                              "type": "number",
                                              "format": "float"
                                            },
                                            "y": {
                                              "type": "number",
                                              "format": "float"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "description": "List of tasks in the pipeline"
                              }
                            },
                            "required": [
                              "connections",
                              "tasks"
                            ]
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the project"
                          },
                          "creator_id": {
                            "type": "string",
                            "description": "Identifier of the user who created the project"
                          },
                          "performance": {
                            "type": "object",
                            "properties": {
                              "score": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Average score of task scores of a project, null if no model is trained."
                              },
                              "task_performances": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "score": {
                                      "anyOf": [
                                        {
                                          "type": "null"
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "value": {
                                              "type": "number",
                                              "format": "float",
                                              "description": "Value of the score."
                                            },
                                            "metric_type": {
                                              "type": "string",
                                              "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "metric_type"
                                          ]
                                        }
                                      ],
                                      "description": "Model score for the task, null if no model is trained."
                                    }
                                  },
                                  "required": [
                                    "score",
                                    "task_id"
                                  ]
                                }
                              }
                            }
                          },
                          "thumbnail": {
                            "type": "string",
                            "description": "Thumbnail URL"
                          },
                          "storage_info": {
                            "type": "object",
                            "properties": {
                              "size": {
                                "title": "Project size in bytes",
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "creation_time",
                          "name",
                          "pipeline",
                          "storage_info",
                          "thumbnail"
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next projects page",
                      "minLength": 0
                    },
                    "project_counts": {
                      "type": "integer",
                      "description": "Total number of projects in the workspace"
                    },
                    "project_page_count": {
                      "type": "integer",
                      "description": "Total number of projects in the response"
                    }
                  }
                },
                "example": {
                  "projects": [
                    {
                      "creation_time": "2021-07-28T09:31:18.137000+00:00",
                      "creator_id": "Example user",
                      "id": "610123e6efba22ca453f11bd",
                      "name": "Example segmentation project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "610123e6efba22ca453f11be",
                            "to": "610123e6efba22ca453f11c1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "610123e6efba22ca453f11be",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "610123e6efba22ca453f11c1",
                            "label_schema_id": "610123e6efba22ca453f11d2",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_segmentation",
                                "hotkey": "ctrl+5",
                                "id": "610123e5efba22ca453f11b9",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "object",
                                "parent_id": null
                              },
                              {
                                "color": "#b10334ff",
                                "group": "Empty",
                                "hotkey": "ctrl+0",
                                "id": "610123e5efba22ca453f11ba",
                                "is_empty": true,
                                "name": "Empty",
                                "is_anomalous": false,
                                "parent_id": null
                              }
                            ],
                            "task_type": "segmentation",
                            "title": "Sample segmentation task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "610123e6efba22ca453f11c1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bd/thumbnail"
                    },
                    {
                      "creation_time": "2021-07-28T09:31:18.137000+00:00",
                      "id": "60d31793d5f1fb7e6e3c1a4c",
                      "name": "Example detection project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "610123e6efba22ca453f11bh",
                            "to": "610123e6efba22ca453f11ch"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "610123e6efba22ca453f11bh",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "610123e6efba22ca453f11ch",
                            "label_schema_id": "610123e6efba22ca453f11dh",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "610123e5efba22ca453f11b9",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "object",
                                "parent_id": null
                              },
                              {
                                "color": "#b10334ff",
                                "group": "Empty",
                                "hotkey": "ctrl+0",
                                "id": "610123e5efba22ca453f11ba",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "Empty",
                                "parent_id": null
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "610123e6efba22ca453f11ch",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bh/thumbnail"
                    },
                    {
                      "creation_time": "2021-07-28T09:37:17.319000+00:00",
                      "creator_id": "Example user",
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "name": "Example classification project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6101254defba22ca453f11ce",
                            "to": "6101254defba22ca453f11d1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6101254defba22ca453f11ce",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6101254defba22ca453f11d1",
                            "label_schema_id": "610123e6efba22ca453f11f1",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "6101254defba22ca453f11c6",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse",
                                "parent_id": null
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+7",
                                "id": "6101254defba22ca453f11c7",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "6101254defba22ca453f11c8",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+9",
                                "id": "6101254defba22ca453f11c9",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled",
                                "parent_id": null
                              },
                              {
                                "color": "#7ada55ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "6101254defba22ca453f11ca",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class",
                                "parent_id": null
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": null,
                        "task_performances": [
                          {
                            "task_id": "6101254defba22ca453f11d1",
                            "score": null
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6101254defba22ca453f11cd/thumbnail"
                    },
                    {
                      "creation_time": "2021-07-28T10:03:08.944000+00:00",
                      "creator_id": "Example user",
                      "id": "61012b5cefba22ca453f11df",
                      "name": "Example classification project - label hierarchy",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "61012b5cefba22ca453f11e0",
                            "to": "61012b5defba22ca453f11e3"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "61012b5cefba22ca453f11e0",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "61012b5defba22ca453f11e3",
                            "label_schema_id": "610123e6efba22ca453f11e4",
                            "labels": [
                              {
                                "color": "#0015ddff",
                                "group": "default - Sample classification task",
                                "hotkey": "",
                                "id": "61012b5cefba22ca453f11d7",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "animal",
                                "parent_id": null
                              },
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "61012b5cefba22ca453f11d8",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse",
                                "parent_id": null
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "61012b5cefba22ca453f11d9",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "61012b5cefba22ca453f11da",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "61012b5cefba22ca453f11db",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled",
                                "parent_id": null
                              },
                              {
                                "color": "#676f5fff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "61012b5cefba22ca453f11dc",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class",
                                "parent_id": null
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.36,
                        "task_performances": [
                          {
                            "task_id": "61012b5defba22ca453f11e3",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012b5cefba22ca453f11df/thumbnail"
                    },
                    {
                      "creation_time": "2021-07-28T10:05:43.819000+00:00",
                      "creator_id": "Example user",
                      "id": "61012bf776379a12afa0789c",
                      "name": "Example classification project - label hierarchy",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "61012bf776379a12afa0789d",
                            "to": "61012bf776379a12afa078a0"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "61012bf776379a12afa0789d",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "61012bf776379a12afa078a0",
                            "label_schema_id": "61012bf776379a12afa078b2",
                            "labels": [
                              {
                                "color": "#0015ddff",
                                "group": "default - Sample classification task",
                                "hotkey": "",
                                "id": "61012bf776379a12afa07894",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "animal",
                                "parent_id": null
                              },
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "61012bf776379a12afa07895",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse",
                                "parent_id": null
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "61012bf776379a12afa07896",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "61012bf776379a12afa07897",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "61012bf776379a12afa07898",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled",
                                "parent_id": null
                              },
                              {
                                "color": "#19e0a5ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "61012bf776379a12afa07899",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class",
                                "parent_id": null
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "61012bf776379a12afa078a0",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012bf776379a12afa0789c/thumbnail"
                    },
                    {
                      "creation_time": "2021-07-28T10:09:31.764000+00:00",
                      "creator_id": "Example user",
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "name": "Example classification project - label hierarchy",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "61012cdb1d38a5e71ef3bafa",
                            "to": "61012cdb1d38a5e71ef3bafd"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "61012cdb1d38a5e71ef3bafa",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "61012cdb1d38a5e71ef3bafd",
                            "label_schema_id": "61012cdb1d38a5e71ef3bafe",
                            "labels": [
                              {
                                "color": "#0015ddff",
                                "group": "default - Sample classification task",
                                "hotkey": "",
                                "id": "61012cdb1d38a5e71ef3baf1",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "animal",
                                "parent_id": null
                              },
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "61012cdb1d38a5e71ef3baf2",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse",
                                "parent_id": "61012cdb1d38a5e71ef3baf1"
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "61012cdb1d38a5e71ef3baf3",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey",
                                "parent_id": "61012cdb1d38a5e71ef3baf1"
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "61012cdb1d38a5e71ef3baf4",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled",
                                "parent_id": null
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "61012cdb1d38a5e71ef3baf5",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled",
                                "parent_id": null
                              },
                              {
                                "color": "#9ee8d3ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "61012cdb1d38a5e71ef3baf6",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class",
                                "parent_id": null
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "61012cdb1d38a5e71ef3bafd",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012cdb1d38a5e71ef3baf9/thumbnail"
                    },
                    {
                      "creation_time": "2022-06-17T10:33:29.896000+00:00",
                      "id": "6290a8f9003ddb3967f14385",
                      "name": "Anomaly Example",
                      "storage_info": {},
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "6290a8f9003ddb3967f14383",
                            "score": {
                              "value": 0.7,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6290a8f9003ddb3967f14383",
                            "to": "6290a8f9003ddb3967f14384"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6290a8f9003ddb3967f14383",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6290a8f9003ddb3967f14384",
                            "label_schema_id": "6290a8f9003ddb3967f1438f",
                            "labels": [
                              {
                                "color": "#8bae46ff",
                                "group": "default - Anomaly task",
                                "hotkey": "",
                                "id": "6290a8f9003ddb3967f1438c",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Normal",
                                "parent_id": null
                              },
                              {
                                "color": "#ff5662ff",
                                "group": "default - Anomaly task",
                                "hotkey": "",
                                "id": "6290a8f9003ddb3967f1438d",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Anomalous",
                                "parent_id": null
                              }
                            ],
                            "task_type": "anomaly",
                            "title": "Anomaly task"
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6290a8f9003ddb3967f14385/thumbnail"
                    },
                    {
                      "creation_time": "2022-05-30T07:04:01.917000+00:00",
                      "id": "62946c61003ddb3967f14750",
                      "name": "Card detection",
                      "storage_info": {},
                      "performance": {
                        "score": 0.24,
                        "task_performances": [
                          {
                            "task_id": "62946c61003ddb3967f1474d",
                            "score": {
                              "value": 0.24,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "62946c61003ddb3967f1474c",
                            "to": "62946c61003ddb3967f1474d"
                          },
                          {
                            "from": "62946c61003ddb3967f1474d",
                            "to": "62946c61003ddb3967f1474e"
                          },
                          {
                            "from": "62946c61003ddb3967f1474e",
                            "to": "62946c61003ddb3967f1474f"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "62946c61003ddb3967f1474c",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "62946c61003ddb3967f1474d",
                            "label_schema_id": "62946c62003ddb3967f1475f",
                            "labels": [
                              {
                                "color": "#26518eff",
                                "group": "Default group root task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475b",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Card",
                                "parent_id": null
                              },
                              {
                                "color": "#a4fc32ff",
                                "group": "No object",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475d",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No object",
                                "parent_id": null
                              }
                            ],
                            "task_type": "detection",
                            "title": "Detection task"
                          },
                          {
                            "id": "62946c61003ddb3967f1474e",
                            "task_type": "crop",
                            "title": "Crop task"
                          },
                          {
                            "id": "62946c61003ddb3967f1474f",
                            "label_schema_id": "62946c62003ddb3967f14770",
                            "labels": [
                              {
                                "color": "#ff5662ff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14760",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Hearts",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#81407bff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14762",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Diamonds",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#f7dab3ff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14763",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Spades",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#80e9afff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14764",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Clubs",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#ff7d00ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14765",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Seven",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#c9e649ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14767",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Eight",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#25a18eff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14768",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Nine",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#00a5cfff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14769",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Ten",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#708541ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476a",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Jack",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#26518eff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476b",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Queen",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#5b69ffff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476c",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "King",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#f15b85ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476d",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "Ace",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#29d5ecff",
                                "group": "No class",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476e",
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class",
                                "parent_id": "62946c62003ddb3967f1475b"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Classification task"
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14750/thumbnail"
                    },
                    {
                      "creation_time": "2024-10-16T14:45:01.917000+00:00",
                      "id": "62946c61003ddb3967f14751",
                      "name": "Human pose detection",
                      "storage_info": {},
                      "performance": {
                        "score": 0.54,
                        "task_performances": [
                          {
                            "task_id": "62946c61003ddb3967f1474f",
                            "score": {
                              "value": 0.54,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "62946c61003ddb3967f1474e",
                            "to": "62946c61003ddb3967f1474d"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "62946c61003ddb3967f1474e",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "task_type": "keypoint_detection",
                            "title": "Keypoint detection task",
                            "id": "62946c61003ddb3967f1474d",
                            "label_schema_id": "62946c62003ddb3967f14760",
                            "labels": [
                              {
                                "color": "#26518eff",
                                "group": "Default keypoint detection task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475c",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "head",
                                "parent_id": null
                              },
                              {
                                "color": "#a4fc32ff",
                                "group": "Default keypoint detection task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475e",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "neck",
                                "parent_id": null
                              }
                            ],
                            "keypoint_structure": {
                              "edges": [
                                {
                                  "nodes": [
                                    "62946c62003ddb3967f1475c",
                                    "62946c62003ddb3967f1475e"
                                  ]
                                }
                              ],
                              "positions": [
                                {
                                  "label": "62946c62003ddb3967f1475c",
                                  "x": 0.1,
                                  "y": 0.2
                                },
                                {
                                  "label": "62946c62003ddb3967f1475e",
                                  "x": 0.3,
                                  "y": 0.4
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14751/thumbnail"
                    }
                  ],
                  "next_page": "",
                  "project_counts": 9,
                  "project_page_count": 10
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects_names": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get the names of all projects in a workspace.",
        "description": "Get names of all projects in a workspace",
        "operationId": "GetAllProjectsNamesInAWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested projects names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Project name",
                            "minLength": 1
                          },
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      }
                    }
                  }
                },
                "example": {
                  "projects": [
                    {
                      "id": "610123e6efba22ca453f11bd",
                      "name": "Example segmentation project"
                    },
                    {
                      "id": "60d31793d5f1fb7e6e3c1a4c",
                      "name": "Example detection project"
                    },
                    {
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "name": "Example classification project"
                    },
                    {
                      "id": "61012b5cefba22ca453f11df",
                      "name": "Example classification project - label hierarchy"
                    },
                    {
                      "id": "61012bf776379a12afa0789c",
                      "name": "Example classification project - label hierarchy"
                    },
                    {
                      "id": "62adb9b2a4002f5a6757533c",
                      "name": "Anomaly Detection Example"
                    },
                    {
                      "id": "62946c61003ddb3967f14750",
                      "name": "Card detection"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get info about a project",
        "description": "Get information about a project.",
        "operationId": "GetProjectInfo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_deleted_labels",
            "style": "form",
            "description": "Set to True to also include the deleted labels in the response.  If set to true, each label will have a field called is_deleted that will be set to true if the label has been deleted. Default value is False.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with_size",
            "style": "form",
            "description": "Set to true to return the project size in the response. Default is False.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Info about the requested project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Project name",
                      "minLength": 1
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "pipeline": {
                      "type": "object",
                      "properties": {
                        "connections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "to": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          },
                          "description": "List of connections between pipeline tasks"
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "required": [
                              "id",
                              "title",
                              "task_type"
                            ],
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Task title, must be unique"
                              },
                              "task_type": {
                                "type": "string",
                                "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                              },
                              "labels": {
                                "type": "array",
                                "description": "List of labels",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Label name, must be unique"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "color": {
                                      "type": "string",
                                      "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                      "description": "Label color, picked at random if not specified"
                                    },
                                    "group": {
                                      "type": "string",
                                      "description": "Name of label group"
                                    },
                                    "parent_id": {
                                      "oneOf": [
                                        {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ],
                                      "description": "Name of parent label"
                                    },
                                    "is_empty": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is an empty label"
                                    },
                                    "is_anomalous": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is anomalous or not"
                                    },
                                    "is_deleted": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is deleted"
                                    },
                                    "hotkey": {
                                      "type": "string",
                                      "description": "Key or combination of key to select this label. Can be empty (no key).",
                                      "minLength": 0
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "color",
                                    "group",
                                    "parent_id",
                                    "hotkey",
                                    "is_empty",
                                    "is_anomalous"
                                  ]
                                }
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "label_schema_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "keypoint_structure": {
                                "type": "object",
                                "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                                "edges": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "nodes"
                                    ],
                                    "properties": {
                                      "nodes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        }
                                      }
                                    }
                                  }
                                },
                                "positions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "label",
                                      "x",
                                      "y"
                                    ],
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "x": {
                                        "type": "number",
                                        "format": "float"
                                      },
                                      "y": {
                                        "type": "number",
                                        "format": "float"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "List of tasks in the pipeline"
                        }
                      },
                      "required": [
                        "connections",
                        "tasks"
                      ]
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the project"
                    },
                    "creator_id": {
                      "type": "string",
                      "description": "The ID of the user who created the project"
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "format": "float",
                          "description": "Average score of task scores of a project, null if no model is trained."
                        },
                        "task_performances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "task_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "score": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Value of the score."
                                      },
                                      "metric_type": {
                                        "type": "string",
                                        "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "metric_type"
                                    ]
                                  }
                                ],
                                "description": "Model score for the task, null if no model is trained."
                              }
                            },
                            "required": [
                              "score",
                              "task_id"
                            ]
                          }
                        }
                      }
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Thumbnail url"
                    },
                    "datasets": {
                      "type": "array",
                      "description": "List of datasets in the project",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset"
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the dataset"
                          },
                          "use_for_training": {
                            "type": "boolean",
                            "description": "Indicates if the dataset is used to train the active model"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "creation_time",
                          "use_for_training"
                        ]
                      }
                    },
                    "storage_info": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "title": "Project size in bytes",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "required": [
                    "pipeline",
                    "datasets",
                    "storage_info"
                  ]
                },
                "examples": {
                  "Task chain project response": {
                    "value": {
                      "creation_time": "2021-06-29T16:24:30.928000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60db493ed20945a0046f56ce",
                      "name": "Example chain project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60db493fd20945a0046f56cf",
                            "to": "60db493fd20945a0046f56d2"
                          },
                          {
                            "from": "60db493fd20945a0046f56d2",
                            "to": "60db493fd20945a0046f56d3"
                          },
                          {
                            "from": "60db493fd20945a0046f56d3",
                            "to": "60db493fd20945a0046f56d6"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60db493fd20945a0046f56cf",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60db493fd20945a0046f56d2",
                            "label_schema_id": "60db493fd20945a0046f56d5",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "60db493ed20945a0046f56c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "object"
                              },
                              {
                                "color": "#ea879cff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d3",
                            "task_type": "crop",
                            "title": "crop task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d6",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_classification",
                                "hotkey": "ctrl+6",
                                "id": "60db493ed20945a0046f56c7",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#7f000aff",
                                "group": "default_classification",
                                "hotkey": "ctrl+7",
                                "id": "60db493ed20945a0046f56c8",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "circle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#15ff00ff",
                                "group": "default_classification",
                                "hotkey": "ctrl+8",
                                "id": "60db493ed20945a0046f56c9",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "triangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#a311f7ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56cb",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60db493fd20945a0046f56d2",
                            "score": {
                              "value": 0.5,
                              "metric_type": "f-measure"
                            }
                          },
                          {
                            "task_id": "60db493fd20945a0046f56d6",
                            "score": {
                              "value": 0.9,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60db493ed20945a0046f56ce/thumbnail"
                    }
                  },
                  "Classification response": {
                    "value": {
                      "creation_time": "2021-07-28T09:37:17.319000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example classification project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "61012cdb1d38a5e71ef3baf9",
                      "storage_info": {},
                      "name": "Example classification project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6101254defba22ca453f11ce",
                            "to": "6101254defba22ca453f11d1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6101254defba22ca453f11ce",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6101254defba22ca453f11d1",
                            "label_schema_id": "6101254defba22ca453f11c2",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "6101254defba22ca453f11c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse"
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "6101254defba22ca453f11c7",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey"
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "6101254defba22ca453f11c8",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled"
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "6101254defba22ca453f11c9",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled"
                              },
                              {
                                "color": "#7ada55ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "6101254defba22ca453f11ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "6101254defba22ca453f11d1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6101254defba22ca453f11cd/thumbnail"
                    }
                  },
                  "Detection response": {
                    "value": {
                      "creation_time": "2021-06-23T11:14:27.344000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example detection project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60d31793d5f1fb7e6e3c1a4c",
                      "storage_info": {},
                      "name": "Example detection project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60d31793d5f1fb7e6e3c1a4e",
                            "to": "60d31793d5f1fb7e6e3c1a51"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60d31793d5f1fb7e6e3c1a4e",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60d31793d5f1fb7e6e3c1a51",
                            "label_schema_id": "60d31793d5f1fb7e6e3c1a62",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default",
                                "hotkey": "ctrl+5",
                                "id": "60d31793d5f1fb7e6e3c1a46",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle"
                              },
                              {
                                "color": "#2a2b2eff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60d31793d5f1fb7e6e3c1a49",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60d31793d5f1fb7e6e3c1a51",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60d31793d5f1fb7e6e3c1a4c/thumbnail"
                    }
                  },
                  "Oriented detection response": {
                    "value": {
                      "creation_time": "2022-06-18T12:23:38.616000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "62adc3caa4002f5a6757534a",
                          "name": "Boat detection"
                        }
                      ],
                      "id": "62adc3caa4002f5a67575349",
                      "storage_info": {},
                      "name": "Boat detection",
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "62adc3caa4002f5a67575348",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "62adc3caa4002f5a67575347",
                            "to": "62adc3caa4002f5a67575348"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "62adc3caa4002f5a67575347",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "62adc3caa4002f5a67575348",
                            "label_schema_id": "62adc3caa4002f5a67575354",
                            "labels": [
                              {
                                "color": "#cc94daff",
                                "group": "Default group",
                                "hotkey": "",
                                "id": "62adc3caa4002f5a67575350",
                                "is_empty": false,
                                "name": "Boat",
                                "parent_id": null
                              },
                              {
                                "color": "#94cef2ff",
                                "group": "No object",
                                "hotkey": "",
                                "id": "62adc3caa4002f5a67575352",
                                "is_empty": true,
                                "name": "No object",
                                "parent_id": null
                              }
                            ],
                            "task_type": "rotated_detection",
                            "title": "Detection oriented task"
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/workspaces/62909fdf003ddb3967f14382/projects/62adc3caa4002f5a67575349/thumbnail"
                    }
                  },
                  "Segmentation response": {
                    "value": {
                      "creation_time": "2021-07-28T09:31:18.137000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example segmentation project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "610123e6efba22ca453f11bd",
                      "storage_info": {},
                      "name": "Example segmentation project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "610123e6efba22ca453f11be",
                            "to": "610123e6efba22ca453f11c1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "610123e6efba22ca453f11be",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "610123e6efba22ca453f11c1",
                            "label_schema_id": "610123e6efba22ca453f11d1",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_segmentation",
                                "hotkey": "ctrl+5",
                                "id": "610123e5efba22ca453f11b9",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "object"
                              },
                              {
                                "color": "#b10334ff",
                                "group": "Empty",
                                "hotkey": "ctrl+0",
                                "id": "610123e5efba22ca453f11ba",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "Empty"
                              }
                            ],
                            "task_type": "segmentation",
                            "title": "Sample segmentation task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "610123e6efba22ca453f11c1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "dice_average"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bd/thumbnail"
                    }
                  },
                  "Anomaly detection response": {
                    "value": {
                      "creation_time": "2022-06-17T10:33:29.896000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6290a8f9003ddb3967f14386",
                          "name": "Anomaly Detection Example"
                        }
                      ],
                      "id": "6290a8f9003ddb3967f14385",
                      "storage_info": {},
                      "name": "Anomaly Detection Example",
                      "performance": {
                        "score": null,
                        "task_performances": [
                          {
                            "task_id": "6290a8f9003ddb3967f14384",
                            "score": null
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6290a8f9003ddb3967f14383",
                            "to": "6290a8f9003ddb3967f14384"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6290a8f9003ddb3967f14383",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6290a8f9003ddb3967f14384",
                            "label_schema_id": "6290a8f9003ddb3967f1438f",
                            "labels": [
                              {
                                "color": "#8bae46ff",
                                "group": "default - Anomaly task",
                                "hotkey": "",
                                "id": "6290a8f9003ddb3967f1438c",
                                "is_empty": false,
                                "name": "Normal",
                                "parent_id": null
                              },
                              {
                                "color": "#ff5662ff",
                                "group": "default - Anomaly task",
                                "hotkey": "",
                                "id": "6290a8f9003ddb3967f1438d",
                                "is_empty": false,
                                "name": "Anomalous",
                                "parent_id": null
                              }
                            ],
                            "task_type": "anomaly",
                            "title": "Anomaly task"
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/workspaces/62909fdf003ddb3967f14382/projects/6290a8f9003ddb3967f14385/thumbnail"
                    }
                  },
                  "Detection classification response": {
                    "value": {
                      "creation_time": "2022-05-30T07:04:01.917000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "62946c61003ddb3967f14751",
                          "name": "Card detection"
                        }
                      ],
                      "id": "62946c61003ddb3967f14750",
                      "storage_info": {},
                      "name": "Card detection",
                      "performance": {
                        "score": null,
                        "task_performances": [
                          {
                            "task_id": "62946c61003ddb3967f1474d",
                            "score": null
                          },
                          {
                            "task_id": "62946c61003ddb3967f1474f",
                            "score": null
                          }
                        ]
                      },
                      "pipeline": {
                        "connections": [
                          {
                            "from": "62946c61003ddb3967f1474c",
                            "to": "62946c61003ddb3967f1474d"
                          },
                          {
                            "from": "62946c61003ddb3967f1474d",
                            "to": "62946c61003ddb3967f1474e"
                          },
                          {
                            "from": "62946c61003ddb3967f1474e",
                            "to": "62946c61003ddb3967f1474f"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "62946c61003ddb3967f1474c",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "62946c61003ddb3967f1474d",
                            "label_schema_id": "62946c62003ddb3967f1475f",
                            "labels": [
                              {
                                "color": "#26518eff",
                                "group": "Default group root task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475b",
                                "is_empty": false,
                                "name": "Card",
                                "parent_id": null
                              },
                              {
                                "color": "#a4fc32ff",
                                "group": "No object",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475d",
                                "is_empty": true,
                                "name": "No object",
                                "parent_id": null
                              }
                            ],
                            "task_type": "detection",
                            "title": "Detection task"
                          },
                          {
                            "id": "62946c61003ddb3967f1474e",
                            "task_type": "crop",
                            "title": "Crop task"
                          },
                          {
                            "id": "62946c61003ddb3967f1474f",
                            "label_schema_id": "62946c62003ddb3967f14770",
                            "labels": [
                              {
                                "color": "#ff5662ff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14760",
                                "is_empty": false,
                                "name": "Hearts",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#81407bff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14762",
                                "is_empty": false,
                                "name": "Diamonds",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#f7dab3ff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14763",
                                "is_empty": false,
                                "name": "Spades",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#80e9afff",
                                "group": "Default group root task___Suit",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14764",
                                "is_empty": false,
                                "name": "Clubs",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#ff7d00ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14765",
                                "is_empty": false,
                                "name": "Seven",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#c9e649ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14767",
                                "is_empty": false,
                                "name": "Eight",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#25a18eff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14768",
                                "is_empty": false,
                                "name": "Nine",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#00a5cfff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f14769",
                                "is_empty": false,
                                "name": "Ten",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#708541ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476a",
                                "is_empty": false,
                                "name": "Jack",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#26518eff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476b",
                                "is_empty": false,
                                "name": "Queen",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#5b69ffff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476c",
                                "is_empty": false,
                                "name": "King",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#f15b85ff",
                                "group": "Default group root task___Value",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476d",
                                "is_empty": false,
                                "name": "Ace",
                                "parent_id": "62946c62003ddb3967f1475b"
                              },
                              {
                                "color": "#29d5ecff",
                                "group": "No class",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1476e",
                                "is_empty": true,
                                "name": "No class",
                                "parent_id": "62946c62003ddb3967f1475b"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Classification task"
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/workspaces/62909fdf003ddb3967f14382/projects/62946c61003ddb3967f14750/thumbnail"
                    }
                  },
                  "Detection Segmentation response": {
                    "value": {
                      "creation_time": "2021-06-29T16:24:30.928000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project"
                        }
                      ],
                      "id": "60db493ed20945a0046f56ce",
                      "storage_info": {},
                      "name": "Example chain project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60db493fd20945a0046f56cf",
                            "to": "60db493fd20945a0046f56d2"
                          },
                          {
                            "from": "60db493fd20945a0046f56d2",
                            "to": "60db493fd20945a0046f56d3"
                          },
                          {
                            "from": "60db493fd20945a0046f56d3",
                            "to": "60db493fd20945a0046f56d6"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60db493fd20945a0046f56cf",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60db493fd20945a0046f56d2",
                            "label_schema_id": "60db493fd20945a0046f56d5",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "60db493ed20945a0046f56c6",
                                "is_empty": false,
                                "is_deleted": false,
                                "name": "object"
                              },
                              {
                                "color": "#ea879cff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56ca",
                                "is_empty": true,
                                "is_deleted": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d3",
                            "task_type": "crop",
                            "title": "crop task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d6",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_segmentation",
                                "hotkey": "ctrl+6",
                                "id": "60db493ed20945a0046f56c7",
                                "is_empty": false,
                                "is_deleted": false,
                                "name": "rectangle",
                                "parent_id": null
                              }
                            ],
                            "task_type": "segmentation",
                            "title": "Sample segmentation task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0,
                        "task_performances": [
                          {
                            "task_id": "60db493fd20945a0046f56d2",
                            "score": {
                              "value": 0,
                              "metric_type": "accuracy"
                            }
                          },
                          {
                            "task_id": "60db493fd20945a0046f56d6",
                            "score": null
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60db493ed20945a0046f56ce/thumbnail"
                    }
                  },
                  "Keypoint detection response": {
                    "value": {
                      "creation_time": "2024-10-16T14:45:01.917000+00:00",
                      "id": "62946c61003ddb3967f14751",
                      "name": "Human pose detection",
                      "storage_info": {},
                      "performance": {
                        "score": 0.54,
                        "task_performances": [
                          {
                            "task_id": "62946c61003ddb3967f1474f",
                            "score": {
                              "value": 0.54,
                              "metric_type": "Percentage of Correct Keypoints"
                            }
                          }
                        ]
                      },
                      "datasets": [
                        {
                          "id": "62946c61003ddb3967f1474e",
                          "name": "Human pose detection",
                          "creation_time": "2024-10-16T14:45:01.917000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "pipeline": {
                        "connections": [
                          {
                            "from": "62946c61003ddb3967f1474e",
                            "to": "62946c61003ddb3967f1474d"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "62946c61003ddb3967f1474e",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "task_type": "keypoint_detection",
                            "title": "Keypoint detection task",
                            "id": "62946c61003ddb3967f1474d",
                            "label_schema_id": "62946c62003ddb3967f14760",
                            "labels": [
                              {
                                "color": "#26518eff",
                                "group": "Default keypoint detection task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475c",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "head",
                                "parent_id": null
                              },
                              {
                                "color": "#a4fc32ff",
                                "group": "Default keypoint detection task",
                                "hotkey": "",
                                "id": "62946c62003ddb3967f1475e",
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "neck",
                                "parent_id": null
                              }
                            ],
                            "keypoint_structure": {
                              "edges": [
                                {
                                  "nodes": [
                                    "62946c62003ddb3967f1475c",
                                    "62946c62003ddb3967f1475e"
                                  ]
                                }
                              ],
                              "positions": [
                                {
                                  "label": "62946c62003ddb3967f1475c",
                                  "x": 0.1,
                                  "y": 0.2
                                },
                                {
                                  "label": "62946c62003ddb3967f1475e",
                                  "x": 0.3,
                                  "y": 0.4
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14751/thumbnail"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Edit a project",
        "description": "Edit project properties. This is limited to: \n- Editing project name\n- Adding or removing labels\n- Editing label name, color, and hotkey.",
        "operationId": "EditProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "pipeline",
                  "id"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Project name",
                    "minLength": 1
                  },
                  "pipeline": {
                    "required": [
                      "connections",
                      "tasks"
                    ],
                    "type": "object",
                    "properties": {
                      "connections": {
                        "type": "array",
                        "items": {
                          "required": [
                            "from",
                            "to"
                          ],
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "to": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        },
                        "description": "List of connections between pipeline tasks"
                      },
                      "tasks": {
                        "type": "array",
                        "items": {
                          "required": [
                            "title",
                            "task_type",
                            "id"
                          ],
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "Task title, must be unique"
                            },
                            "task_type": {
                              "type": "string",
                              "description": "Task type; should be one of: [ classification, detection, segmentation, anomaly, crop, dataset ]"
                            },
                            "id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "labels": {
                              "type": "array",
                              "description": "List of labels",
                              "items": {
                                "required": [
                                  "name",
                                  "color"
                                ],
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Label name, must be unique"
                                  },
                                  "id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "color": {
                                    "type": "string",
                                    "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                    "description": "Label color, picked at random if not specified"
                                  },
                                  "hotkey": {
                                    "type": "string",
                                    "description": "Key or combination of key to select this label. Can be empty (no key).",
                                    "minLength": 0
                                  },
                                  "group": {
                                    "type": "string",
                                    "description": "Name of label group"
                                  },
                                  "is_empty": {
                                    "type": "boolean",
                                    "readOnly": true,
                                    "description": "Indicates whether the label is an empty label"
                                  },
                                  "is_deleted": {
                                    "type": "boolean",
                                    "description": "Indicates whether the label is going to be deleted"
                                  },
                                  "parent_id": {
                                    "description": "Name of parent label"
                                  },
                                  "revisit_affected_annotations": {
                                    "type": "boolean",
                                    "writeOnly": true,
                                    "description": "On label schema change, whether to mark the annotations linked to this label as \"to be revisited\" by the user"
                                  }
                                }
                              }
                            },
                            "label_schema_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object",
                              "nullable": true
                            },
                            "keypoint_structure": {
                              "type": "object",
                              "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                              "edges": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "nodes"
                                  ],
                                  "properties": {
                                    "nodes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      }
                                    }
                                  }
                                }
                              },
                              "positions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "label",
                                    "x",
                                    "y"
                                  ],
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "x": {
                                      "type": "number",
                                      "format": "float"
                                    },
                                    "y": {
                                      "type": "number",
                                      "format": "float"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "description": "List of tasks in the pipeline"
                      }
                    }
                  },
                  "id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "creation_time": {
                    "type": "string",
                    "description": "Creation time of the project"
                  },
                  "creator_id": {
                    "type": "string",
                    "description": "The username of the creator of the project"
                  },
                  "performance": {
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": [
                          "number",
                          "null"
                        ],
                        "format": "float",
                        "description": "Average score of task scores of a project, null if no model is trained."
                      },
                      "task_performances": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "task_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "score": {
                              "anyOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Value of the score."
                                    },
                                    "metric_type": {
                                      "type": "string",
                                      "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                    }
                                  },
                                  "required": [
                                    "value",
                                    "metric_type"
                                  ]
                                }
                              ],
                              "description": "Model score for the task, null if no model is trained."
                            }
                          },
                          "required": [
                            "score",
                            "task_id"
                          ]
                        }
                      }
                    }
                  },
                  "thumbnail": {
                    "type": "string",
                    "description": "Thumbnail url"
                  },
                  "datasets": {
                    "type": "array",
                    "description": "List of datasets in the project",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the dataset"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Updating task chain project": {
                  "value": {
                    "id": "60e447c8d2ed2ae8c7dd0da6",
                    "name": "Example chain project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "60e447c8d2ed2ae8c7dd0da0",
                          "to": "60e447c8d2ed2ae8c7dd0da8"
                        },
                        {
                          "from": "60e447c8d2ed2ae8c7dd0da8",
                          "to": "60e447c8d2ed2ae8c7dd0dc1"
                        },
                        {
                          "from": "60e447c8d2ed2ae8c7dd0dc1",
                          "to": "60e447c8d2ed2ae8c7dd0da1"
                        }
                      ],
                      "tasks": [
                        {
                          "id": "60e447c8d2ed2ae8c7dd0da0",
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "id": "60e447c8d2ed2ae8c7dd0da8",
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_detection",
                              "hotkey": "ctrl+5",
                              "id": "60e447c8d2ed2ae8c7dd0da1",
                              "name": "object"
                            }
                          ],
                          "task_type": "detection",
                          "title": "Sample detection task"
                        },
                        {
                          "id": "60e447c8d2ed2ae8c7dd0dc1",
                          "task_type": "crop",
                          "title": "crop task"
                        },
                        {
                          "id": "60e447c8d2ed2ae8c7dd0da1",
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_classification",
                              "hotkey": "ctrl+6",
                              "id": "60e447c8d2ed2ae8c7dd0da2",
                              "name": "rectangle"
                            },
                            {
                              "color": "#7F000AFF",
                              "group": "default_classification",
                              "hotkey": "ctrl+7",
                              "id": "60e447c8d2ed2ae8c7dd0da3",
                              "name": "circle"
                            },
                            {
                              "color": "#15FF00FF",
                              "group": "default_classification",
                              "hotkey": "ctrl+8",
                              "id": "60e447c8d2ed2ae8c7dd0da4",
                              "name": "triangle"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Updating single detection project": {
                  "value": {
                    "id": "60e447c8d2ed2ae8c7dd0da5",
                    "name": "Example detection project demo",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "60e447c8d2ed2ae8c7dd0da7",
                          "to": "60e447c8d2ed2ae8c7dd0da0"
                        }
                      ],
                      "tasks": [
                        {
                          "id": "60e447c8d2ed2ae8c7dd0da7",
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "id": "60e447c8d2ed2ae8c7dd0da0",
                          "labels": [
                            {
                              "color": "#0015FFFF",
                              "group": "default_detection",
                              "hotkey": "ctrl+5",
                              "id": "60e447c8d2ed2ae8c7dd0da3",
                              "name": "object"
                            }
                          ],
                          "task_type": "detection",
                          "title": "Sample detection task"
                        }
                      ]
                    }
                  }
                },
                "Adding a new label to classification project": {
                  "value": {
                    "id": "6101254defba22ca453f11cd",
                    "name": "Example classification project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "6101254defba22ca453f11ce",
                          "to": "6101254defba22ca453f11d1"
                        }
                      ],
                      "tasks": [
                        {
                          "id": "6101254defba22ca453f11ce",
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "id": "6101254defba22ca453f11d1",
                          "labels": [
                            {
                              "id": "6101254defba22ca453f11c6",
                              "color": "#0015ffff",
                              "group": "species",
                              "hotkey": "ctrl+5",
                              "name": "horse"
                            },
                            {
                              "id": "6101254defba22ca453f11c7",
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+6",
                              "name": "donkey"
                            },
                            {
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+9",
                              "name": "zebra",
                              "revisit_affected_annotations": true
                            },
                            {
                              "id": "6101254defba22ca453f11c8",
                              "color": "#00aaaaff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+7",
                              "name": "saddled"
                            },
                            {
                              "id": "6101254defba22ca453f11c9",
                              "color": "#00aaffff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+8",
                              "name": "unsaddled"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Deleting a label for a classification project": {
                  "value": {
                    "id": "6101254defba22ca453f11cd",
                    "name": "Example classification project",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "6101254defba22ca453f11ce",
                          "to": "6101254defba22ca453f11d1"
                        }
                      ],
                      "tasks": [
                        {
                          "id": "6101254defba22ca453f11ce",
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "id": "6101254defba22ca453f11d1",
                          "labels": [
                            {
                              "id": "6101254defba22ca453f11c6",
                              "color": "#0015ffff",
                              "group": "species",
                              "hotkey": "ctrl+5",
                              "name": "horse"
                            },
                            {
                              "id": "6101254defba22ca453f11c7",
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+6",
                              "name": "donkey"
                            },
                            {
                              "id": "6101254defba22ca453f11c8",
                              "color": "#00ffffff",
                              "group": "species",
                              "hotkey": "ctrl+9",
                              "name": "zebra",
                              "is_deleted": true
                            },
                            {
                              "id": "6101254defba22ca453f11c9",
                              "color": "#00aaaaff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+7",
                              "name": "saddled"
                            },
                            {
                              "id": "6101254defba22ca453f11ca",
                              "color": "#00aaffff",
                              "group": "saddle_state",
                              "hotkey": "ctrl+8",
                              "name": "unsaddled"
                            }
                          ],
                          "task_type": "classification",
                          "title": "Sample classification task"
                        }
                      ]
                    }
                  }
                },
                "Editing the keypoint graph in a keypoint detection project": {
                  "value": {
                    "id": "62946c61003ddb3967f14751",
                    "name": "Human pose detection",
                    "pipeline": {
                      "connections": [
                        {
                          "from": "62946c61003ddb3967f1474e",
                          "to": "62946c61003ddb3967f1474d"
                        }
                      ],
                      "tasks": [
                        {
                          "id": "62946c61003ddb3967f1474e",
                          "task_type": "dataset",
                          "title": "Dataset"
                        },
                        {
                          "task_type": "keypoint_detection",
                          "title": "Keypoint detection task",
                          "id": "62946c61003ddb3967f1474d",
                          "label_schema_id": "62946c62003ddb3967f14760",
                          "labels": [
                            {
                              "color": "#26518eff",
                              "group": "Default keypoint detection task",
                              "hotkey": "",
                              "id": "62946c62003ddb3967f1475c",
                              "is_empty": false,
                              "is_anomalous": false,
                              "name": "head",
                              "parent_id": null
                            },
                            {
                              "color": "#a4fc32ff",
                              "group": "Default keypoint detection task",
                              "hotkey": "",
                              "id": "62946c62003ddb3967f1475e",
                              "is_empty": false,
                              "is_anomalous": false,
                              "name": "neck",
                              "parent_id": null
                            },
                            {
                              "color": "#a4fc32ff",
                              "group": "Default keypoint detection task",
                              "hotkey": "",
                              "id": "62946c62003ddb3967f1475f",
                              "is_empty": false,
                              "is_anomalous": false,
                              "name": "left_shoulder",
                              "parent_id": null
                            }
                          ],
                          "keypoint_structure": {
                            "edges": [
                              {
                                "nodes": [
                                  "62946c62003ddb3967f1475c",
                                  "62946c62003ddb3967f1475e"
                                ]
                              },
                              {
                                "nodes": [
                                  "62946c62003ddb3967f1475e",
                                  "62946c62003ddb3967f1475f"
                                ]
                              }
                            ],
                            "positions": [
                              {
                                "label": "62946c62003ddb3967f1475c",
                                "x": 0.1,
                                "y": 0.2
                              },
                              {
                                "label": "62946c62003ddb3967f1475e",
                                "x": 0.3,
                                "y": 0.4
                              },
                              {
                                "label": "62946c62003ddb3967f1475f",
                                "x": 0.7,
                                "y": 0.8
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14751/thumbnail"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Project name",
                      "minLength": 1
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "pipeline": {
                      "type": "object",
                      "properties": {
                        "connections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "to": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          },
                          "description": "List of connections between pipeline tasks"
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "required": [
                              "id",
                              "title",
                              "task_type"
                            ],
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Task title, must be unique"
                              },
                              "task_type": {
                                "type": "string",
                                "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                              },
                              "labels": {
                                "type": "array",
                                "description": "List of labels",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Label name, must be unique"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "color": {
                                      "type": "string",
                                      "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                                      "description": "Label color, picked at random if not specified"
                                    },
                                    "group": {
                                      "type": "string",
                                      "description": "Name of label group"
                                    },
                                    "parent_id": {
                                      "oneOf": [
                                        {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ],
                                      "description": "Name of parent label"
                                    },
                                    "is_empty": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is an empty label"
                                    },
                                    "is_anomalous": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is anomalous or not"
                                    },
                                    "is_deleted": {
                                      "type": "boolean",
                                      "description": "Indicates whether the label is deleted"
                                    },
                                    "hotkey": {
                                      "type": "string",
                                      "description": "Key or combination of key to select this label. Can be empty (no key).",
                                      "minLength": 0
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "color",
                                    "group",
                                    "parent_id",
                                    "hotkey",
                                    "is_empty",
                                    "is_anomalous"
                                  ]
                                }
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "label_schema_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "keypoint_structure": {
                                "type": "object",
                                "description": "The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks.",
                                "edges": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "nodes"
                                    ],
                                    "properties": {
                                      "nodes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        }
                                      }
                                    }
                                  }
                                },
                                "positions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "label",
                                      "x",
                                      "y"
                                    ],
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "x": {
                                        "type": "number",
                                        "format": "float"
                                      },
                                      "y": {
                                        "type": "number",
                                        "format": "float"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "List of tasks in the pipeline"
                        }
                      },
                      "required": [
                        "connections",
                        "tasks"
                      ]
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the project"
                    },
                    "creator_id": {
                      "type": "string",
                      "description": "The ID of the user who created the project"
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "format": "float",
                          "description": "Average score of task scores of a project, null if no model is trained."
                        },
                        "task_performances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "task_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "score": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Value of the score."
                                      },
                                      "metric_type": {
                                        "type": "string",
                                        "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "metric_type"
                                    ]
                                  }
                                ],
                                "description": "Model score for the task, null if no model is trained."
                              }
                            },
                            "required": [
                              "score",
                              "task_id"
                            ]
                          }
                        }
                      }
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Thumbnail url"
                    },
                    "datasets": {
                      "type": "array",
                      "description": "List of datasets in the project",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset"
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the dataset"
                          },
                          "use_for_training": {
                            "type": "boolean",
                            "description": "Indicates if the dataset is used to train the active model"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "creation_time",
                          "use_for_training"
                        ]
                      }
                    },
                    "storage_info": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "title": "Project size in bytes",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "required": [
                    "pipeline",
                    "datasets",
                    "storage_info"
                  ]
                },
                "examples": {
                  "Task chain update response": {
                    "value": {
                      "creation_time": "2021-06-29T16:24:30.928000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60db493ed20945a0046f56ce",
                      "name": "Example chain project",
                      "storage_info": {},
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60db493fd20945a0046f56cf",
                            "to": "60db493fd20945a0046f56d2"
                          },
                          {
                            "from": "60db493fd20945a0046f56d2",
                            "to": "60db493fd20945a0046f56d3"
                          },
                          {
                            "from": "60db493fd20945a0046f56d3",
                            "to": "60db493fd20945a0046f56d6"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60db493fd20945a0046f56cf",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60db493fd20945a0046f56d2",
                            "label_schema_id": "60db493fd20945a0046f56d5",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_detection",
                                "hotkey": "ctrl+5",
                                "id": "60db493ed20945a0046f56c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "object"
                              },
                              {
                                "color": "#ea879cff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d3",
                            "task_type": "crop",
                            "title": "crop task"
                          },
                          {
                            "id": "60db493fd20945a0046f56d6",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default_classification",
                                "hotkey": "ctrl+6",
                                "id": "60db493ed20945a0046f56c7",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#7f000aff",
                                "group": "default_classification",
                                "hotkey": "ctrl+7",
                                "id": "60db493ed20945a0046f56c8",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "circle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#15ff00ff",
                                "group": "default_classification",
                                "hotkey": "ctrl+8",
                                "id": "60db493ed20945a0046f56c9",
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "triangle",
                                "parent_id": "60db493ed20945a0046f56c6"
                              },
                              {
                                "color": "#a311f7ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "60db493ed20945a0046f56cb",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60db493fd20945a0046f56d2",
                            "score": {
                              "value": 0.5,
                              "metric_type": "f-measure"
                            }
                          },
                          {
                            "task_id": "60db493fd20945a0046f56d6",
                            "score": {
                              "value": 0.9,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60db493ed20945a0046f56ce/thumbnail"
                    }
                  },
                  "Single task update response": {
                    "value": {
                      "creation_time": "2021-06-23T11:14:27.344000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example detection project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "60d31793d5f1fb7e6e3c1a4c",
                      "storage_info": {},
                      "name": "Example detection project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "60d31793d5f1fb7e6e3c1a4e",
                            "to": "60d31793d5f1fb7e6e3c1a51"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "60d31793d5f1fb7e6e3c1a4e",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "60d31793d5f1fb7e6e3c1a51",
                            "label_schema_id": "60d31793d5f1fb7e6e3c1a62",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "default",
                                "hotkey": "ctrl+5",
                                "id": "60d31793d5f1fb7e6e3c1a46",
                                "parent_id": null,
                                "is_empty": false,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "rectangle"
                              },
                              {
                                "color": "#2a2b2eff",
                                "group": "No object",
                                "hotkey": "ctrl+0",
                                "id": "60d31793d5f1fb7e6e3c1a49",
                                "parent_id": null,
                                "is_empty": true,
                                "is_deleted": false,
                                "is_anomalous": false,
                                "name": "No object"
                              }
                            ],
                            "task_type": "detection",
                            "title": "Sample detection task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "60d31793d5f1fb7e6e3c1a51",
                            "score": {
                              "value": 0.7,
                              "metric_type": "f-measure"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/60d31793d5f1fb7e6e3c1a4c/thumbnail"
                    }
                  },
                  "Classification project label addition response": {
                    "value": {
                      "creation_time": "2021-07-28T09:37:17.319000+00:00",
                      "creator_id": "Example user",
                      "datasets": [
                        {
                          "id": "6101254defba22ca453f11cc",
                          "name": "Example chain project",
                          "creation_time": "2022-10-24T11:21:50.030000+00:00",
                          "use_for_training": true
                        }
                      ],
                      "id": "6101254defba22ca453f11cd",
                      "storage_info": {},
                      "name": "Example classification project",
                      "pipeline": {
                        "connections": [
                          {
                            "from": "6101254defba22ca453f11ce",
                            "to": "6101254defba22ca453f11d1"
                          }
                        ],
                        "tasks": [
                          {
                            "id": "6101254defba22ca453f11ce",
                            "task_type": "dataset",
                            "title": "Dataset"
                          },
                          {
                            "id": "6101254defba22ca453f11d1",
                            "label_schema_id": "6101254defba22ca453f11c2",
                            "labels": [
                              {
                                "color": "#0015ffff",
                                "group": "species",
                                "hotkey": "ctrl+5",
                                "id": "6101254defba22ca453f11c6",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "horse"
                              },
                              {
                                "color": "#00ffffff",
                                "group": "species",
                                "hotkey": "ctrl+6",
                                "id": "6101254defba22ca453f11c7",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "donkey"
                              },
                              {
                                "color": "#0022ffff",
                                "group": "species",
                                "hotkey": "ctrl+9",
                                "id": "6101254defba22ca453f11dd",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "zebra"
                              },
                              {
                                "color": "#00aaaaff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+7",
                                "id": "6101254defba22ca453f11c8",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "saddled"
                              },
                              {
                                "color": "#00aaffff",
                                "group": "saddle_state",
                                "hotkey": "ctrl+8",
                                "id": "6101254defba22ca453f11c9",
                                "parent_id": null,
                                "is_empty": false,
                                "is_anomalous": false,
                                "name": "unsaddled"
                              },
                              {
                                "color": "#7ada55ff",
                                "group": "No class",
                                "hotkey": "ctrl+0",
                                "id": "6101254defba22ca453f11ca",
                                "parent_id": null,
                                "is_empty": true,
                                "is_anomalous": false,
                                "name": "No class"
                              }
                            ],
                            "task_type": "classification",
                            "title": "Sample classification task"
                          }
                        ]
                      },
                      "performance": {
                        "score": 0.7,
                        "task_performances": [
                          {
                            "task_id": "6101254defba22ca453f11d1",
                            "score": {
                              "value": 0.7,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6101254defba22ca453f11cd/thumbnail"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Empty name": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "'' is too short"
                    }
                  },
                  "No name": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "'name' is a required property"
                    }
                  },
                  "No pipeline": {
                    "value": {
                      "http_status": 400,
                      "message": "'pipeline' is a required property",
                      "error_code": "bad_request"
                    }
                  },
                  "Invalid labels": {
                    "value": {
                      "http_status": 400,
                      "error_code": "invalid_labels",
                      "message": "The provided labels are not valid"
                    }
                  },
                  "Changed label group": {
                    "value": {
                      "http_status": 400,
                      "error_code": "cannot_change_label_group",
                      "message": "Changing the group of a label is not allowed. Attempted to change label 'Label Name' from group 'Old Group' to group 'New Group'"
                    }
                  },
                  "Wrong number of nodes": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "One of the edges of the graph has an incorrect name."
                    }
                  },
                  "Incorrect node name": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "One of the edges of the graph has a wrong number of nodes."
                    }
                  },
                  "Duplicate edge in graph": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "The provided graph contains a duplicate edge."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Label not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find label with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "label_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Requested project cannot be edited",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Cannot edit project response": {
                    "value": {
                      "http_status": 409,
                      "message": "Editing project task chain is NOT possible while job is running for project.",
                      "error_code": "cannot_edit_project"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project",
        "description": "Delete a project. Note that a deleted project cannot be recovered.",
        "operationId": "DeleteProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted project",
            "content": {
              "application/json": {
                "examples": {
                  "Project deletion response": {
                    "value": {
                      "result": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Requested project cannot be deleted due to running jobs",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Cannot delete project response": {
                    "value": {
                      "http_status": 409,
                      "message": "Project SAMPLE_NAME is locked for deletion/modification. Please wait until all jobs related to this project are finished or cancel them to allow deletion/modification.",
                      "error_code": "project_locked"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/thumbnail": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Download the thumbnail of a project",
        "description": "Download a project thumbnail with height and width as specified in the request parameters.",
        "operationId": "DownloadProjectThumbnail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested project thumbnail",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "204": {
            "description": "No media in project.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Media not found response": {
                    "value": {
                      "http_status": 204,
                      "message": "No media found.",
                      "error_code": "media_not_found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid scale dimensions": {
                    "value": {
                      "http_status": 400,
                      "message": "'1001' does not match '^([1-9][0-9]{0,2}|1000)$'. This fails to validate 'pattern' in the following schema: (['target_width', 'pattern'])",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets": {
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Create dataset",
        "description": "Create a new dataset in a project. \nAt the moment, the new dataset can be used as a held-out testing dataset via model testing job.",
        "operationId": "CreateDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Dataset name",
                    "minLength": 1
                  }
                }
              },
              "examples": {
                "Create dataset": {
                  "value": {
                    "name": "testing dataset storage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created dataset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Dataset name",
                      "minLength": 1
                    },
                    "use_for_training": {
                      "type": "boolean",
                      "description": "Whether dataset is used for training"
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the dataset"
                    }
                  }
                },
                "examples": {
                  "Dataset created successfully": {
                    "value": {
                      "creation_time": "2022-06-16T09:59:09.635000+00:00",
                      "id": "62aafeed23967484a61caa0a",
                      "name": "testing dataset storage",
                      "use_for_training": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "dataset name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Dataset already exists": {
                    "value": {
                      "http_status": 409,
                      "message": "Dataset with name 'testing dataset storage' already exists.",
                      "error_code": "dataset_already_exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get datasets",
        "tags": [
          "Datasets"
        ],
        "description": "List all the datasets in a project.",
        "operationId": "GetDatasetsInfo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Info of the datasets in project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Dataset name",
                            "minLength": 1
                          },
                          "use_for_training": {
                            "type": "boolean",
                            "description": "Whether dataset is used for training"
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the dataset"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Get datasets in project": {
                    "value": {
                      "datasets": [
                        {
                          "creation_time": "2022-06-16T09:09:33.260000+00:00",
                          "id": "62aaf34d260a2d4cc3011908",
                          "name": "Dataset",
                          "use_for_training": true
                        },
                        {
                          "creation_time": "2022-06-16T09:59:09.635000+00:00",
                          "id": "62aafeed23967484a61caa0a",
                          "name": "testing dataset storage",
                          "use_for_training": false
                        },
                        {
                          "creation_time": "2022-06-16T10:00:57.171000+00:00",
                          "id": "62aaff595f3aa95fe9a787dd",
                          "name": "testing dataset storage - updated",
                          "use_for_training": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get info about dataset",
        "description": "Get information about a dataset in a project.",
        "operationId": "GetDatasetInfo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Info about the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Dataset name",
                      "minLength": 1
                    },
                    "use_for_training": {
                      "type": "boolean",
                      "description": "Whether dataset is used for training"
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the dataset"
                    }
                  }
                },
                "examples": {
                  "Get dataset in project": {
                    "value": {
                      "creation_time": "2022-06-16T09:59:09.635000+00:00",
                      "id": "62aafeed23967484a61caa0a",
                      "name": "testing dataset storage",
                      "use_for_training": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Datasets"
        ],
        "summary": "Update dataset",
        "description": "Edit a dataset, currently limited to dataset renaming.",
        "operationId": "UpdateDatasetInfo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Dataset name",
                    "minLength": 1
                  }
                }
              },
              "examples": {
                "Update dataset name": {
                  "value": {
                    "name": "Updated dataset storage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated info about dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Dataset name",
                      "minLength": 1
                    },
                    "use_for_training": {
                      "type": "boolean",
                      "description": "Whether dataset is used for training"
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the dataset"
                    }
                  }
                },
                "examples": {
                  "Dataset name updated successfully": {
                    "value": {
                      "creation_time": "2022-06-16T10:00:57.171000+00:00",
                      "id": "62aaff595f3aa95fe9a787dd",
                      "name": "Updated dataset storage",
                      "use_for_training": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Dataset with same name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Dataset with same name already exists": {
                    "value": {
                      "http_status": 409,
                      "message": "Dataset with name 'testing dataset storage' already exists.",
                      "error_code": "dataset_already_exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Delete dataset",
        "description": "Delete dataset along with its media and annotations. Note that this operation is not reversible.",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Dataset deleted successfully": {
                    "value": {
                      "result": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/statistics": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get statistics for a dataset",
        "description": "Retrieve the dataset statistics overview, this includes the number of images/videos, number of annotations, and number of objects per label.",
        "operationId": "GetDatasetStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "task_id",
            "description": "Provide the task ID to get the statistics specifically for that task. For example in a task chain project, \nif you are interested only in the statistics of the first task, you need to specify the ID of the first task. \nThe task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint.\n\nIf no task id is provided, the response will contain statistics for all tasks in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics for the requested dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "overview": {
                      "description": "Overview of the dataset statistics",
                      "type": "object",
                      "properties": {
                        "images": {
                          "description": "Number of images in the dataset",
                          "type": "number",
                          "format": "int32"
                        },
                        "videos": {
                          "description": "Number of videos in the dataset",
                          "type": "number",
                          "format": "int32"
                        },
                        "annotated_frames": {
                          "description": "Number of annotated video frames in the dataset",
                          "type": "number",
                          "format": "int32"
                        },
                        "annotated_images": {
                          "description": "Number of annotated images in the dataset",
                          "type": "number",
                          "format": "int32"
                        },
                        "annotated_videos": {
                          "description": "Number of annotated videos in the dataset",
                          "type": "number",
                          "format": "int32"
                        }
                      }
                    },
                    "tasks": {
                      "description": "List with statistics for each task in the project",
                      "type": "array",
                      "items": {
                        "description": "Statistics for the task of interest",
                        "type": "object",
                        "properties": {
                          "annotated_frames": {
                            "description": "Number of annotated frames per task",
                            "type": "number",
                            "format": "int32"
                          },
                          "annotated_images": {
                            "description": "Number of annotated images per task",
                            "type": "number",
                            "format": "int32"
                          },
                          "annotated_videos": {
                            "description": "Number of annotated videos per task",
                            "type": "number",
                            "format": "int32"
                          },
                          "objects_per_label": {
                            "description": "Number of annotated shapes per label",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the label"
                                },
                                "color": {
                                  "type": "string",
                                  "description": "Color of the label"
                                },
                                "value": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Number of annotated shapes for this label"
                                }
                              }
                            }
                          },
                          "object_size_distribution_per_label": {
                            "description": "List with information on object size distribution per label",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "cluster_center": {
                                  "type": "array",
                                  "description": "Mean x/y values of the sizes of the objects",
                                  "items": {
                                    "type": "number",
                                    "format": "int32"
                                  }
                                },
                                "cluster_width_height": {
                                  "type": "array",
                                  "description": "Width/height values for drawing ellipse from cluster center",
                                  "items": {
                                    "type": "number",
                                    "format": "int32"
                                  }
                                },
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "color": {
                                  "type": "string",
                                  "description": "Color of the label"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the label"
                                },
                                "object_distribution_from_aspect_ratio": {
                                  "description": "Information on the distribution of aspect ratios of annotation shapes",
                                  "type": "object",
                                  "properties": {
                                    "balanced": {
                                      "type": "number",
                                      "format": "int32"
                                    },
                                    "tall": {
                                      "type": "number",
                                      "format": "int32"
                                    },
                                    "wide": {
                                      "type": "number",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "size_distribution": {
                                  "description": "Information on the size distribution of annotation shapes. Contains a list of width/height for every object.",
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "description": "Width and height of the object",
                                    "items": {
                                      "type": "number",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "aspect_ratio_threshold_tall": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Aspect ratio threshold for classifying a shape as tall"
                                },
                                "aspect_ratio_threshold_wide": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Aspect ratio threshold for classifying a shape as wide"
                                }
                              }
                            }
                          },
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Project with statistics response": {
                    "value": {
                      "overview": {
                        "images": 5,
                        "videos": 1,
                        "annotated_frames": 5,
                        "annotated_images": 5,
                        "annotated_videos": 1
                      },
                      "tasks": [
                        {
                          "annotated_frames": 5,
                          "annotated_images": 1,
                          "annotated_videos": 1,
                          "objects_per_label": [
                            {
                              "id": "60d31793d5f1fb7e6e3c1a50",
                              "name": "dog",
                              "color": "#ff0000ff",
                              "value": 4
                            }
                          ],
                          "object_size_distribution_per_label": [
                            {
                              "cluster_center": [
                                160,
                                112
                              ],
                              "cluster_width_height": [
                                113,
                                218
                              ],
                              "id": "60d31793d5f1fb7e6e3c1a50",
                              "color": "#ff0000ff",
                              "name": "dog",
                              "object_distribution_from_aspect_ratio": {
                                "balanced": 4,
                                "tall": 0,
                                "wide": 0
                              },
                              "size_distribution": [
                                [
                                  160,
                                  60
                                ],
                                [
                                  160,
                                  60
                                ],
                                [
                                  240,
                                  300
                                ],
                                [
                                  80,
                                  30
                                ]
                              ],
                              "aspect_ratio_threshold_tall": 7,
                              "aspect_ratio_threshold_wide": 0.07
                            }
                          ],
                          "task_id": "60d31793d5f1fb7e6e3c1a5b"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Task not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Task with id 60ec6bbfb98caeb87e34309f could not be found.",
                      "error_code": "task_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media:query": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Retrieve media items with query",
        "description": "Retrieves media in the dataset that fulfill the filter condition. \nThe list of filter fields and their possible operators are shown below.  \nIf a field-operation combination is not supported then the endpoint will respond with the possible operators that are allowed for the filter.\nNote that this endpoint returns images and videos. To retrieve the video frames, use the video id returned by this endpoint and pass it to the \n[video filtering](#Media/FilterVideoFrames) endpoint.\n\n| Filter fields | Supported operations | Value |\n|--------------|----------------------|-------|\n|`media_upload_date`, `annotation_creation_date` | `greater`, `less` | Isodate. Example: `2024-09-26T00:00:00+02:00` |\n|`media_height`, `media_width`, `shape_area_percentage`, `shape_area_pixel`, `media_size`, `video_duration`, `video_frame_rate`, `video_frame_count` | `greater`, `greater_or_equal`, `less`, `less_or_equal`, `equal`, `not_equal` | integer |\n|`media_name` | `equal`, `not_equal`, `contains` | string |\n|`label_id`, `shape_type`, `user_name` | `equal`, `not_equal`, `in`, `not_in` | string (id format) |\n|`annotation_scene_state` | `equal`, `not_equal`, `in` | string (enum: `annotated`, `partially_annotated`, `unannotated`) |\n|`media_type` | `equal`, `not_equal` | string |",
        "operationId": "FilterMedia",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by. ",
            "schema": {
              "type": "string",
              "enum": [
                "media_name",
                "media_upload_date",
                "media_width",
                "media_height",
                "media_size",
                "annotation_creation_date"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rules"
                ],
                "properties": {
                  "condition": {
                    "description": "Condition to apply to group of rules.",
                    "type": "string",
                    "enum": [
                      "and"
                    ]
                  },
                  "rules": {
                    "type": "array",
                    "description": "All the rules to filter a dataset with.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "properties": {
                            "field": {
                              "description": "Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.",
                              "type": "string",
                              "enum": [
                                "media_upload_date",
                                "media_height",
                                "media_width",
                                "media_name",
                                "label_id",
                                "annotation_creation_date",
                                "annotation_scene_state",
                                "shape_type",
                                "shape_area_percentage",
                                "shape_area_pixel",
                                "user_name"
                              ]
                            },
                            "operator": {
                              "description": "Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'",
                              "type": "string",
                              "enum": [
                                "greater",
                                "less",
                                "greater_or_equal",
                                "less_or_equal",
                                "equal",
                                "not_equal",
                                "in",
                                "not_in",
                                "regex"
                              ]
                            },
                            "value": {
                              "description": "Value that the field should match to in combination with the operator",
                              "type": [
                                "array",
                                "string",
                                "integer"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Filtering a dataset": {
                  "value": {
                    "condition": "and",
                    "rules": [
                      {
                        "field": "label_id",
                        "operator": "in",
                        "value": [
                          "id_1",
                          "id_2"
                        ]
                      },
                      {
                        "field": "media_width",
                        "operator": "greater",
                        "value": 10
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Media items matching the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "description": "Upload time of the media file",
                                "type": "string"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene  if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "matched_frames": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "Number of frames in the video that match the filter. Only returned when filtering by annotation properties."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "format": "int32",
                                "description": "The video frame index"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_images": {
                      "type": "integer",
                      "description": "Total images that match the query."
                    },
                    "total_matched_videos": {
                      "type": "integer",
                      "description": "Total videos that match the query."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    },
                    "total_images": {
                      "type": "integer",
                      "description": "Total images in the dataset."
                    },
                    "total_videos": {
                      "type": "integer",
                      "description": "Total videos in the dataset."
                    }
                  }
                },
                "examples": {
                  "Combined media list response": {
                    "value": {
                      "media": [
                        {
                          "id": "613a23866674c43ae7a777aa",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/full ",
                            "height": 331,
                            "width": 584,
                            "size": 128,
                            "extension": ".png"
                          },
                          "name": "dummy_images",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "image",
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "matched_frames": 22
                        }
                      ],
                      "next_page": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media:query?limit=2&skip=4",
                      "total_matched_images": 1,
                      "total_matched_videos": 1,
                      "total_matched_video_frames": 2,
                      "total_images": 48,
                      "total_videos": 7
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Upload an image",
        "description": "Upload an image to a dataset. Allowed formats are `.jpg`, `.jpeg`, `.bmp`, `.png`, `.tif`, `.tiff`, `.jfif`, and `.webp`. Height and\nwidth of the images must be between 32 and 20000 pixels.   \nFor a classification project, the uploaded image can be annotated directly by specifying the labels in the field `upload_info`.   ",
        "operationId": "UploadImage",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to be uploaded."
                  },
                  "upload_info": {
                    "type": "string",
                    "description": "IDs of the labels to apply to the image. Uses the format of a json decodable string.\nThe label id's could be found from the response of the [project detail](#Projects/GetProjectInfo) endpoint. \nExample: *{\\\"label_ids\\\":[\\\"613776cec8223e455a88383d\\\", \\\"613776cec8223e455a88383e\\\"]}*.                  "
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The image has been uploaded. The 'size' field represents bits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Image",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "media_information": {
                      "type": "object",
                      "properties": {
                        "display_url": {
                          "type": "string",
                          "description": "Display URL of the image or video frame"
                        },
                        "height": {
                          "type": "integer",
                          "description": "Height of the image or video frame"
                        },
                        "width": {
                          "type": "integer",
                          "description": "Width of the image or video frame"
                        },
                        "size": {
                          "type": "integer",
                          "description": "Size of the image or video in bytes"
                        },
                        "extension": {
                          "type": "string",
                          "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the image"
                    },
                    "uploader_id": {
                      "type": "string",
                      "description": "ID of the uploader"
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Annotation state of the media for this task",
                            "enum": [
                              "annotated",
                              "partially_annotated",
                              "none",
                              "to_revisit",
                              null
                            ]
                          }
                        }
                      }
                    },
                    "preprocessing": {
                      "description": "Media preprocessing related information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the preprocessing operation",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "FINISHED",
                            "FAILED"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Message associated with the preprocessing operation"
                        }
                      },
                      "required": [
                        "status"
                      ]
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Relative URL to the media thumbnail"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of media. 'image', 'video' or 'video_frame'",
                      "enum": [
                        "image"
                      ]
                    },
                    "upload_time": {
                      "type": "string",
                      "description": "Upload time of the image"
                    }
                  }
                },
                "examples": {
                  "Image upload response": {
                    "value": {
                      "id": "613a23866674c43ae7a777aa",
                      "uploader_id": "user@company.com",
                      "media_information": {
                        "display_url": "/api/v1/projects/60d3549a3e6080a926e5ef12/media/images/613a23866674c43ae7a777aa/display/full",
                        "height": 1213,
                        "width": 2269,
                        "size": 1024,
                        "extension": ".png"
                      },
                      "name": "Course completion",
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ],
                      "thumbnail": "/api/v1/projects/60d3549a3e6080a926e5ef12/media/images/613a23866674c43ae7a777aa/display/thumb",
                      "type": "image",
                      "upload_time": "2021-06-29T17:13:44.719000+00:00"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file provided",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid media response": {
                    "value": {
                      "http_status": 400,
                      "message": "No file provided",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Payload too large response": {
                    "value": {
                      "http_status": 413,
                      "message": "Request too large: exceeding x MB is not allowed.",
                      "error_code": "payload_too_large"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Invalid media",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid media response": {
                    "value": {
                      "http_status": 415,
                      "message": "Could not upload ``. The server was not able to interpret it.",
                      "error_code": "invalid_media"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Get image detail",
        "description": "Retrieves detailed information of an image.",
        "operationId": "GetImageDetail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The detailed info of the requested image. The \"size\" field represents bits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Image",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "media_information": {
                      "type": "object",
                      "properties": {
                        "display_url": {
                          "type": "string",
                          "description": "Display URL of the image or video frame"
                        },
                        "height": {
                          "type": "integer",
                          "description": "Height of the image or video frame"
                        },
                        "width": {
                          "type": "integer",
                          "description": "Width of the image or video frame"
                        },
                        "size": {
                          "type": "integer",
                          "description": "Size of the image or video in bytes"
                        },
                        "extension": {
                          "type": "string",
                          "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the image"
                    },
                    "uploader_id": {
                      "type": "string",
                      "description": "ID of the uploader"
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Annotation state of the media for this task",
                            "enum": [
                              "annotated",
                              "partially_annotated",
                              "none",
                              "to_revisit",
                              null
                            ]
                          }
                        }
                      }
                    },
                    "preprocessing": {
                      "description": "Media preprocessing related information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the preprocessing operation",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "FINISHED",
                            "FAILED"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Message associated with the preprocessing operation"
                        }
                      },
                      "required": [
                        "status"
                      ]
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Relative URL to the media thumbnail"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of media. 'image', 'video' or 'video_frame'",
                      "enum": [
                        "image"
                      ]
                    },
                    "upload_time": {
                      "type": "string",
                      "description": "Upload time of the image"
                    }
                  }
                },
                "examples": {
                  "Get image detail": {
                    "value": {
                      "id": "613a23866674c43ae7a777aa",
                      "uploader_id": "user@company.com",
                      "media_information": {
                        "display_url": "/api/v1/projects/60d3549a3e6080a926e5ef12/media/images/613a23866674c43ae7a777aa/display/full",
                        "height": 1213,
                        "width": 2269,
                        "size": 1024,
                        "extension": ".png"
                      },
                      "name": "Course completion",
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ],
                      "thumbnail": "/api/v1/projects/60d3549a3e6080a926e5ef12/media/images/613a23866674c43ae7a777aa/display/thumb",
                      "type": "image",
                      "upload_time": "2021-06-29T17:13:44.719000+00:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Media"
        ],
        "summary": "Delete an image",
        "description": "Delete an image from a dataset. This operation is not reversible.",
        "operationId": "DeleteAnImage",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The image has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Image deleted successfully": {
                    "value": {
                      "result": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Requested image cannot be deleted due to running jobs connected to this image",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Cannot delete media response": {
                    "value": {
                      "http_status": 409,
                      "message": "Project {name} is locked for deletion/modification. Please wait until all jobs related to this project are finished or cancel them to allow deletion/modification.",
                      "error_code": "project_locked"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/display/full": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download full image",
        "description": "Download the image in the original resolution.",
        "operationId": "DownloadFullImage",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested image",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Internal server error": {
                    "value": {
                      "http_status": 500,
                      "message": "Internal server error",
                      "error_code": "internal_server_error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/display/thumb": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download the thumbnail of an image",
        "description": "Download the thumbnail version of an image.",
        "operationId": "DownloadImageThumbnail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested image thumbnail",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Internal server error": {
                    "value": {
                      "http_status": 500,
                      "message": "Internal server error",
                      "error_code": "internal_server_error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Upload a video",
        "description": "Upload a video to a dataset. Allowed formats are `.mp4`, `.avi`, `.mkv` `.mov`, `.webm` and `.m4v`. The maximum resolution for\nvideos is 8K and the file may not be larger than 4.7 GB. For a classification project, all frames of the uploaded\nvideo can be annotated directly by specifying the labels in the field upload_info. ",
        "operationId": "UploadVideo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The video file to be uploaded."
                  },
                  "upload_info": {
                    "type": "string",
                    "description": "IDs of the labels to apply to the video. Uses the format of a json decodable string. \nThe label id's could be found from the response of the [project detail](#Projects/GetProjectInfo) endpoint. \nLabels are applied to all video frames at 1 fps. \nExample: *{\\\"label_ids\\\":[\\\"613776cec8223e455a88383d\\\", \\\"613776cec8223e455a88383e\\\"]}*. "
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video has been uploaded. The 'size' field represents bits, \"duration\" is in seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "media_information": {
                      "type": "object",
                      "properties": {
                        "display_url": {
                          "type": "string",
                          "description": "Display URL of the image or video"
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Duration of the video"
                        },
                        "frame_count": {
                          "type": "integer",
                          "description": "Number of frames in the video"
                        },
                        "frame_stride": {
                          "type": "integer",
                          "description": "Frame stride of the video"
                        },
                        "frame_rate": {
                          "type": "number",
                          "description": "Frame rate of the video"
                        },
                        "height": {
                          "type": "integer",
                          "description": "Height of the video"
                        },
                        "width": {
                          "type": "integer",
                          "description": "Width of the video"
                        },
                        "size": {
                          "type": "integer",
                          "description": "Size of the video in bytes"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the video"
                    },
                    "uploader_id": {
                      "type": "string",
                      "description": "ID of the uploader"
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Annotation state of the media for this task",
                            "enum": [
                              "annotated",
                              "partially_annotated",
                              "none",
                              "to_revisit",
                              null
                            ]
                          }
                        }
                      }
                    },
                    "annotation_statistics": {
                      "type": "object",
                      "properties": {
                        "annotated": {
                          "type": "integer",
                          "description": "Number of annotated frames within video"
                        },
                        "partially_annotated": {
                          "type": "integer",
                          "description": "Number of partially annotated frames within video"
                        },
                        "unannotated": {
                          "type": "integer",
                          "description": "Number of unannotated frames within video"
                        }
                      }
                    },
                    "preprocessing": {
                      "description": "Media preprocessing related information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the preprocessing operation",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "FINISHED",
                            "FAILED"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Message associated with the preprocessing operation"
                        }
                      },
                      "required": [
                        "status"
                      ]
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Relative URL to the video thumbnail"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of media. 'image', 'video' or 'video_frame'",
                      "enum": [
                        "video"
                      ]
                    },
                    "upload_time": {
                      "type": "string",
                      "description": "Upload time of the video"
                    }
                  }
                },
                "examples": {
                  "Video upload response": {
                    "value": {
                      "id": "60e6b3c3f1decd1e32c24d73",
                      "uploader_id": "user@company.com",
                      "media_information": {
                        "display_url": "/v2/projects/60e57455075ee5535d16ffbc/media/videos/60e6b3c3f1decd1e32c24d73/display/stream",
                        "duration": 1388,
                        "frame_count": 13883,
                        "frame_stride": 10,
                        "frame_rate": 30,
                        "height": 480,
                        "width": 640,
                        "size": 16384,
                        "extension": ".mp4"
                      },
                      "name": "single_video",
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": null
                        }
                      ],
                      "annotation_statistics": {
                        "annotated": 5,
                        "partially_annotated": 3,
                        "unannotated": 142
                      },
                      "thumbnail": "/v2/projects/60e57455075ee5535d16ffbc/media/videos/60e6b3c3f1decd1e32c24d73/display/thumb",
                      "type": "video",
                      "upload_time": "2021-07-08T08:13:55.907000+00:00"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file provided",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid media response": {
                    "value": {
                      "http_status": 400,
                      "message": "No file provided",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Payload too large response": {
                    "value": {
                      "http_status": 413,
                      "message": "Request too large: exceeding x MB is not allowed.",
                      "error_code": "payload_too_large"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Invalid media",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid media response": {
                    "value": {
                      "http_status": 415,
                      "message": "Could not upload ``. The server was not able to interpret it.",
                      "error_code": "invalid_media"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Get video detail",
        "description": "Retrieves the detail of a video.",
        "operationId": "GetVideoDetail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested detailed video info. The 'size' field represents bits, \"duration\" is in seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "media_information": {
                      "type": "object",
                      "properties": {
                        "display_url": {
                          "type": "string",
                          "description": "Display URL of the image or video"
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Duration of the video"
                        },
                        "frame_count": {
                          "type": "integer",
                          "description": "Number of frames in the video"
                        },
                        "frame_stride": {
                          "type": "integer",
                          "description": "Frame stride of the video"
                        },
                        "frame_rate": {
                          "type": "number",
                          "description": "Frame rate of the video"
                        },
                        "height": {
                          "type": "integer",
                          "description": "Height of the video"
                        },
                        "width": {
                          "type": "integer",
                          "description": "Width of the video"
                        },
                        "size": {
                          "type": "integer",
                          "description": "Size of the video in bytes"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the video"
                    },
                    "uploader_id": {
                      "type": "string",
                      "description": "ID of the uploader"
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Annotation state of the media for this task",
                            "enum": [
                              "annotated",
                              "partially_annotated",
                              "none",
                              "to_revisit",
                              null
                            ]
                          }
                        }
                      }
                    },
                    "annotation_statistics": {
                      "type": "object",
                      "properties": {
                        "annotated": {
                          "type": "integer",
                          "description": "Number of annotated frames within video"
                        },
                        "partially_annotated": {
                          "type": "integer",
                          "description": "Number of partially annotated frames within video"
                        },
                        "unannotated": {
                          "type": "integer",
                          "description": "Number of unannotated frames within video"
                        }
                      }
                    },
                    "preprocessing": {
                      "description": "Media preprocessing related information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the preprocessing operation",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "FINISHED",
                            "FAILED"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Message associated with the preprocessing operation"
                        }
                      },
                      "required": [
                        "status"
                      ]
                    },
                    "thumbnail": {
                      "type": "string",
                      "description": "Relative URL to the video thumbnail"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of media. 'image', 'video' or 'video_frame'",
                      "enum": [
                        "video"
                      ]
                    },
                    "upload_time": {
                      "type": "string",
                      "description": "Upload time of the video"
                    }
                  }
                },
                "examples": {
                  "Get image detail": {
                    "value": {
                      "id": "60e6b3c3f1decd1e32c24d73",
                      "uploader_id": "user@company.com",
                      "media_information": {
                        "display_url": "/v2/projects/60e57455075ee5535d16ffbc/media/videos/60e6b3c3f1decd1e32c24d73/display/stream",
                        "duration": 1388,
                        "frame_count": 13883,
                        "frame_stride": 10,
                        "frame_rate": 30,
                        "height": 480,
                        "width": 640,
                        "size": 16384,
                        "extension": ".mp4"
                      },
                      "name": "single_video",
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": null
                        }
                      ],
                      "annotation_statistics": {
                        "annotated": 5,
                        "partially_annotated": 3,
                        "unannotated": 142
                      },
                      "thumbnail": "/v2/projects/60e57455075ee5535d16ffbc/media/videos/60e6b3c3f1decd1e32c24d73/display/thumb",
                      "type": "video",
                      "upload_time": "2021-07-08T08:13:55.907000+00:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Media"
        ],
        "summary": "Delete a video",
        "description": "Delete a video from a dataset. This operation is not reversible.",
        "operationId": "DeleteAVideo",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The video was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Video deleted successfully": {
                    "value": {
                      "result": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Requested video cannot be deleted due to running jobs connected to the video",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Cannot delete media response": {
                    "value": {
                      "http_status": 409,
                      "message": "Project {name} is locked for deletion/modification. Please wait until all jobs related to this project are finished or cancel them to allow deletion/modification.",
                      "error_code": "project_locked"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}:query": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Retrieve specific frames from a video by applying a query on the dataset",
        "description": "Retrieves video frames from a video which fulfill the filter condition. \nThe list of filter fields and their possible operators are shown below.  \nIf a field-operation combination is not supported then the endpoint will respond with the possible operators that are allowed for the filter.\n\n| Filter fields | Supported operations | Value |\n|--------------|----------------------|-------|\n|`annotation_creation_date` | `greater`, `less` | Isodate. Example: `2024-09-26T00:00:00+02:00` |\n|`shape_area_percentage`, `shape_area_pixel` | `greater`, `greater_or_equal`, `less`, `less_or_equal`, `equal`, `not_equal` | integer |\n|`label_id`, `shape_type`, `user_name` | `equal`, `not_equal`, `in`, `not_in` | string (id format) |\n|`annotation_scene_state` | `equal`, `not_equal`, `in` | string (enum: `annotated`, `partially_annotated`, `unannotated`) |",
        "operationId": "FilterVideoFrames",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by. ",
            "schema": {
              "type": "string",
              "enum": [
                "media_name",
                "media_upload_date",
                "media_width",
                "media_height",
                "media_size",
                "annotation_creation_date"
              ]
            }
          },
          {
            "in": "query",
            "name": "include_frame_details",
            "description": "Set to true to include the frame details in the response. Note that this will increase the response size. \nDefault is `false`. ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rules"
                ],
                "properties": {
                  "condition": {
                    "description": "Condition to apply to group of rules.",
                    "type": "string",
                    "enum": [
                      "and"
                    ]
                  },
                  "rules": {
                    "type": "array",
                    "description": "All the rules to filter a dataset with.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "properties": {
                            "field": {
                              "description": "Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.",
                              "type": "string",
                              "enum": [
                                "media_upload_date",
                                "media_height",
                                "media_width",
                                "media_name",
                                "label_id",
                                "annotation_creation_date",
                                "annotation_scene_state",
                                "shape_type",
                                "shape_area_percentage",
                                "shape_area_pixel",
                                "user_name"
                              ]
                            },
                            "operator": {
                              "description": "Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'",
                              "type": "string",
                              "enum": [
                                "greater",
                                "less",
                                "greater_or_equal",
                                "less_or_equal",
                                "equal",
                                "not_equal",
                                "in",
                                "not_in",
                                "regex"
                              ]
                            },
                            "value": {
                              "description": "Value that the field should match to in combination with the operator",
                              "type": [
                                "array",
                                "string",
                                "integer"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Filtering a dataset": {
                  "value": {
                    "condition": "and",
                    "rules": [
                      {
                        "field": "label_id",
                        "operator": "in",
                        "value": [
                          "id_1",
                          "id_2"
                        ]
                      },
                      {
                        "field": "media_width",
                        "operator": "greater",
                        "value": 10
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Frames matching the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "video_frame_indices": {
                      "type": "array",
                      "description": "List of video frame indices",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "video_frames": {
                      "type": "array",
                      "description": "List of video frame items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "format": "int32",
                                "description": "The video frame index"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "video_information": {
                      "type": "object",
                      "properties": {
                        "display_url": {
                          "type": "string",
                          "description": "Display URL of the image or video"
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Duration of the video"
                        },
                        "frame_count": {
                          "type": "integer",
                          "description": "Number of frames in the video"
                        },
                        "frame_stride": {
                          "type": "integer",
                          "description": "Frame stride of the video"
                        },
                        "frame_rate": {
                          "type": "number",
                          "description": "Frame rate of the video"
                        },
                        "height": {
                          "type": "integer",
                          "description": "Height of the video"
                        },
                        "width": {
                          "type": "integer",
                          "description": "Width of the video"
                        },
                        "size": {
                          "type": "integer",
                          "description": "Size of the video in bytes"
                        }
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    }
                  }
                },
                "examples": {
                  "Filtered video frames list response": {
                    "value": {
                      "next_page": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb}/media/videos/62ff4089b2b8cfb7732d03fc:query?limit=100&skip=100",
                      "video_frames": [
                        {
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "60d31793d5f1fb7e6e3c1a4f"
                            }
                          ],
                          "id": 1,
                          "media_information": {
                            "display_url": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/1/display/full",
                            "height": 360,
                            "width": 640
                          },
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5",
                          "name": "video 1_f1",
                          "thumbnail": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/1/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2022-08-19T07:49:29.665000+00:00",
                          "uploader_id": ""
                        },
                        {
                          "annotation_state_per_task": [
                            {
                              "state": "none",
                              "task_id": "60d31793d5f1fb7e6e3c1a4f"
                            }
                          ],
                          "id": 3,
                          "media_information": {
                            "display_url": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/3/display/full",
                            "height": 360,
                            "width": 640
                          },
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5",
                          "name": "video 1_f3",
                          "thumbnail": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/3/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2022-08-19T07:49:29.665000+00:00",
                          "uploader_id": ""
                        }
                      ],
                      "total_matched_video_frames": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/display/stream": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download video stream",
        "description": "Download the video stream in original resolution.",
        "operationId": "DownloadVideoStream",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested video stream",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/display/thumb": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download the thumbnail for a video",
        "description": "Download the thumbnail of a video. \nThe video thumbnail is the downscaled version of a frame from the middle of the video.",
        "operationId": "DownloadVideoThumbnail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested video thumbnail",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid scale dimensions": {
                    "value": {
                      "http_status": 400,
                      "message": "'1001' does not match '^([1-9][0-9]{0,2}|1000)$'. This fails to validate 'pattern' in the following schema: (['target_width', 'pattern'])",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/display/full": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a video frame",
        "description": "Download a video frame in original resolution. ",
        "operationId": "DownloadVideoFrameFull",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "frame_index",
            "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested video",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Negative frame index": {
                    "value": {
                      "http_status": 500,
                      "message": "The requested frame index `-1` is out of bounds.",
                      "error_code": "internal_server_error"
                    }
                  },
                  "Too high frame index": {
                    "value": {
                      "http_status": 500,
                      "message": "The requested frame index `15000` is out of bounds.",
                      "error_code": "internal_server_error"
                    }
                  },
                  "Frame index is not an integer": {
                    "value": {
                      "http_status": 500,
                      "message": "Invalid literal for int() with base 10 'abc'",
                      "error_code": "internal_server_error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/display/thumb": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a thumbnail for a video frame",
        "description": "Download a video frame thumbnail.",
        "operationId": "DownloadVideoFrameThumbnail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "frame_index",
            "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested video frame thumbnail",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Negative frame index": {
                    "value": {
                      "http_status": 500,
                      "message": "The requested frame index `-1` is out of bounds.",
                      "error_code": "internal_server_error"
                    }
                  },
                  "Too high frame index": {
                    "value": {
                      "http_status": 500,
                      "message": "The requested frame index `15000` is out of bounds.",
                      "error_code": "internal_server_error"
                    }
                  },
                  "Frame index is not an integer": {
                    "value": {
                      "http_status": 500,
                      "message": "Invalid literal for int() with base 10 'abc'",
                      "error_code": "internal_server_error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/annotations": {
      "post": {
        "tags": [
          "Annotations"
        ],
        "summary": "Create an annotation for an image",
        "description": "Create a user annotation for an image. The user annotation scene contains multiple annotations, each of which is defined by a geometric shape and a\nlist of labels for that shape. The shape is defined in pixels.",
        "operationId": "CreateImageAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "annotations"
                ],
                "properties": {
                  "annotations": {
                    "description": "List of annotations",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "shape",
                        "labels"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                          "description": "A UUID, used to identify an annotation."
                        },
                        "shape": {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Rectangle",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "RECTANGLE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "y": {
                                  "type": "number",
                                  "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the rectangle. Coordinates are pixel values.",
                                  "minimum": 1
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the rectangle. Coordinates are pixel values.",
                                  "minimum": 1
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height"
                              ],
                              "example": {
                                "type": "RECTANGLE",
                                "x": 320,
                                "y": 240,
                                "width": 50,
                                "height": 25
                              }
                            },
                            {
                              "type": "object",
                              "title": "Polygon",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "POLYGON"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "points": {
                                  "type": "array",
                                  "maxItems": 5000,
                                  "description": "Array of points that define the polygon.",
                                  "items": {
                                    "title": "Point",
                                    "type": "object",
                                    "properties": {
                                      "x": {
                                        "type": "number",
                                        "description": "x-coordinate of the point. Coordinates are pixel values.",
                                        "minimum": 0
                                      },
                                      "y": {
                                        "type": "number",
                                        "description": "y-coordinate of the point. Coordinates are pixel values.",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "x",
                                      "y"
                                    ],
                                    "example": {
                                      "x": 10,
                                      "y": 10
                                    }
                                  }
                                }
                              },
                              "required": [
                                "type",
                                "points"
                              ],
                              "example": {
                                "type": "POLYGON",
                                "point": [
                                  {
                                    "x": 10,
                                    "y": 10
                                  },
                                  {
                                    "x": 20,
                                    "y": 20
                                  },
                                  {
                                    "x": 10,
                                    "y": 20
                                  }
                                ]
                              }
                            },
                            {
                              "type": "object",
                              "title": "Ellipse",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ELLIPSE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the ellipse. Coordinates are pixel values.",
                                  "minimum": 1
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the ellipse. Coordinates are pixel values.",
                                  "minimum": 1
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height"
                              ],
                              "example": {
                                "type": "ELLIPSE",
                                "x": 300,
                                "y": 250,
                                "width": 75,
                                "height": 25
                              }
                            },
                            {
                              "type": "object",
                              "title": "Rotated Rectangle",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ROTATED_RECTANGLE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                },
                                "angle": {
                                  "type": "number",
                                  "description": "Clockwise angle in degrees for the rectangle."
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height",
                                "angle"
                              ],
                              "example": {
                                "type": "ROTATED_RECTANGLE",
                                "x": 320,
                                "y": 240,
                                "width": 50,
                                "height": 25,
                                "angle": 45
                              }
                            },
                            {
                              "type": "object",
                              "title": "Keypoint",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "KEYPOINT"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "is_visible": {
                                  "type": "boolean",
                                  "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "is_visible"
                              ],
                              "example": {
                                "type": "KEYPOINT",
                                "x": 320,
                                "y": 240,
                                "is_visible": true
                              }
                            }
                          ]
                        },
                        "labels": {
                          "description": "List of labels",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          }
                        },
                        "labels_to_revisit": {
                          "description": "List of labels IDs for which the annotation should be revisited",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          }
                        }
                      }
                    }
                  },
                  "media_identifier": {
                    "type": "object",
                    "properties": {
                      "image_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "image"
                        ],
                        "description": "Type of media. 'image' for images, 'video' for videos."
                      }
                    }
                  },
                  "modified": {
                    "type": "string",
                    "description": "Modification date"
                  },
                  "labels_to_revisit_full_scene": {
                    "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                      "description": "A UUID, used to identify an annotation."
                    }
                  }
                }
              },
              "examples": {
                "Classification (or anomaly) annotation": {
                  "description": "For tasks that do not depend on the geometric shape of the annotations, such as classification or anomaly tasks, the annotations are defined \nin a specific way, depending on the project. In a single-task project, the annotations will contain a single rectangle shape covering the full image. \nWhile in task chain, the classification labels are attached to the geometric shape of the preceding task. ",
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 0,
                          "y": 0,
                          "width": 450,
                          "height": 555
                        },
                        "labels": [
                          {
                            "id": "6654959a78e859591bd3e3b9"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Detection annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 1180,
                          "y": 322,
                          "width": 100,
                          "height": 154
                        },
                        "labels": [
                          {
                            "id": "4f071a3ba4bd8a48c74a6464"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Rotated detection annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "ROTATED_RECTANGLE",
                          "angle": 288.1729051090551,
                          "x": 1694.3405,
                          "y": 2036.2685,
                          "width": 618.6341,
                          "height": 1457.5136
                        },
                        "labels": [
                          {
                            "id": "664e000ac0abcbbabf5e06b5"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Segmentation annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "ELLIPSE",
                          "x": 1949,
                          "y": 970,
                          "width": 40,
                          "height": 40
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      },
                      {
                        "shape": {
                          "type": "POLYGON",
                          "points": [
                            {
                              "x": 2433,
                              "y": 1044
                            },
                            {
                              "x": 2456,
                              "y": 1044
                            },
                            {
                              "x": 2464,
                              "y": 1051
                            },
                            {
                              "x": 2464,
                              "y": 1059
                            },
                            {
                              "x": 2456,
                              "y": 1059
                            },
                            {
                              "x": 2456,
                              "y": 1082
                            },
                            {
                              "x": 2448,
                              "y": 1082
                            },
                            {
                              "x": 2448,
                              "y": 1104
                            },
                            {
                              "x": 2410,
                              "y": 1104
                            },
                            {
                              "x": 2403,
                              "y": 1097
                            },
                            {
                              "x": 2395,
                              "y": 1097
                            },
                            {
                              "x": 2380,
                              "y": 1051
                            },
                            {
                              "x": 2380,
                              "y": 1036
                            },
                            {
                              "x": 2395,
                              "y": 1036
                            }
                          ]
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      },
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 2258,
                          "y": 1333,
                          "width": 69,
                          "height": 76
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Annotation successfully uploaded for image",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of annotations",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction",
                        "annotation"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "image_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "image"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "labels_to_revisit_full_scene": {
                      "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                        "description": "A UUID, used to identify an annotation."
                      }
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Annotation state aggregated per task",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                            "enum": [
                              "to_revisit",
                              "annotated",
                              "partially_annotated",
                              "none",
                              null
                            ]
                          }
                        },
                        "example": {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "kind",
                    "media_identifier",
                    "modified",
                    "annotations",
                    "labels_to_revisit_full_scene",
                    "annotation_state_per_task"
                  ]
                },
                "examples": {
                  "Successfully created": {
                    "value": {
                      "annotations": [
                        {
                          "id": "6b3b8453-92a2-41ef-9725-63badb218504",
                          "labels": [
                            {
                              "color": "#26518eff",
                              "id": "61387685df33ae8280c33d9d",
                              "name": "test",
                              "probability": 1,
                              "source": {
                                "user_id": "default_user",
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "labels_to_revisit": [
                            "61387685df33ae8280c33d9d",
                            "61387685df33ae8280c33d9e"
                          ],
                          "modified": "2021-09-08T12:43:22.265000+00:00",
                          "shape": {
                            "height": 20,
                            "type": "RECTANGLE",
                            "width": 20,
                            "x": 100,
                            "y": 100
                          }
                        }
                      ],
                      "id": "6138afea3b7b11505c43f2c0",
                      "kind": "annotation",
                      "media_identifier": {
                        "image_id": "6138af293b7b11505c43f2bc",
                        "type": "image"
                      },
                      "modified": "2021-09-08T12:43:22.290000+00:00",
                      "labels_to_revisit_full_scene": [
                        "61387685df33ae8280c33d9d"
                      ],
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Annotation is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/annotations/{annotation_id}": {
      "get": {
        "tags": [
          "Annotations"
        ],
        "summary": "Get annotations from an image",
        "description": "Get the user annotation of an image.",
        "operationId": "GetImageAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "annotation_id",
            "style": "simple",
            "description": "Set to `latest` to fetch the latest annotations. \nThis parameter can also be set to the ID of a specific annotation. For example, the specific ID could be obtained \nfrom the [training revision](#Training%20dataset%20versions/GetMediaForDataset) response, \nwhere the response includes the specific user annotation for a media that is used for training.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "latest"
                  ]
                }
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "label_only",
            "style": "form",
            "description": "Set to `true` to return the annotations without the geometric shapes. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of annotations",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction",
                        "annotation"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "image_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "image"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "labels_to_revisit_full_scene": {
                      "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                        "description": "A UUID, used to identify an annotation."
                      }
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Annotation state aggregated per task",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                            "enum": [
                              "to_revisit",
                              "annotated",
                              "partially_annotated",
                              "none",
                              null
                            ]
                          }
                        },
                        "example": {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "kind",
                    "media_identifier",
                    "modified",
                    "annotations",
                    "labels_to_revisit_full_scene",
                    "annotation_state_per_task"
                  ]
                },
                "examples": {
                  "Image annotation response": {
                    "value": {
                      "annotations": [
                        {
                          "id": "6b3b8453-92a2-41ef-9725-63badb218504",
                          "labels": [
                            {
                              "color": "#26518eff",
                              "id": "61387685df33ae8280c33d9d",
                              "name": "test",
                              "probability": 1,
                              "source": {
                                "user_id": "default_user",
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "labels_to_revisit": [
                            "61387685df33ae8280c33d9d",
                            "61387685df33ae8280c33d9e"
                          ],
                          "modified": "2021-09-08T12:43:22.265000+00:00",
                          "shape": {
                            "height": 20,
                            "type": "RECTANGLE",
                            "width": 20,
                            "x": 100,
                            "y": 100
                          }
                        }
                      ],
                      "id": "6138afea3b7b11505c43f2c0",
                      "kind": "annotation",
                      "media_identifier": {
                        "image_id": "6138af293b7b11505c43f2bc",
                        "type": "image"
                      },
                      "modified": "2021-09-08T12:43:22.290000+00:00",
                      "labels_to_revisit_full_scene": [
                        "61387685df33ae8280c33d9d"
                      ],
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "The latest annotation could not be found or does not exist for the requested image.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Annotation not found response": {
                    "value": {
                      "http_status": 204,
                      "message": "Annotations for image with id {media_id} could not be found.",
                      "error_code": "annotation_not_found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  },
                  "Annotation Scene not found response": {
                    "description": "The annotation scene does not belong to the image, or it could not be found.",
                    "value": {
                      "http_status": 404,
                      "message": "Annotation scene with id 60ec6bbfb98caeb87e34306f could not be found.",
                      "error_code": "annotation_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/annotations": {
      "post": {
        "tags": [
          "Annotations"
        ],
        "summary": "Create an annotation for a video frame",
        "description": "Create a user annotation for a video frame. The user annotation scene contains multiple annotations, each of which is defined by a geometric shape and a\nlist of labels for that shape. The shape is defined in pixels.",
        "operationId": "CreateVideoFrameAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "frame_index",
            "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "annotations"
                ],
                "properties": {
                  "annotations": {
                    "description": "List of annotations",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "shape",
                        "labels"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                          "description": "A UUID, used to identify an annotation."
                        },
                        "shape": {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Rectangle",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "RECTANGLE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "y": {
                                  "type": "number",
                                  "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the rectangle. Coordinates are pixel values.",
                                  "minimum": 1
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the rectangle. Coordinates are pixel values.",
                                  "minimum": 1
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height"
                              ],
                              "example": {
                                "type": "RECTANGLE",
                                "x": 320,
                                "y": 240,
                                "width": 50,
                                "height": 25
                              }
                            },
                            {
                              "type": "object",
                              "title": "Polygon",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "POLYGON"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "points": {
                                  "type": "array",
                                  "maxItems": 5000,
                                  "description": "Array of points that define the polygon.",
                                  "items": {
                                    "title": "Point",
                                    "type": "object",
                                    "properties": {
                                      "x": {
                                        "type": "number",
                                        "description": "x-coordinate of the point. Coordinates are pixel values.",
                                        "minimum": 0
                                      },
                                      "y": {
                                        "type": "number",
                                        "description": "y-coordinate of the point. Coordinates are pixel values.",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "x",
                                      "y"
                                    ],
                                    "example": {
                                      "x": 10,
                                      "y": 10
                                    }
                                  }
                                }
                              },
                              "required": [
                                "type",
                                "points"
                              ],
                              "example": {
                                "type": "POLYGON",
                                "point": [
                                  {
                                    "x": 10,
                                    "y": 10
                                  },
                                  {
                                    "x": 20,
                                    "y": 20
                                  },
                                  {
                                    "x": 10,
                                    "y": 20
                                  }
                                ]
                              }
                            },
                            {
                              "type": "object",
                              "title": "Ellipse",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ELLIPSE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the ellipse. Coordinates are pixel values.",
                                  "minimum": 1
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the ellipse. Coordinates are pixel values.",
                                  "minimum": 1
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height"
                              ],
                              "example": {
                                "type": "ELLIPSE",
                                "x": 300,
                                "y": 250,
                                "width": 75,
                                "height": 25
                              }
                            },
                            {
                              "type": "object",
                              "title": "Rotated Rectangle",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ROTATED_RECTANGLE"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                },
                                "width": {
                                  "type": "number",
                                  "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                },
                                "height": {
                                  "type": "number",
                                  "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                },
                                "angle": {
                                  "type": "number",
                                  "description": "Clockwise angle in degrees for the rectangle."
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "width",
                                "height",
                                "angle"
                              ],
                              "example": {
                                "type": "ROTATED_RECTANGLE",
                                "x": 320,
                                "y": 240,
                                "width": 50,
                                "height": 25,
                                "angle": 45
                              }
                            },
                            {
                              "type": "object",
                              "title": "Keypoint",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "KEYPOINT"
                                  ],
                                  "description": "Type of the shape."
                                },
                                "x": {
                                  "type": "number",
                                  "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "y": {
                                  "type": "number",
                                  "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                  "minimum": 0
                                },
                                "is_visible": {
                                  "type": "boolean",
                                  "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "is_visible"
                              ],
                              "example": {
                                "type": "KEYPOINT",
                                "x": 320,
                                "y": 240,
                                "is_visible": true
                              }
                            }
                          ]
                        },
                        "labels": {
                          "description": "List of labels",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          }
                        },
                        "labels_to_revisit": {
                          "description": "List of labels IDs for which the annotation should be revisited",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          }
                        }
                      }
                    }
                  },
                  "media_identifier": {
                    "type": "object",
                    "properties": {
                      "frame_index": {
                        "type": "number",
                        "format": "int32"
                      },
                      "video_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "video_frame"
                        ],
                        "description": "Type of media. 'image' for images, 'video' for videos."
                      }
                    }
                  },
                  "modified": {
                    "type": "string",
                    "description": "Modification date"
                  },
                  "labels_to_revisit_full_scene": {
                    "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                      "description": "A UUID, used to identify an annotation."
                    }
                  }
                }
              },
              "examples": {
                "Classification (or anomaly) annotation": {
                  "description": "For tasks that do not depend on the geometric shape of the annotations, such as classification or anomaly tasks, the annotations are defined \nin a specific way, depending on the project. In a single-task project, the annotations will contain a single rectangle shape covering the full image. \nWhile in task chain, the classification labels are attached to the geometric shape of the preceding task. ",
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 0,
                          "y": 0,
                          "width": 450,
                          "height": 555
                        },
                        "labels": [
                          {
                            "id": "6654959a78e859591bd3e3b9"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Detection annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 1180,
                          "y": 322,
                          "width": 100,
                          "height": 154
                        },
                        "labels": [
                          {
                            "id": "4f071a3ba4bd8a48c74a6464"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Rotated detection annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "ROTATED_RECTANGLE",
                          "angle": 288.1729051090551,
                          "x": 1694.3405,
                          "y": 2036.2685,
                          "width": 618.6341,
                          "height": 1457.5136
                        },
                        "labels": [
                          {
                            "id": "664e000ac0abcbbabf5e06b5"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Segmentation annotation": {
                  "value": {
                    "annotations": [
                      {
                        "shape": {
                          "type": "ELLIPSE",
                          "x": 1949,
                          "y": 970,
                          "width": 40,
                          "height": 40
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      },
                      {
                        "shape": {
                          "type": "POLYGON",
                          "points": [
                            {
                              "x": 2433,
                              "y": 1044
                            },
                            {
                              "x": 2456,
                              "y": 1044
                            },
                            {
                              "x": 2464,
                              "y": 1051
                            },
                            {
                              "x": 2464,
                              "y": 1059
                            },
                            {
                              "x": 2456,
                              "y": 1059
                            },
                            {
                              "x": 2456,
                              "y": 1082
                            },
                            {
                              "x": 2448,
                              "y": 1082
                            },
                            {
                              "x": 2448,
                              "y": 1104
                            },
                            {
                              "x": 2410,
                              "y": 1104
                            },
                            {
                              "x": 2403,
                              "y": 1097
                            },
                            {
                              "x": 2395,
                              "y": 1097
                            },
                            {
                              "x": 2380,
                              "y": 1051
                            },
                            {
                              "x": 2380,
                              "y": 1036
                            },
                            {
                              "x": 2395,
                              "y": 1036
                            }
                          ]
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      },
                      {
                        "shape": {
                          "type": "RECTANGLE",
                          "x": 2258,
                          "y": 1333,
                          "width": 69,
                          "height": 76
                        },
                        "labels": [
                          {
                            "id": "66bb0fbffc8c4f015ac5de6b"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Annotation successfully uploaded for a video frame",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of annotations",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction",
                        "annotation"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "frame_index": {
                          "type": "integer"
                        },
                        "video_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "video_frame"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "labels_to_revisit_full_scene": {
                      "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                        "description": "A UUID, used to identify an annotation."
                      }
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Annotation state aggregated per task",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                            "enum": [
                              "to_revisit",
                              "annotated",
                              "partially_annotated",
                              "none",
                              null
                            ]
                          }
                        },
                        "example": {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Successfully created": {
                    "value": {
                      "annotations": [
                        {
                          "id": "5d33413a-bf99-4af7-bebb-e30d0c6cfc9f",
                          "labels": [
                            {
                              "color": "#00c3ffff",
                              "id": "610a9065a0d4fbb541cac729",
                              "name": "test1",
                              "probability": 1,
                              "source": {
                                "user_id": "default_user",
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "labels_to_revisit": [
                            "610a9065a0d4fbb541cac729"
                          ],
                          "modified": "2021-08-04T13:06:47.056000+00:00",
                          "shape": {
                            "height": 20,
                            "type": "ELLIPSE",
                            "width": 20,
                            "x": 10,
                            "y": 10
                          }
                        }
                      ],
                      "id": "610a90e7a0d4fbb541cac7b0",
                      "kind": "annotation",
                      "media_identifier": {
                        "frame_index": 420,
                        "type": "video_frame",
                        "video_id": "610a908ea0d4fbb541cac741"
                      },
                      "modified": "2021-08-04T13:06:47.056000+00:00",
                      "labels_to_revisit_full_scene": [
                        "610a9065a0d4fbb541cac729"
                      ],
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Annotation is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/annotations/{annotation_id}": {
      "get": {
        "tags": [
          "Annotations"
        ],
        "summary": "Get annotations from a video frame",
        "description": "Get the user annotation of a video frame.",
        "operationId": "GetVideoFrameAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "frame_index",
            "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "annotation_id",
            "style": "simple",
            "description": "Set to `latest` to fetch the latest annotations. \nThis parameter can also be set to the ID of a specific annotation. For example, the specific ID could be obtained \nfrom the [training revision](#Training%20dataset%20versions/GetMediaForDataset) response, \nwhere the response includes the specific user annotation for a media that is used for training.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "latest"
                  ]
                }
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "label_only",
            "style": "form",
            "description": "Set to `true` to return the annotations without the geometric shapes. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of annotations",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction",
                        "annotation"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "frame_index": {
                          "type": "integer"
                        },
                        "video_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "video_frame"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "labels_to_revisit_full_scene": {
                      "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                        "description": "A UUID, used to identify an annotation."
                      }
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Annotation state aggregated per task",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                            "enum": [
                              "to_revisit",
                              "annotated",
                              "partially_annotated",
                              "none",
                              null
                            ]
                          }
                        },
                        "example": {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Video frame annotation response": {
                    "value": {
                      "annotations": [
                        {
                          "id": "5d33413a-bf99-4af7-bebb-e30d0c6cfc9f",
                          "labels": [
                            {
                              "color": "#00c3ffff",
                              "id": "610a9065a0d4fbb541cac729",
                              "name": "test1",
                              "probability": 1,
                              "source": {
                                "user_id": "default_user",
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "labels_to_revisit": [
                            "610a9065a0d4fbb541cac729"
                          ],
                          "modified": "2021-08-04T13:06:47.056000+00:00",
                          "shape": {
                            "height": 20,
                            "type": "ELLIPSE",
                            "width": 20,
                            "x": 10,
                            "y": 10
                          }
                        }
                      ],
                      "id": "610a90e7a0d4fbb541cac7b0",
                      "kind": "annotation",
                      "media_identifier": {
                        "frame_index": 420,
                        "type": "video_frame",
                        "video_id": "610a908ea0d4fbb541cac741"
                      },
                      "modified": "2021-08-04T13:06:47.056000+00:00",
                      "labels_to_revisit_full_scene": [
                        "610a9065a0d4fbb541cac729"
                      ],
                      "annotation_state_per_task": [
                        {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "The latest annotation could not be found or does not exist for the requested video frame.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Annotation not found response": {
                    "value": {
                      "http_status": 204,
                      "message": "Annotations for image with id {media_id} could not be found.",
                      "error_code": "annotation_not_found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  },
                  "Annotation Scene not found response": {
                    "description": "The annotation scene does not belong to the video frame, or it could not be found.",
                    "value": {
                      "http_status": 404,
                      "message": "Annotation scene with id 60ec6bbfb98caeb87e34306f could not be found.",
                      "error_code": "annotation_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/range_annotation": {
      "get": {
        "tags": [
          "Annotations"
        ],
        "summary": "Get the video annotation range",
        "description": "Get the labels per frame range for a video. A frame range is a range from a start to end frame combined\nwith labels. The start and end frame are inclusive.",
        "operationId": "GetVideoAnnotationRange",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation range successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "range_labels"
                  ],
                  "properties": {
                    "video_id": {
                      "type": "string",
                      "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                      "description": "A UUID, used to identify an annotation."
                    },
                    "range_labels": {
                      "description": "List of range labels",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "start_frame",
                          "end_frame",
                          "label_ids"
                        ],
                        "properties": {
                          "start_frame": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Frame index that represents the left endpoint (inclusive) of the range"
                          },
                          "end_frame": {
                            "type": "integer",
                            "description": "Frame index that represents the right endpoint (inclusive) of the range"
                          },
                          "label_ids": {
                            "description": "ids of the labels assigned to the range",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Video annotation range response": {
                    "value": {
                      "video_id": "60d31793d5f1fb7e6e3c1a5f",
                      "range_labels": [
                        {
                          "start_frame": 0,
                          "end_frame": 1,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5e"
                          ]
                        },
                        {
                          "start_frame": 2,
                          "end_frame": 22,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5a",
                            "60d31793d5f1fb7e6e3c1a5b"
                          ]
                        },
                        {
                          "start_frame": 23,
                          "end_frame": 29,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5c"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Annotations"
        ],
        "summary": "Create a video annotation range",
        "description": "Create a video annotation range for a video. The request body should contain the full list of \nframe ranges along with the ids of the labels associated with those ranges. Any previously submitted annotation range\nfor the same video is overridden by the new request; moreover, any interval of frames that is not explicitly specified \nin the request is marked as unannotated.",
        "operationId": "CreateVideoAnnotationRange",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "skip_frame",
            "style": "form",
            "description": "Number indicating for how many frames in the video an annotation should be uploaded. A value of 1 means every frame is annotated while a value of 10 means every 10th frame gets an annotation. If nothing is passed, it defaults to the video fps.",
            "schema": {
              "type": "string",
              "example": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "range_labels"
                ],
                "properties": {
                  "range_labels": {
                    "description": "List of frame ranges and their associated labels",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "start_frame",
                        "end_frame",
                        "label_ids"
                      ],
                      "properties": {
                        "start_frame": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Frame index that represents the left endpoint (inclusive) of the range"
                        },
                        "end_frame": {
                          "type": "integer",
                          "description": "Frame index that represents the right endpoint (inclusive) of the range"
                        },
                        "label_ids": {
                          "description": "ids of the labels to assign to the range",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Annotate some ranges of frames": {
                  "value": {
                    "range_labels": [
                      {
                        "start_frame": 0,
                        "end_frame": 7,
                        "label_ids": [
                          "a"
                        ]
                      },
                      {
                        "start_frame": 8,
                        "end_frame": 10,
                        "label_ids": [
                          "a",
                          "b"
                        ]
                      },
                      {
                        "start_frame": 11,
                        "end_frame": 12,
                        "label_ids": [
                          "a",
                          "b",
                          "c"
                        ]
                      },
                      {
                        "start_frame": 13,
                        "end_frame": 76,
                        "label_ids": [
                          "b",
                          "c"
                        ]
                      },
                      {
                        "start_frame": 77,
                        "end_frame": 77,
                        "label_ids": [
                          "b"
                        ]
                      },
                      {
                        "start_frame": 95,
                        "end_frame": 100,
                        "label_ids": [
                          "b"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Annotation range successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "range_labels"
                  ],
                  "properties": {
                    "video_id": {
                      "type": "string",
                      "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                      "description": "A UUID, used to identify an annotation."
                    },
                    "range_labels": {
                      "description": "List of range labels",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "start_frame",
                          "end_frame",
                          "label_ids"
                        ],
                        "properties": {
                          "start_frame": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Frame index that represents the left endpoint (inclusive) of the range"
                          },
                          "end_frame": {
                            "type": "integer",
                            "description": "Frame index that represents the right endpoint (inclusive) of the range"
                          },
                          "label_ids": {
                            "description": "ids of the labels assigned to the range",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Annotation range created": {
                    "value": {
                      "video_id": "60d31793d5f1fb7e6e3c1a5f",
                      "range_labels": [
                        {
                          "start_frame": 0,
                          "end_frame": 1,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5e"
                          ]
                        },
                        {
                          "start_frame": 2,
                          "end_frame": 22,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5a",
                            "60d31793d5f1fb7e6e3c1a5b"
                          ]
                        },
                        {
                          "start_frame": 23,
                          "end_frame": 29,
                          "label_ids": [
                            "60d31793d5f1fb7e6e3c1a5c"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Annotation range is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Video not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  },
                  "Label not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find label with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "label_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/annotations/latest": {
      "get": {
        "tags": [
          "Annotations"
        ],
        "summary": "Get the annotations from a video",
        "description": "Get the user annotations for the video frames in a video.",
        "operationId": "GetVideoAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "label_only",
            "style": "form",
            "description": "Set to `true` to return the annotations without the geometric shapes. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "start_frame",
            "style": "form",
            "description": "The starting index of the range of interest. This is a 0-based inclusive index, meaning to include the first frame of the video, \nthis parameter should be set to `0`. The value cannot be bigger than `frame_count-1`. \nThe `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_frame",
            "style": "form",
            "description": ":- The ending index of the range of interest. This is a 0-based inclusive index, meaning to include the last frame of the video, this parameter should be set to `frame_count-1`; the value cannot be bigger than `frame_count-1`. The `frame_count` is the total number of frames contained in the video and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": false
          },
          {
            "in": "query",
            "name": "frameskip",
            "style": "form",
            "description": "Set to the number of desired frame intervals in the response. For example, to retrieve all frame annotations of the video, set this value to `1`. \nIf not set, this value will be equal to the video fps. The video fps can be obtained from the response of the [video detail](#Media/GetVideoDetail) \nendpoint.   ",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Annotations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of annotations",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction",
                        "annotation"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "frame_index": {
                          "type": "integer"
                        },
                        "video_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "video_frame"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "labels_to_revisit_full_scene": {
                      "description": "List of labels IDs for which the scene (full-image ROI) should be revisited",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                        "description": "A UUID, used to identify an annotation."
                      }
                    },
                    "annotation_state_per_task": {
                      "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Annotation state aggregated per task",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "state": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                            "enum": [
                              "to_revisit",
                              "annotated",
                              "partially_annotated",
                              "none",
                              null
                            ]
                          }
                        },
                        "example": {
                          "task_id": "61012cdb1d38a5e71ef3bafd",
                          "state": "to_revisit"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Video annotations response": {
                    "value": {
                      "video_annotations": [
                        {
                          "annotations": [
                            {
                              "id": "61df0314-9851-4fc9-8858-aaab8f0508c2",
                              "labels": [
                                {
                                  "color": "#26518eff",
                                  "id": "61387685df33ae8280c33d9d",
                                  "name": "test",
                                  "probability": 1,
                                  "source": {
                                    "user_id": "default_user",
                                    "model_id": "61387685df33ae8280c347b2",
                                    "model_storage_id": "62387685df33ae8280c63a34"
                                  }
                                }
                              ],
                              "labels_to_revisit": [],
                              "modified": "2021-09-08T13:40:44.445000+00:00",
                              "shape": {
                                "height": 20,
                                "type": "ELLIPSE",
                                "width": 20,
                                "x": 100,
                                "y": 100
                              }
                            }
                          ],
                          "id": "6138bd5c3b7b11505c43f2c3",
                          "kind": "annotation",
                          "media_identifier": {
                            "frame_index": 630,
                            "type": "video_frame",
                            "video_id": "6138bca43b7b11505c43f2c1"
                          },
                          "modified": "2021-09-08T13:40:44.448000+00:00",
                          "labels_to_revisit_full_scene": [],
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "annotated"
                            }
                          ]
                        },
                        {
                          "annotations": [
                            {
                              "id": "5d33413a-bf99-4af7-bebb-e30d0c6cfc9f",
                              "labels": [
                                {
                                  "color": "#26518eff",
                                  "id": "61387685df33ae8280c33d9d",
                                  "name": "test",
                                  "probability": 1,
                                  "source": {
                                    "user_id": "default_user",
                                    "model_id": "61387685df33ae8280c347b2",
                                    "model_storage_id": "62387685df33ae8280c63a34"
                                  }
                                }
                              ],
                              "labels_to_revisit": [
                                "61387685df33ae8280c33d9d",
                                "61387685df33ae8280c33d9e"
                              ],
                              "modified": "2021-09-08T13:39:49.650000+00:00",
                              "shape": {
                                "type": "RECTANGLE",
                                "x": 100,
                                "y": 100,
                                "width": 20,
                                "height": 20
                              }
                            }
                          ],
                          "id": "6138bd253b7b11505c43f2c2",
                          "kind": "annotation",
                          "media_identifier": {
                            "frame_index": 240,
                            "type": "video_frame",
                            "video_id": "6138bca43b7b11505c43f2c1"
                          },
                          "modified": "2021-09-08T13:39:49.653000+00:00",
                          "labels_to_revisit_full_scene": [
                            "61387685df33ae8280c33d9d"
                          ],
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ]
                        }
                      ],
                      "video_annotation_properties": {
                        "total_count": 2,
                        "start_frame": 0,
                        "end_frame": 630,
                        "total_requested_count": 2,
                        "requested_start_frame": 0,
                        "requested_end_frame": 1000
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "Annotation could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Annotation not found response": {
                    "value": {
                      "http_status": 204,
                      "message": "Annotations for image with id {media_id} could not be found.",
                      "error_code": "annotation_not_found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/supported_algorithms": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get supported algorithms",
        "description": "List the algorithms (model architectures) supported for the tasks within a project.",
        "operationId": "GetSupportedAlgorithms",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_obsolete",
            "description": "Whether to include obsolete algorithms in the response.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported algorithms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supported_algorithms": {
                      "type": "array",
                      "description": "List of supported algorithms",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the algorithm"
                          },
                          "task_type": {
                            "type": "string",
                            "enum": [
                              "detection",
                              "rotated_detection",
                              "anomaly",
                              "segmentation",
                              "instance_segmentation",
                              "classification",
                              "keypoint_detection"
                            ],
                            "description": "Task type of the algorithm."
                          },
                          "model_size": {
                            "type": "number",
                            "format": "float",
                            "description": "Storage size of the model, in MB"
                          },
                          "model_template_id": {
                            "type": "string",
                            "description": "Unique identifier for the algorithm"
                          },
                          "gigaflops": {
                            "type": "number",
                            "format": "float",
                            "description": "Theoretical complexity of the model, in billions of operations"
                          },
                          "summary": {
                            "type": "string",
                            "description": "A short summary that gives information about the algorithm"
                          },
                          "supports_auto_hpo": {
                            "type": "boolean",
                            "description": "Boolean that indicates whether the algorithm supports automatic hyper parameter optimization.\nThis field is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "default_algorithm": {
                            "type": "boolean",
                            "description": "Boolean that indicates whether the model template is the default selection for the task"
                          },
                          "performance_category": {
                            "type": "string",
                            "enum": [
                              "balance",
                              "speed",
                              "accuracy",
                              "other"
                            ],
                            "description": "The category of the model template. Some algorithms focus more on accuracy, others on inference speed."
                          },
                          "lifecycle_stage": {
                            "type": "string",
                            "enum": [
                              "active",
                              "deprecated",
                              "obsolete"
                            ],
                            "description": "The current support status of the model architecture. 'Active' algorithms are fully supported and maintained. \n'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be\ndiscontinued and become 'obsolete', which means that new models cannot be trained with such algorithms. "
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Supported algorithms": {
                    "value": {
                      "supported_algorithms": [
                        {
                          "name": "Yolo",
                          "task_type": "detection",
                          "model_size": 200,
                          "model_template_id": "detection_yolo",
                          "gigaflops": 5,
                          "summary": "YOLO architecture for detection",
                          "default_algorithm": true,
                          "performance_category": "speed",
                          "lifecycle_stage": "active"
                        },
                        {
                          "name": "SSD",
                          "task_type": "detection",
                          "model_size": 200,
                          "model_template_id": "detection_ssd",
                          "gigaflops": 5,
                          "summary": "SSD architecture for detection",
                          "default_algorithm": false,
                          "performance_category": "balance",
                          "lifecycle_stage": "active"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task type is not recognized or supported",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid task type": {
                    "value": {
                      "http_status": 400,
                      "message": "NOT_A_TASK_TYPE is not a supported task type, only the following task types are supported: { 'anomaly', 'classification', 'detection', 'segmentation' }",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:train": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Train a model",
        "description": "Submit a training job.",
        "operationId": "TrainModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model_template_id": {
                    "type": "string",
                    "description": "The ID of the model architecture to be trained. This can be obtained from the [supported algorithms endpoint](#Projects/GetSupportedAlgorithms)."
                  },
                  "task_id": {
                    "type": "string",
                    "description": "The ID of the task to train. For task-chain projects, this is a required parameter.\nThe task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint."
                  },
                  "train_from_scratch": {
                    "type": "boolean",
                    "description": "Set to `true` to train the model from scratch (i.e., not finetuning from previous version)."
                  },
                  "reshuffle_subsets": {
                    "type": "boolean",
                    "description": "Set to `true` to reset the train, test and validation subsets (Only valid when `train_from_scratch` is set to `true`)."
                  },
                  "max_training_dataset_size": {
                    "type": "number",
                    "description": "Defines the maximum dataset size for training. If no value is provided, the whole dataset is used."
                  },
                  "enable_hyper_parameter_optimization": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether to run hyper-parameter optimization (HPO) before training.\nThis field is deprecated and should not be used, it will be removed in the future.",
                    "deprecated": true
                  },
                  "hpo_parameters": {
                    "type": "object",
                    "description": "These parameters control the automatic hyper parameter optimization process, if it is enabled. If `enable_hyper_parameter_optimization` is set to `true`, the hpo_parameters in this field must be specified. Otherwise, this field can be left empty.\n",
                    "properties": {
                      "hpo_time_ratio": {
                        "type": "number",
                        "format": "float",
                        "description": "This parameter controls the time allotted for automatic hyper parameter optimization. It is measured in multiples of training time, e.g. setting `hpo_time_ratio` to `4.0` will result in the hpo process taking approximately 4 times as long as a normal training without hpo would.\n"
                      }
                    },
                    "deprecated": true
                  },
                  "hyper_parameters": {
                    "required": [
                      "components"
                    ],
                    "type": "object",
                    "description": "Hyper parameters for the model to be trained",
                    "properties": {
                      "components": {
                        "type": "array",
                        "description": "Array of hyper parameter groups",
                        "items": {
                          "required": [
                            "entity_identifier"
                          ],
                          "type": "object",
                          "title": "Hyper parameter group",
                          "description": "The new values for the parameters in the hyper parameter group to set",
                          "properties": {
                            "entity_identifier": {
                              "required": [
                                "type",
                                "model_storage_id",
                                "group_name"
                              ],
                              "type": "object",
                              "title": "Hyper parameter group entity identifier",
                              "properties": {
                                "workspace_id": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    {
                                      "type": "string",
                                      "minLength": 36,
                                      "maxLength": 36,
                                      "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                      "description": "UUID of the object"
                                    }
                                  ]
                                },
                                "model_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "group_name": {
                                  "type": "string",
                                  "description": "The name of the hyper parameter group"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                  "enum": [
                                    "HYPER_PARAMETER_GROUP"
                                  ]
                                }
                              }
                            },
                            "groups": {
                              "type": "array",
                              "items": {
                                "required": [
                                  "parameters",
                                  "name"
                                ],
                                "type": "object",
                                "title": "Parameter group",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the parameter group"
                                  },
                                  "parameters": {
                                    "type": "array",
                                    "description": "Array of parameters",
                                    "items": {
                                      "required": [
                                        "value",
                                        "name"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "number"
                                            },
                                            {
                                              "type": "boolean"
                                            }
                                          ],
                                          "description": "Value to set the parameter to."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the parameter by in the system."
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "parameters": {
                              "type": "array",
                              "items": {
                                "required": [
                                  "value",
                                  "name"
                                ],
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "boolean"
                                      }
                                    ],
                                    "description": "Value to set the parameter to."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name to identify the parameter by in the system."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Simple train request": {
                  "value": {
                    "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                    "task_id": "60dd7ab4083bce31e1f38r768",
                    "train_from_scratch": true
                  }
                },
                "Advanced train request with hyper parameters": {
                  "value": {
                    "model_template_id": "SSD",
                    "task_id": "60dd7ab4083bce31e1f38769",
                    "train_from_scratch": false,
                    "hyper_parameters": {
                      "components": [
                        {
                          "entity_identifier": {
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "61f3f66904b3fecbb2829af4",
                            "group_name": "learning_parameters",
                            "model_storage_id": "61f4057904b3fecbb2829f5d"
                          },
                          "parameters": [
                            {
                              "name": "batch_size",
                              "value": 2
                            },
                            {
                              "name": "learning_rate",
                              "value": 0.01
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Training job submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Successfully submitted a training job": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Task not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Task with id 60ec6bbfb98caeb87e34309f could not be found.",
                      "error_code": "task_not_found"
                    }
                  },
                  "Training algorithm not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Unable to start training: Algorithm with name 'abc' was not found for task Sample detection task of type detection. Algorithms that are available to this task are: ['ote_anomaly_detection_stfpm', 'ote_anomaly_detection_padim'].",
                      "error_code": "algorithm_not_found"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Insufficient balance for training job execution.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Insufficient balance": {
                    "value": {
                      "http_status": 412,
                      "message": "Insufficient balance for job execution",
                      "error_code": "job_insufficient_balance"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Obsolete training algorithm": {
                    "value": {
                      "http_status": 422,
                      "message": "The model template with id `Lite-HRNet-18` is obsolete and cannot be used for training.",
                      "error_code": "obsolete_training_algorithm"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/train": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Train a model",
        "deprecated": true,
        "description": "Submit a training job. Note - This endpoint is deprecated and will be removed after 2025-03-31. Please use the new endpoint `:train` instead.",
        "operationId": "LegacyTrainModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model_template_id": {
                    "type": "string",
                    "description": "The ID of the model architecture to be trained. This can be obtained from the [supported algorithms endpoint](#Projects/GetSupportedAlgorithms)."
                  },
                  "task_id": {
                    "type": "string",
                    "description": "The ID of the task to train. For task-chain projects, this is a required parameter.\nThe task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint."
                  },
                  "train_from_scratch": {
                    "type": "boolean",
                    "description": "Set to `true` to train the model from scratch (i.e., not finetuning from previous version)."
                  },
                  "reshuffle_subsets": {
                    "type": "boolean",
                    "description": "Set to `true` to reset the train, test and validation subsets (Only valid when `train_from_scratch` is set to `true`)."
                  },
                  "max_training_dataset_size": {
                    "type": "number",
                    "description": "Defines the maximum dataset size for training. If no value is provided, the whole dataset is used."
                  },
                  "enable_hyper_parameter_optimization": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether to run hyper-parameter optimization (HPO) before training.\nThis field is deprecated and should not be used, it will be removed in the future.",
                    "deprecated": true
                  },
                  "hpo_parameters": {
                    "type": "object",
                    "description": "These parameters control the automatic hyper parameter optimization process, if it is enabled. If `enable_hyper_parameter_optimization` is set to `true`, the hpo_parameters in this field must be specified. Otherwise, this field can be left empty.\n",
                    "properties": {
                      "hpo_time_ratio": {
                        "type": "number",
                        "format": "float",
                        "description": "This parameter controls the time allotted for automatic hyper parameter optimization. It is measured in multiples of training time, e.g. setting `hpo_time_ratio` to `4.0` will result in the hpo process taking approximately 4 times as long as a normal training without hpo would.\n"
                      }
                    },
                    "deprecated": true
                  },
                  "hyper_parameters": {
                    "required": [
                      "components"
                    ],
                    "type": "object",
                    "description": "Hyper parameters for the model to be trained",
                    "properties": {
                      "components": {
                        "type": "array",
                        "description": "Array of hyper parameter groups",
                        "items": {
                          "required": [
                            "entity_identifier"
                          ],
                          "type": "object",
                          "title": "Hyper parameter group",
                          "description": "The new values for the parameters in the hyper parameter group to set",
                          "properties": {
                            "entity_identifier": {
                              "required": [
                                "type",
                                "model_storage_id",
                                "group_name"
                              ],
                              "type": "object",
                              "title": "Hyper parameter group entity identifier",
                              "properties": {
                                "workspace_id": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    {
                                      "type": "string",
                                      "minLength": 36,
                                      "maxLength": 36,
                                      "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                      "description": "UUID of the object"
                                    }
                                  ]
                                },
                                "model_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "group_name": {
                                  "type": "string",
                                  "description": "The name of the hyper parameter group"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                  "enum": [
                                    "HYPER_PARAMETER_GROUP"
                                  ]
                                }
                              }
                            },
                            "groups": {
                              "type": "array",
                              "items": {
                                "required": [
                                  "parameters",
                                  "name"
                                ],
                                "type": "object",
                                "title": "Parameter group",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the parameter group"
                                  },
                                  "parameters": {
                                    "type": "array",
                                    "description": "Array of parameters",
                                    "items": {
                                      "required": [
                                        "value",
                                        "name"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "number"
                                            },
                                            {
                                              "type": "boolean"
                                            }
                                          ],
                                          "description": "Value to set the parameter to."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the parameter by in the system."
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "parameters": {
                              "type": "array",
                              "items": {
                                "required": [
                                  "value",
                                  "name"
                                ],
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "boolean"
                                      }
                                    ],
                                    "description": "Value to set the parameter to."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name to identify the parameter by in the system."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Simple train request": {
                  "value": {
                    "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                    "task_id": "60dd7ab4083bce31e1f38r768",
                    "train_from_scratch": true
                  }
                },
                "Advanced train request with hyper parameters": {
                  "value": {
                    "model_template_id": "SSD",
                    "task_id": "60dd7ab4083bce31e1f38769",
                    "train_from_scratch": false,
                    "hyper_parameters": {
                      "components": [
                        {
                          "entity_identifier": {
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "61f3f66904b3fecbb2829af4",
                            "group_name": "learning_parameters",
                            "model_storage_id": "61f4057904b3fecbb2829f5d"
                          },
                          "parameters": [
                            {
                              "name": "batch_size",
                              "value": 2
                            },
                            {
                              "name": "learning_rate",
                              "value": 0.01
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Training job submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Successfully submitted a training job": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Task not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Task with id 60ec6bbfb98caeb87e34309f could not be found.",
                      "error_code": "task_not_found"
                    }
                  },
                  "Training algorithm not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Unable to start training: Algorithm with name 'abc' was not found for task Sample detection task of type detection. Algorithms that are available to this task are: ['ote_anomaly_detection_stfpm', 'ote_anomaly_detection_padim'].",
                      "error_code": "algorithm_not_found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Obsolete training algorithm": {
                    "value": {
                      "http_status": 422,
                      "message": "The model template with id `Lite-HRNet-18` is obsolete and cannot be used for training.",
                      "error_code": "obsolete_training_algorithm"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get information on all models and their groups belonging to a project",
        "description": "Get information on all model groups in a project. Each model group represents one model architecture that has been trained in the project and\ncontains a list of successfully trained models of that architecture. \nTo obtain more detail on each of the model version, please use the [model detail](#Models/GetModelDetail) endpoint. ",
        "operationId": "GetModelGroups",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "task_id",
            "description": "Provide the task ID to get the model groups related to that task. For example in a task chain project, \nset this parameter to the ID of the first task if you are interested only in the model groups of the first task. \nThe task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint.\n\nIf no task id is provided, the response will contain the model groups for all tasks in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information on all models and their groups belonging to a project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "model_groups": {
                      "type": "array",
                      "description": "Array of model groups",
                      "items": {
                        "type": "object",
                        "properties": {
                          "models": {
                            "type": "array",
                            "description": "Array of models. The models at this level represent the successfully trained models. Note that these are not \nthe (OpenVINO or ONNX) optimized models; \nthe list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.  ",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the model."
                                },
                                "creation_date": {
                                  "type": "string",
                                  "description": "Creation date of the model."
                                },
                                "size": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Model size in bytes."
                                },
                                "total_disk_size": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code, \nand the binaries from the optimized models."
                                },
                                "performance": {
                                  "type": "object",
                                  "properties": {
                                    "score": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Accuracy score for the model. Only applicable for non-anomaly projects."
                                    }
                                  }
                                },
                                "label_schema_in_sync": {
                                  "type": "boolean",
                                  "description": "Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model"
                                },
                                "score_up_to_date": {
                                  "type": "boolean",
                                  "description": "Boolean indicating whether the score of the model is the most recent score.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                                  "deprecated": true
                                },
                                "model_storage_id": {
                                  "type": "string",
                                  "description": "ID of the model storage"
                                },
                                "active_model": {
                                  "type": "boolean",
                                  "description": "Boolean indicating that the model is used for inference requests for the project."
                                },
                                "version": {
                                  "type": "number",
                                  "description": "Version of the model"
                                },
                                "purge_info": {
                                  "type": "object",
                                  "description": "Purging state of the model. A model is purged when all its binary files are removed from the server. \nThis is performed through the [purge model](#Models/ArchiveModel) endpoint.",
                                  "properties": {
                                    "is_purged": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "description": "Boolean indicating if the model is purged."
                                    },
                                    "user_uid": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "The user ID who requested the cancellation."
                                    },
                                    "purge_time": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "format": "date-time",
                                      "description": "The time when the model was purged."
                                    }
                                  }
                                },
                                "lifecycle_stage": {
                                  "type": "string",
                                  "enum": [
                                    "active",
                                    "obsolete"
                                  ],
                                  "description": "The current support status of the model format. 'Active' models are fully supported and maintained. \n'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.\nIn addition, training with an 'obsolete' happens from scratch rather than incrementally."
                                }
                              }
                            }
                          },
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the model group, typically the name of the architecture."
                          },
                          "model_template_id": {
                            "type": "string",
                            "description": "The ID of the model architecture."
                          },
                          "learning_approach": {
                            "type": "string",
                            "description": "The learning approach from which the model is generated. \n\n`fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot` \nis used for visual prompt models.    ",
                            "enum": [
                              "fully_supervised",
                              "one_shot"
                            ]
                          },
                          "lifecycle_stage": {
                            "type": "string",
                            "enum": [
                              "active",
                              "deprecated",
                              "obsolete"
                            ],
                            "description": "The current support status of the model architecture. 'Active' algorithms are fully supported and maintained. \n'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be\ndiscontinued and become 'obsolete', which means that new models cannot be trained with such algorithms. "
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Model groups response": {
                    "value": {
                      "model_groups": [
                        {
                          "id": "60dc3b8b3fc7834f46ea90d5",
                          "name": "U-Net",
                          "task_id": "60db493fd20945a0046f56d2",
                          "model_template_id": "U-Net",
                          "models": [
                            {
                              "name": "Model of U-net",
                              "creation_date": "2021-06-30T09:38:19.677000+00:00",
                              "id": "60dc3b8b3fc7834f46ea90ag",
                              "size": 12813101,
                              "version": 1,
                              "performance": {
                                "score": 0.28953322601318
                              },
                              "label_schema_in_sync": false,
                              "score_up_to_date": true,
                              "active_model": false,
                              "purge_info": {
                                "is_purged": false,
                                "purge_time": null,
                                "user_uid": null
                              }
                            },
                            {
                              "name": "Model of U-net",
                              "creation_date": "2021-06-30T09:38:19.677000+00:00",
                              "id": "60dc3b8b3fc7834f46ea90af",
                              "size": 12813101,
                              "version": 2,
                              "performance": {
                                "score": 0.28953322601318
                              },
                              "label_schema_in_sync": true,
                              "score_up_to_date": true,
                              "active_model": true,
                              "purge_info": {
                                "is_purged": false,
                                "purge_time": null,
                                "user_uid": null
                              }
                            }
                          ],
                          "learning_approach": "fully_supervised",
                          "lifecycle_stage": "active"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get information on all models in a model group",
        "description": "Get information about a specific model group, including the models in that group. \nEach model group represents one model architecture that has been trained in the project and\ncontains a list of successfully trained models of that architecture.",
        "operationId": "GetModelGroup",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Information on all models and their groups belonging to a project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "description": "Array of models. The models at this level represent the successfully trained models. Note that these are not \nthe (OpenVINO or ONNX) optimized models; \nthe list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.  ",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the model."
                          },
                          "creation_date": {
                            "type": "string",
                            "description": "Creation date of the model."
                          },
                          "size": {
                            "type": "number",
                            "format": "int32",
                            "description": "Model size in bytes."
                          },
                          "total_disk_size": {
                            "type": "number",
                            "format": "int32",
                            "description": "The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code, \nand the binaries from the optimized models."
                          },
                          "performance": {
                            "type": "object",
                            "properties": {
                              "score": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Accuracy score for the model. Only applicable for non-anomaly projects."
                              }
                            }
                          },
                          "label_schema_in_sync": {
                            "type": "boolean",
                            "description": "Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model"
                          },
                          "score_up_to_date": {
                            "type": "boolean",
                            "description": "Boolean indicating whether the score of the model is the most recent score.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "model_storage_id": {
                            "type": "string",
                            "description": "ID of the model storage"
                          },
                          "active_model": {
                            "type": "boolean",
                            "description": "Boolean indicating that the model is used for inference requests for the project."
                          },
                          "version": {
                            "type": "number",
                            "description": "Version of the model"
                          },
                          "purge_info": {
                            "type": "object",
                            "description": "Purging state of the model. A model is purged when all its binary files are removed from the server. \nThis is performed through the [purge model](#Models/ArchiveModel) endpoint.",
                            "properties": {
                              "is_purged": {
                                "type": [
                                  "boolean"
                                ],
                                "description": "Boolean indicating if the model is purged."
                              },
                              "user_uid": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The user ID who requested the cancellation."
                              },
                              "purge_time": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time",
                                "description": "The time when the model was purged."
                              }
                            }
                          },
                          "lifecycle_stage": {
                            "type": "string",
                            "enum": [
                              "active",
                              "obsolete"
                            ],
                            "description": "The current support status of the model format. 'Active' models are fully supported and maintained. \n'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.\nIn addition, training with an 'obsolete' happens from scratch rather than incrementally."
                          }
                        }
                      }
                    },
                    "task_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the model group, typically the name of the architecture."
                    },
                    "model_template_id": {
                      "type": "string",
                      "description": "The ID of the model architecture."
                    },
                    "learning_approach": {
                      "type": "string",
                      "description": "The learning approach from which the model is generated. \n\n`fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot` \nis used for visual prompt models.    ",
                      "enum": [
                        "fully_supervised",
                        "one_shot"
                      ]
                    },
                    "lifecycle_stage": {
                      "type": "string",
                      "enum": [
                        "active",
                        "deprecated",
                        "obsolete"
                      ],
                      "description": "The current support status of the model architecture. 'Active' algorithms are fully supported and maintained. \n'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be\ndiscontinued and become 'obsolete', which means that new models cannot be trained with such algorithms. "
                    }
                  }
                },
                "examples": {
                  "Model group response": {
                    "value": {
                      "id": "60dc3b8b3fc7834f46ea90d5",
                      "name": "U-Net",
                      "task_id": "60db493fd20945a0046f56d2",
                      "model_template_id": "U-Net",
                      "models": [
                        {
                          "name": "U-Net",
                          "creation_date": "2021-06-30T09:45:19.677000+00:00",
                          "id": "60dc3b8b3fc7834f46ea90b0",
                          "size": 12813204,
                          "performance": {
                            "score": 0.43
                          },
                          "label_schema_in_sync": true,
                          "score_up_to_date": true,
                          "active_model": true,
                          "version": 2,
                          "purge_info": {
                            "is_purged": false,
                            "purge_time": null,
                            "user_uid": null
                          }
                        },
                        {
                          "name": "U-Net",
                          "creation_date": "2021-06-30T09:38:19.677000+00:00",
                          "id": "60dc3b8b3fc7834f46ea90af",
                          "size": 12813101,
                          "performance": {
                            "score": 0.28953322601318
                          },
                          "label_schema_in_sync": false,
                          "score_up_to_date": true,
                          "active_model": false,
                          "version": 1,
                          "purge_info": {
                            "is_purged": false,
                            "purge_time": null,
                            "user_uid": null
                          }
                        }
                      ],
                      "learning_approach": "fully_supervised",
                      "lifecycle_stage": "active"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}:activate": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Set the latest model in the model group as the active model",
        "description": "Set the latest model of the model group to be the active model.\nActive model is used to generate predictions requested through the \n[predict](#Predictions/GetSinglePrediction) or [explain](#Predictions/GetSingleExplanation) endpoints \n(and their batch variants). ",
        "operationId": "ActivateModelGroup",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model group successfully activated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "description": "Array of models. The models at this level represent the successfully trained models. Note that these are not \nthe (OpenVINO or ONNX) optimized models; \nthe list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.  ",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the model."
                          },
                          "creation_date": {
                            "type": "string",
                            "description": "Creation date of the model."
                          },
                          "size": {
                            "type": "number",
                            "format": "int32",
                            "description": "Model size in bytes."
                          },
                          "total_disk_size": {
                            "type": "number",
                            "format": "int32",
                            "description": "The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code, \nand the binaries from the optimized models."
                          },
                          "performance": {
                            "type": "object",
                            "properties": {
                              "score": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Accuracy score for the model. Only applicable for non-anomaly projects."
                              }
                            }
                          },
                          "label_schema_in_sync": {
                            "type": "boolean",
                            "description": "Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model"
                          },
                          "score_up_to_date": {
                            "type": "boolean",
                            "description": "Boolean indicating whether the score of the model is the most recent score.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "model_storage_id": {
                            "type": "string",
                            "description": "ID of the model storage"
                          },
                          "active_model": {
                            "type": "boolean",
                            "description": "Boolean indicating that the model is used for inference requests for the project."
                          },
                          "version": {
                            "type": "number",
                            "description": "Version of the model"
                          },
                          "purge_info": {
                            "type": "object",
                            "description": "Purging state of the model. A model is purged when all its binary files are removed from the server. \nThis is performed through the [purge model](#Models/ArchiveModel) endpoint.",
                            "properties": {
                              "is_purged": {
                                "type": [
                                  "boolean"
                                ],
                                "description": "Boolean indicating if the model is purged."
                              },
                              "user_uid": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The user ID who requested the cancellation."
                              },
                              "purge_time": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time",
                                "description": "The time when the model was purged."
                              }
                            }
                          },
                          "lifecycle_stage": {
                            "type": "string",
                            "enum": [
                              "active",
                              "obsolete"
                            ],
                            "description": "The current support status of the model format. 'Active' models are fully supported and maintained. \n'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.\nIn addition, training with an 'obsolete' happens from scratch rather than incrementally."
                          }
                        }
                      }
                    },
                    "task_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the model group, typically the name of the architecture."
                    },
                    "model_template_id": {
                      "type": "string",
                      "description": "The ID of the model architecture."
                    },
                    "learning_approach": {
                      "type": "string",
                      "description": "The learning approach from which the model is generated. \n\n`fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot` \nis used for visual prompt models.    ",
                      "enum": [
                        "fully_supervised",
                        "one_shot"
                      ]
                    },
                    "lifecycle_stage": {
                      "type": "string",
                      "enum": [
                        "active",
                        "deprecated",
                        "obsolete"
                      ],
                      "description": "The current support status of the model architecture. 'Active' algorithms are fully supported and maintained. \n'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be\ndiscontinued and become 'obsolete', which means that new models cannot be trained with such algorithms. "
                    }
                  }
                },
                "examples": {
                  "Activated model group response": {
                    "value": {
                      "id": "60dc3b8b3fc7834f46ea90d5",
                      "name": "U-Net",
                      "task_id": "60db493fd20945a0046f56d2",
                      "model_template_id": "U-Net",
                      "models": [
                        {
                          "name": "U-Net",
                          "creation_date": "2021-06-30T09:45:19.677000+00:00",
                          "id": "60dc3b8b3fc7834f46ea90b0",
                          "size": 12813204,
                          "performance": {
                            "score": 0.43
                          },
                          "label_schema_in_sync": true,
                          "score_up_to_date": true,
                          "active_model": true,
                          "version": 2,
                          "purge_info": {
                            "is_purged": false,
                            "purge_time": null,
                            "user_uid": null
                          }
                        },
                        {
                          "name": "U-Net",
                          "creation_date": "2021-06-30T09:38:19.677000+00:00",
                          "id": "60dc3b8b3fc7834f46ea90af",
                          "size": 12813101,
                          "performance": {
                            "score": 0.28953322601318
                          },
                          "label_schema_in_sync": false,
                          "score_up_to_date": true,
                          "active_model": false,
                          "version": 1,
                          "purge_info": {
                            "is_purged": false,
                            "purge_time": null,
                            "user_uid": null
                          }
                        }
                      ],
                      "learning_approach": "fully_supervised",
                      "lifecycle_stage": "active"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Model group cannot be activated. It does not contain successful models",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Model group not activable response": {
                    "value": {
                      "http_status": 405,
                      "message": "The model group cannot be activated",
                      "error_code": "model_storage_not_activable"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get detailed information on a model",
        "description": "Get detailed information on a model. The response contains the base model version as well as the list of \noptimized models (OpenVINO and ONNX) that are generated from the base model.",
        "operationId": "GetModelDetail",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information on a model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "Network architecture of the model"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the model"
                    },
                    "creation_date": {
                      "type": "string",
                      "description": "Creation date of the model"
                    },
                    "size": {
                      "type": "number",
                      "format": "int32",
                      "description": "Model size in bytes"
                    },
                    "total_disk_size": {
                      "type": "number",
                      "format": "int32",
                      "description": "The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code, \nand the binaries from the optimized models."
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "format": "float",
                          "description": "Accuracy score for the model. Only applicable for non-anomaly projects."
                        }
                      }
                    },
                    "label_schema_in_sync": {
                      "type": "boolean",
                      "description": "Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model"
                    },
                    "score_up_to_date": {
                      "type": "boolean",
                      "description": "Boolean that indicates whether the score of the model is the most recent score.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true
                    },
                    "fps_throughput": {
                      "type": "number",
                      "format": "int32",
                      "description": "FPS throughput for the model.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true
                    },
                    "latency": {
                      "type": "number",
                      "format": "int32",
                      "description": "Latency for the model, in ms.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true
                    },
                    "precision": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Precision of the model"
                      }
                    },
                    "target_device": {
                      "type": "string",
                      "description": "Type of device the model is best used on.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true
                    },
                    "target_device_type": {
                      "type": "string",
                      "description": "Detailed type of device the model is best used on.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true
                    },
                    "version": {
                      "type": "number",
                      "description": "Version of the model"
                    },
                    "previous_revision_id": {
                      "type": "string",
                      "description": "ID of the previous model"
                    },
                    "previous_trained_revision_id": {
                      "type": "string",
                      "description": "ID of the previous trained model"
                    },
                    "optimized_models": {
                      "type": "array",
                      "description": "Array of optimized models",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the optimized model"
                          },
                          "size": {
                            "type": "number",
                            "format": "int32",
                            "description": "Model size in bytes"
                          },
                          "fps_throughput": {
                            "type": "number",
                            "format": "int32",
                            "description": "FPS throughput of the optimized model.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "latency": {
                            "type": "number",
                            "format": "int32",
                            "description": "Latency for the optimized model, in ms.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "optimization_levels": {
                            "type": "object"
                          },
                          "optimization_methods": {
                            "type": "array",
                            "description": "Array of optimization methods",
                            "items": {
                              "type": "string"
                            }
                          },
                          "optimization_type": {
                            "type": "string",
                            "description": "Optimization type of the model"
                          },
                          "precision": {
                            "type": "array",
                            "description": "Precision of the model",
                            "items": {
                              "type": "string"
                            }
                          },
                          "has_xai_head": {
                            "type": "boolean",
                            "description": "Whether the model also outputs eXplainable AI artifacts, e.g. saliency maps."
                          },
                          "model_format": {
                            "type": "string",
                            "description": "Format of the model",
                            "enum": [
                              "OpenVINO",
                              "ONNX"
                            ]
                          },
                          "version": {
                            "type": "number",
                            "description": "Version of the model"
                          },
                          "previous_revision_id": {
                            "type": "string",
                            "description": "ID of the prevoius model"
                          },
                          "previous_trained_revision_id": {
                            "type": "string",
                            "description": "ID of the previous trained model"
                          },
                          "performance": {
                            "type": "object",
                            "properties": {
                              "score": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Accuracy score for the model. Only applicable for non-anomaly projects."
                              }
                            }
                          },
                          "target_device": {
                            "type": "string",
                            "description": "Type of device the model is best used on.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "target_device_type": {
                            "type": "string",
                            "description": "Detailed type of device the model is best used on.\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the model"
                          },
                          "model_status": {
                            "type": "string",
                            "enum": [
                              "NOT_READY",
                              "WEIGHTS_INITIALIZED",
                              "SUCCESS",
                              "FAILED",
                              "NOT_IMPROVED"
                            ],
                            "description": "Status of the model"
                          },
                          "configurations": {
                            "type": "array",
                            "description": "Array of additional configuration parameters",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "name of the configuration parameter"
                                },
                                "value": {
                                  "description": "value of the configuration parameter"
                                }
                              }
                            }
                          },
                          "lifecycle_stage": {
                            "type": "string",
                            "enum": [
                              "active",
                              "obsolete"
                            ],
                            "description": "The current support status of the model format. 'Active' models are fully supported and maintained. \n'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.\nIn addition, training with an 'obsolete' happens from scratch rather than incrementally."
                          }
                        }
                      }
                    },
                    "labels": {
                      "type": "array",
                      "description": "Array of labels",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Label name, must be unique"
                          },
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "color": {
                            "type": "string",
                            "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$",
                            "description": "Label color, picked at random if not specified"
                          },
                          "group": {
                            "type": "string",
                            "description": "Name of label group"
                          },
                          "parent_id": {
                            "oneOf": [
                              {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Name of parent label"
                          },
                          "is_empty": {
                            "type": "boolean",
                            "description": "Indicates whether the label is an empty label"
                          },
                          "is_anomalous": {
                            "type": "boolean",
                            "description": "Indicates whether the label is anomalous or not"
                          },
                          "is_deleted": {
                            "type": "boolean",
                            "description": "Indicates whether the label is deleted"
                          },
                          "hotkey": {
                            "type": "string",
                            "description": "Key or combination of key to select this label. Can be empty (no key).",
                            "minLength": 0
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "color",
                          "group",
                          "parent_id",
                          "hotkey",
                          "is_empty",
                          "is_anomalous"
                        ]
                      }
                    },
                    "training_dataset_info": {
                      "type": "object",
                      "properties": {
                        "dataset_storage_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "dataset_revision_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "n_samples": {
                          "type": "number",
                          "format": "int32",
                          "description": "The number of items in the training dataset. Note that for the second task in a task chain, this could be more than \n`n_images + n_frames` because each bounding box of the first task corresponds to one dataset item of the second task."
                        },
                        "n_images": {
                          "type": "number",
                          "format": "int32",
                          "description": "The number of distinct images in the dataset"
                        },
                        "n_frames": {
                          "type": "number",
                          "format": "int32",
                          "description": "The number of distinct video frames in the dataset"
                        }
                      }
                    },
                    "training_framework": {
                      "type": "object",
                      "description": "Information about the framework used to train the model",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "otx",
                            "third_party"
                          ],
                          "description": "Type of the training framework"
                        },
                        "version": {
                          "type": "string",
                          "description": "Version of the training framework"
                        }
                      }
                    },
                    "purge_info": {
                      "type": "object",
                      "description": "Purging state of the model. A model is purged when all its binary files are removed from the server. \nThis is performed through the [purge model](#Models/ArchiveModel) endpoint.",
                      "properties": {
                        "is_purged": {
                          "type": [
                            "boolean"
                          ],
                          "description": "Boolean indicating if the model is purged."
                        },
                        "user_uid": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The user ID who requested the cancellation."
                        },
                        "purge_time": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time",
                          "description": "The time when the model was purged."
                        }
                      }
                    },
                    "learning_approach": {
                      "type": "string",
                      "description": "The learning approach from which the model is generated. \n\n`fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot` \nis used for visual prompt models.    ",
                      "enum": [
                        "fully_supervised",
                        "one_shot"
                      ]
                    },
                    "lifecycle_stage": {
                      "type": "string",
                      "enum": [
                        "active",
                        "obsolete"
                      ],
                      "description": "The current support status of the model format. 'Active' models are fully supported and maintained. \n'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.\nIn addition, training with an 'obsolete' happens from scratch rather than incrementally."
                    }
                  }
                },
                "examples": {
                  "Model detail response": {
                    "value": {
                      "name": "U-Net",
                      "architecture": "U-Net",
                      "creation_date": "2021-06-30T09:25:20.472000+00:00",
                      "id": "60dc38807c9ed62cf35b9255",
                      "size": 12813101,
                      "performance": {
                        "score": 0.48453322601318
                      },
                      "label_schema_in_sync": true,
                      "score_up_to_date": false,
                      "fps_throughput": 40,
                      "latency": 25,
                      "precision": [
                        "FP32"
                      ],
                      "total_disk_size": 25813101,
                      "target_device": "CPU",
                      "target_device_type": "Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz",
                      "version": 2,
                      "previous_revision_id": "60dd7ab4083bce31e1f3876c",
                      "previous_trained_revision_id": "60dd7ab4083bce31e1f3876c",
                      "optimized_models": [
                        {
                          "id": "60dc38807c9ed62cf35b9255",
                          "size": 12813101,
                          "total_disk_size": 15813101,
                          "fps_throughput": 100,
                          "has_xai_head": true,
                          "latency": 10,
                          "name": "Detection model OpenVINO",
                          "optimization_objectives": {},
                          "optimization_methods": [],
                          "optimization_type": "MO",
                          "precision": [
                            "FP16"
                          ],
                          "version": 2,
                          "previous_revision_id": "60dd7ab4083bce31e1f3876c",
                          "previous_trained_revision_id": "60dd7ab4083bce31e1f3876c",
                          "performance": {
                            "score": 0.48453322601318
                          },
                          "model_format": "OpenVINO",
                          "model_status": "SUCCESS",
                          "target_device": "CPU",
                          "target_device_type": "Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz",
                          "configurations": []
                        },
                        {
                          "id": "60dc38807c9ed62cf35b9255",
                          "size": 12813101,
                          "fps_throughput": 200,
                          "has_xai_head": false,
                          "latency": 5,
                          "name": "Detection model OpenVINO",
                          "optimization_objectives": {},
                          "optimization_methods": [],
                          "optimization_type": "MO",
                          "precision": [
                            "INT8"
                          ],
                          "version": 2,
                          "previous_revision_id": "60dd7ab4083bce31e1f3876c",
                          "previous_trained_revision_id": "60dd7ab4083bce31e1f3876c",
                          "performance": {
                            "score": 0.34953322601318
                          },
                          "model_format": "OpenVINO",
                          "model_status": "SUCCESS",
                          "target_device": "CPU",
                          "target_device_type": "Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz",
                          "configurations": []
                        },
                        {
                          "id": "60dc38807c9ed62cf35b9789",
                          "size": 12813101,
                          "total_disk_size": 15813101,
                          "fps_throughput": 200,
                          "has_xai_head": false,
                          "latency": 5,
                          "name": "Detection model OpenVINO",
                          "optimization_objectives": {},
                          "optimization_methods": [],
                          "optimization_type": "POT",
                          "precision": [
                            "INT8"
                          ],
                          "version": 2,
                          "previous_revision_id": "60dd7ab4083bce31e1f3876c",
                          "previous_trained_revision_id": "60dd7ab4083bce31e1f3876c",
                          "performance": {
                            "score": 0.34953322601318
                          },
                          "model_format": "OpenVINO",
                          "model_status": "SUCCESS",
                          "target_device": "CPU",
                          "target_device_type": "Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz",
                          "configurations": [
                            {
                              "name": "sample_size",
                              "value": 300
                            }
                          ]
                        }
                      ],
                      "labels": [
                        {
                          "color": "#ff0000ff",
                          "group": "from_label_list",
                          "hotkey": "ctrl+V",
                          "id": "60d31793d5f1fb7e6e3c1a50",
                          "is_empty": false,
                          "is_anomalous": false,
                          "name": "dog",
                          "parent_id": null
                        }
                      ],
                      "training_dataset_info": {
                        "dataset_storage_id": "60d31793d5f1fb7e6e3c1a4f",
                        "dataset_revision_id": "60d31793d5f1fb7e6e3c1a50",
                        "n_samples": 0,
                        "n_images": 0,
                        "n_frames": 0
                      },
                      "training_framework": {
                        "type": "otx",
                        "version": "1.6.4"
                      },
                      "purge_info": {
                        "is_purged": false,
                        "purge_time": null,
                        "user_uid": null
                      },
                      "learning_approach": "fully_supervised"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get statistics for a model",
        "description": "Get statistics for a model. The statistics includes training and evaluation statistics.  \nThe response will be a list of charts; each chart will be one of the following types: `text`, `bar`, `radial_bar`, `line` or `matrix`. For each type of chart, the response body has a different\nformat. See the schemas for information on the format of the response.",
        "operationId": "GetModelStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Training statistics for a model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "model_statistics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "header": {
                            "type": "string",
                            "description": "Header describing the chart"
                          },
                          "key": {
                            "type": "string",
                            "description": "Unique key for the chart"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of chart. Current implementation allows 'line', 'text', 'bar', 'radial_bar' and 'matrix'.",
                            "enum": [
                              "text",
                              "line",
                              "bar",
                              "radial_bar",
                              "matrix"
                            ]
                          },
                          "value": {
                            "oneOf": [
                              {
                                "description": "Text chart, containing string or number to display",
                                "type": [
                                  "string",
                                  "number"
                                ]
                              },
                              {
                                "type": "array",
                                "description": "Bar (also for radial bar) chart, depicted by an array containing values describing the bars in the chart.",
                                "items": {
                                  "type": "object",
                                  "description": "Data for each bar in the chart",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "Name of the bar"
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "Unique key for the bar"
                                    },
                                    "value": {
                                      "type": "number",
                                      "description": "Value for the bar"
                                    },
                                    "color": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Color of the bar in hex format"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Line chart, containing description of the chart and the lines coordinates.",
                                "properties": {
                                  "x_axis_label": {
                                    "type": "string",
                                    "description": "Label of the x-axis for the line chart"
                                  },
                                  "y_axis_label": {
                                    "type": "string",
                                    "description": "Label of the y-axis for the line chart"
                                  },
                                  "color": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Color of the bar in hex format"
                                  },
                                  "line_data": {
                                    "type": "array",
                                    "description": "Array of line data, each containing the information for one line.",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "points": {
                                          "type": "array",
                                          "description": "List of coordinates of the points in the line chart",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "x": {
                                                "type": "number",
                                                "description": "X coordinate of the point"
                                              },
                                              "y": {
                                                "type": "number",
                                                "description": "Y coordinate of the point"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x_axis_label",
                                  "y_axis_label",
                                  "line_data"
                                ]
                              },
                              {
                                "type": "object",
                                "description": "Matrix chart, containing multiple matrices. Typically used for confusion matrices in classification projects.",
                                "properties": {
                                  "row_header": {
                                    "type": "string",
                                    "description": "The header for all the rows in the matrix"
                                  },
                                  "column_header": {
                                    "type": "string",
                                    "description": "The header for all the columns in the matrix"
                                  },
                                  "matrix_data": {
                                    "type": "array",
                                    "description": "Array of matrices",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "row_names": {
                                          "type": "array",
                                          "description": "Array containing the names of the matrix rows",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "column_names": {
                                          "type": "array",
                                          "description": "Array containing the names of the matrix columns",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "matrix_values": {
                                          "type": "array",
                                          "description": "Array of matrix values",
                                          "items": {
                                            "type": "array",
                                            "items": {
                                              "type": "number"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "row_header",
                                  "column_header",
                                  "matrix_data"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Model statistics response": {
                    "value": {
                      "model_statistics": [
                        {
                          "header": "Training date",
                          "key": "Training date",
                          "type": "text",
                          "value": "2021-08-24T08:57:35.593000+00:00"
                        },
                        {
                          "header": "Training job duration",
                          "key": "Training job duration",
                          "type": "text",
                          "value": "0:03:20"
                        },
                        {
                          "header": "Training duration",
                          "key": "Training duration",
                          "type": "text",
                          "value": "0:02:20"
                        },
                        {
                          "header": "Dataset split",
                          "key": "Dataset split",
                          "type": "bar",
                          "value": [
                            {
                              "header ": "Size of Training set",
                              "key": "Size of Training set",
                              "value": 6
                            },
                            {
                              "header ": "Size of Validation set",
                              "key": "Size of Validation set",
                              "value": 3
                            },
                            {
                              "header ": "Size of Test set",
                              "key": "Size of Test set",
                              "value": 3
                            }
                          ]
                        },
                        {
                          "header": "Dice average",
                          "key": "Dice average",
                          "type": "radial_bar",
                          "value": [
                            {
                              "header ": "validation",
                              "key": "validation",
                              "value": 0.64
                            },
                            {
                              "header ": "test",
                              "key": "test",
                              "value": 0.6
                            }
                          ]
                        },
                        {
                          "header": "Dice Average Per Label (validation)",
                          "key": "Dice Average Per Label (validation)",
                          "type": "bar",
                          "value": [
                            {
                              "header ": "label1",
                              "key": "label1",
                              "value": 0.64,
                              "color": "#00a5cfff"
                            }
                          ]
                        },
                        {
                          "header": "Loss curve",
                          "key": "Loss curve",
                          "type": "line",
                          "line_data": [
                            {
                              "header": "Training",
                              "key": "Training",
                              "points": [
                                {
                                  "type": "point",
                                  "x": 1,
                                  "y": 0.6773999929428101
                                },
                                {
                                  "type": "point",
                                  "x": 2,
                                  "y": 0.6610000133514404
                                },
                                {
                                  "type": "point",
                                  "x": 3,
                                  "y": 0.651199996471405
                                },
                                {
                                  "type": "point",
                                  "x": 4,
                                  "y": 0.6366999745368958
                                }
                              ]
                            },
                            {
                              "header": "Validation",
                              "key": "Validation",
                              "points": [
                                {
                                  "type": "point",
                                  "x": 1,
                                  "y": 0.654699981212616
                                },
                                {
                                  "type": "point",
                                  "x": 2,
                                  "y": 0.6394000053405762
                                },
                                {
                                  "type": "point",
                                  "x": 3,
                                  "y": 0.6254000067710876
                                },
                                {
                                  "type": "point",
                                  "x": 4,
                                  "y": 0.6122000217437744
                                },
                                {
                                  "type": "point",
                                  "x": 5,
                                  "y": 0.6122000217437744
                                },
                                {
                                  "type": "point",
                                  "x": 6,
                                  "y": 0.6039000153541565
                                },
                                {
                                  "type": "point",
                                  "x": 7,
                                  "y": 0.5975000262260437
                                },
                                {
                                  "type": "point",
                                  "x": 8,
                                  "y": 0.5950000286102295
                                },
                                {
                                  "type": "point",
                                  "x": 9,
                                  "y": 0.5950000286102295
                                }
                              ]
                            }
                          ],
                          "x_axis_label": "Epoch",
                          "y_axis_label": "Loss value"
                        },
                        {
                          "header": "Dice curve",
                          "key": "Dice curve",
                          "type": "line",
                          "line_data": [
                            {
                              "header": "Validation",
                              "key": "Validation",
                              "points": [
                                {
                                  "type": "point",
                                  "x": 1,
                                  "y": 0.196
                                },
                                {
                                  "type": "point",
                                  "x": 2,
                                  "y": 0.251
                                },
                                {
                                  "type": "point",
                                  "x": 3,
                                  "y": 0.334
                                },
                                {
                                  "type": "point",
                                  "x": 4,
                                  "y": 0.419
                                },
                                {
                                  "type": "point",
                                  "x": 5,
                                  "y": 0.419
                                },
                                {
                                  "type": "point",
                                  "x": 6,
                                  "y": 0.46
                                },
                                {
                                  "type": "point",
                                  "x": 7,
                                  "y": 0.462
                                },
                                {
                                  "type": "point",
                                  "x": 8,
                                  "y": 0.476
                                }
                              ]
                            }
                          ],
                          "x_axis_label": "Epoch",
                          "y_axis_label": "Dice score"
                        },
                        {
                          "header": "Confusion matrix",
                          "key": "Confusion matrix",
                          "type": "matrix",
                          "value": {
                            "column_header": "True label",
                            "matrix_data": [
                              {
                                "column_names": [
                                  "Background",
                                  "label1"
                                ],
                                "header ": "Confusion matrix (Validation)",
                                "key": "Confusion matrix (Validation)",
                                "matrix_values": [
                                  [
                                    0.9395321011543274,
                                    0.0604679211974144
                                  ],
                                  [
                                    0.17742396891117096,
                                    0.8225760459899902
                                  ]
                                ],
                                "row_names": [
                                  "Background",
                                  "label1"
                                ]
                              }
                            ],
                            "row_header": "Predicted label"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  },
                  "Resultset not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "No result set was found for the model with id 60ec6bbfb98caeb87e34309f. Most likely, this means that the result set is still being generated.",
                      "error_code": "resultset_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/export": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Export a model.",
        "description": "Export a zip file with data from a base (non-optimized) model. \nThis endpoint only handles the export of base model weights, and does not include code.",
        "operationId": "ExportModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Export a full model",
            "content": {
              "zip file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/optimized_models/{optimized_model_id}/export": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Export an optimized model",
        "description": "Export a zip file with data from an optimized model (OpenVINO or ONNX).",
        "operationId": "ExportOptimizedModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "optimized_model_id",
            "style": "simple",
            "description": "The ID of the optimized model",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "model_only",
            "style": "form",
            "description": "Only applicable to OpenVINO-optimized models. Set to `true` to only download the model binaries; set to `false` to also include\nthe code in the exported file. ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export an optimized model",
            "content": {
              "zip file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Wrong export format": {
                    "value": {
                      "http_status": 400,
                      "message": "Exporting in WRONG_FORMAT format is not supported",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}:optimize": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Optimize a model",
        "description": "Submit an optimization job for a model. \nThe optimization is done through [post-training quantization](https://github.com/openvinotoolkit/nncf/blob/develop/docs/usage/post_training_compression/post_training_quantization/Usage.md). ",
        "operationId": "OptimizeModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request to optimize a model",
                "properties": {
                  "enable_nncf_optimization": {
                    "type": "boolean",
                    "description": "This field is deprecated and ignored by the server."
                  },
                  "enable_pot_optimization": {
                    "type": "boolean",
                    "description": "This field is deprecated and ignored by the server."
                  },
                  "optimization_parameters": {
                    "type": "object",
                    "description": "This field is deprecated and ignored by the server."
                  }
                }
              },
              "examples": {
                "Simple optimize request": {
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Optimization job is submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Successfully submitted optimization job": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/optimize": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Optimize a model. Note - This endpoint is deprecated. Please use the new endpoint `:optimize` instead.",
        "deprecated": true,
        "description": "Submit an optimization job for a model. \nThe optimization is done through [post-training quantization](https://github.com/openvinotoolkit/nncf/blob/develop/docs/usage/post_training_compression/post_training_quantization/Usage.md). ",
        "operationId": "LegacyOptimizeModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request to optimize a model",
                "properties": {
                  "enable_nncf_optimization": {
                    "type": "boolean",
                    "description": "This field is deprecated and ignored by the server."
                  },
                  "enable_pot_optimization": {
                    "type": "boolean",
                    "description": "This field is deprecated and ignored by the server."
                  },
                  "optimization_parameters": {
                    "type": "object",
                    "description": "This field is deprecated and ignored by the server."
                  }
                }
              },
              "examples": {
                "Simple optimize request": {
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Optimization job is submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Successfully submitted optimization job": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}:purge": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Archive a model",
        "description": "Archive a model. This will permanently delete all the binary files related to the model including base model \nweights, optimized model weights and exportable code. This endpoint can only be called on base models, not optimized \nmodels. Additionally, the model must not be the latest in a model group or be the active model.",
        "operationId": "ArchiveModel",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_group_id",
            "style": "simple",
            "description": "The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "model_id",
            "style": "simple",
            "description": "The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups) \nendpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Model archived successfully"
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model group not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Model storage/model group with id 60ec6bbfb98caeb87e34306a could not be found.",
                      "error_code": "model_storage_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Model can not be archived.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Optimized model can not be archived response": {
                    "value": {
                      "http_status": 422,
                      "message": "Archiving an optimized model is not allowed. The archive operation is only allowed on base models.",
                      "error_code": "model_purging_not_possible"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/predictions/{prediction_type_or_id}": {
      "get": {
        "tags": [
          "Predictions"
        ],
        "summary": "Get a prediction for an image",
        "description": "Get a prediction for an image. This endpoint currently only supports 'latest' prediction type, where the server returns the latest prediction from cache. Other types have been deprecated: if you want to generate a fresh prediction with the active model ('online') then use the pipelines/<pipeline_id>:predict endpoint.",
        "operationId": "GetImagePrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "image_id",
            "style": "simple",
            "description": "The ID of the image.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "prediction_type_or_id",
            "style": "simple",
            "description": "Either the id of a prediction or 'latest'. The latter fetches the latest prediction from the cache, if available.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "latest"
                  ]
                }
              ]
            },
            "required": true,
            "example": "latest"
          },
          {
            "in": "query",
            "name": "task_id",
            "description": "The ID of the task in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          },
          {
            "in": "query",
            "name": "roi_id",
            "description": "The ID of the ROI to predict on. Can only be an ID of a user annotated ROI. Note that if you pass an ID for an ROI you should in most cases also pass a task_id. For example, in a detection -> classification chain if a user  annotates a ROI (box for first task) and requests a prediction for this ROI you don't want the detection task to have to find the same object again that the user annotated but immediately skip to the classification task.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prediction successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "List of predictions",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                            "description": "A UUID, used to identify an annotation."
                          },
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "User name of the user that added the label or accepted the prediction"
                                    },
                                    "model_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model id of the model that predicted the label"
                                    },
                                    "model_storage_id": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Model storage id of model that predicted the label"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "labels_to_revisit": {
                            "description": "List of labels IDs for which the annotation should be revisited",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            }
                          }
                        },
                        "required": [
                          "id",
                          "labels",
                          "modified"
                        ]
                      }
                    },
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of annotation (prediction or annotation).",
                      "enum": [
                        "prediction"
                      ]
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "image_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "image"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "modified": {
                      "type": "string",
                      "description": "Modification date"
                    },
                    "maps": {
                      "description": "List of result media options\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                      "deprecated": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name for the result media option"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the result media"
                          },
                          "url": {
                            "type": "string",
                            "description": "Url where the result media can be found"
                          },
                          "binary": {
                            "type": "string",
                            "description": "A base 64 encoded representation of the binary data of the result media"
                          },
                          "label_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "roi": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "shape": {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Image prediction response": {
                    "value": {
                      "annotations": [
                        {
                          "id": "6138bca43b7b11505c43f2c1",
                          "labels": [
                            {
                              "color": "#26518eff",
                              "id": "61387685df33ae8280c33d9d",
                              "name": "test",
                              "probability": 0.87,
                              "source": {
                                "user_id": null,
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "modified": "2021-09-08T12:43:22.265000+00:00",
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "id": "6138afea3b7b11505c43f2c0",
                      "kind": "prediction",
                      "media_identifier": {
                        "image_id": "6138af293b7b11505c43f2bc",
                        "type": "image"
                      },
                      "modified": "2021-09-08T12:43:22.290000+00:00",
                      "maps": [
                        {
                          "id": "6138bca43b7b11505c43f2c1",
                          "labels_id": "6138bca43b7b11505c43f2c1",
                          "name": "Result media name",
                          "type": "Result media type",
                          "url": "/api/v1/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/{media_url}/predictions/{prediction.id}/maps/{combined_map_id}",
                          "roi": {
                            "id": "61387685df33ae8280c33d9d",
                            "shape": {
                              "type": "RECTANGLE",
                              "height": 45,
                              "width": 32,
                              "x": 19,
                              "y": 38
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No prediction available for the requested media."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/predictions/latest": {
      "get": {
        "tags": [
          "Predictions"
        ],
        "summary": "Get cached predictions for a video",
        "description": "Get predictions for a video from the database cache. Note that this endpoint **does not** generate predictions on the fly. For predictions on the fly, \nuse the [single prediction](#Predictions/GetSinglePrediction) or the [batch prediction](#Predictions/GetBatchPrediction) endpoints. \n\nParameters `start_frame`, `end_frame` and `frameskip` can be used \nto only get predictions in a certain range. There is a maximum amount of 20 predictions that can be\nreturned by the endpoint. If the combination of `start_frame`, `end_frame` and `frameskip` results in more than 20 predictions,\nonly the first 20 frames will be returned and there is a `next_page` object in the response pointing to the URL that will return \nthe next predictions.",
        "operationId": "GetCachedVideoPrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "start_frame",
            "style": "form",
            "description": "The starting index of the range of interest. This is a 0-based inclusive index, meaning to include the first frame of the video, \nthis parameter should be set to `0`. The value cannot be bigger than `frame_count-1`. \nThe `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_frame",
            "style": "form",
            "description": ":- The ending index of the range of interest. This is a 0-based inclusive index, meaning to include the last frame of the video, this parameter should be set to `frame_count-1`; the value cannot be bigger than `frame_count-1`. The `frame_count` is the total number of frames contained in the video and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": false
          },
          {
            "in": "query",
            "name": "frameskip",
            "style": "form",
            "description": "Set to the number of desired frame intervals in the response. For example, to retrieve all frame annotations of the video, set this value to `1`. \nIf not set, this value will be equal to the video fps. The video fps can be obtained from the response of the [video detail](#Media/GetVideoDetail) \nendpoint.   ",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Predictions successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "video_predictions": {
                      "type": "array",
                      "description": "Array of video frame predictions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "List of predictions",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                                  "description": "A UUID, used to identify an annotation."
                                },
                                "shape": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Rectangle",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "RECTANGLE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height"
                                      ],
                                      "example": {
                                        "type": "RECTANGLE",
                                        "x": 320,
                                        "y": 240,
                                        "width": 50,
                                        "height": 25
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Polygon",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "POLYGON"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "points": {
                                          "type": "array",
                                          "maxItems": 5000,
                                          "description": "Array of points that define the polygon.",
                                          "items": {
                                            "title": "Point",
                                            "type": "object",
                                            "properties": {
                                              "x": {
                                                "type": "number",
                                                "description": "x-coordinate of the point. Coordinates are pixel values.",
                                                "minimum": 0
                                              },
                                              "y": {
                                                "type": "number",
                                                "description": "y-coordinate of the point. Coordinates are pixel values.",
                                                "minimum": 0
                                              }
                                            },
                                            "required": [
                                              "x",
                                              "y"
                                            ],
                                            "example": {
                                              "x": 10,
                                              "y": 10
                                            }
                                          }
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "points"
                                      ],
                                      "example": {
                                        "type": "POLYGON",
                                        "point": [
                                          {
                                            "x": 10,
                                            "y": 10
                                          },
                                          {
                                            "x": 20,
                                            "y": 20
                                          },
                                          {
                                            "x": 10,
                                            "y": 20
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Ellipse",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ELLIPSE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the ellipse. Coordinates are pixel values.",
                                          "minimum": 1
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the ellipse. Coordinates are pixel values.",
                                          "minimum": 1
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height"
                                      ],
                                      "example": {
                                        "type": "ELLIPSE",
                                        "x": 300,
                                        "y": 250,
                                        "width": 75,
                                        "height": 25
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Rotated Rectangle",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ROTATED_RECTANGLE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                        },
                                        "angle": {
                                          "type": "number",
                                          "description": "Clockwise angle in degrees for the rectangle."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height",
                                        "angle"
                                      ],
                                      "example": {
                                        "type": "ROTATED_RECTANGLE",
                                        "x": 320,
                                        "y": 240,
                                        "width": 50,
                                        "height": 25,
                                        "angle": 45
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Keypoint",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "KEYPOINT"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "is_visible": {
                                          "type": "boolean",
                                          "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "is_visible"
                                      ],
                                      "example": {
                                        "type": "KEYPOINT",
                                        "x": 320,
                                        "y": 240,
                                        "is_visible": true
                                      }
                                    }
                                  ]
                                },
                                "labels": {
                                  "description": "List of labels",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "probability": {
                                        "title": "Probability",
                                        "type": "number",
                                        "format": "float",
                                        "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                      },
                                      "source": {
                                        "type": "object",
                                        "properties": {
                                          "user_id": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "User name of the user that added the label or accepted the prediction"
                                          },
                                          "model_id": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Model id of the model that predicted the label"
                                          },
                                          "model_storage_id": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Model storage id of model that predicted the label"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "modified": {
                                  "type": "string",
                                  "description": "Modification date"
                                },
                                "labels_to_revisit": {
                                  "description": "List of labels IDs for which the annotation should be revisited",
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                                    "description": "A UUID, used to identify an annotation."
                                  }
                                }
                              },
                              "required": [
                                "id",
                                "labels",
                                "modified"
                              ]
                            }
                          },
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "kind": {
                            "type": "string",
                            "description": "Kind of annotation (prediction or annotation).",
                            "enum": [
                              "prediction"
                            ]
                          },
                          "media_identifier": {
                            "type": "object",
                            "properties": {
                              "frame_index": {
                                "type": "number",
                                "format": "int32"
                              },
                              "video_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "video_frame"
                                ],
                                "description": "Type of media. 'image' for images, 'video' for videos."
                              }
                            }
                          },
                          "modified": {
                            "type": "string",
                            "description": "Modification date"
                          },
                          "maps": {
                            "description": "List of result media options\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                            "deprecated": true,
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name for the result media option"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Type of the result media"
                                },
                                "url": {
                                  "type": "string",
                                  "description": "Url where the result media can be found"
                                },
                                "binary": {
                                  "type": "string",
                                  "description": "A base 64 encoded representation of the binary data of the result media"
                                },
                                "label_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "roi": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "shape": {
                                      "type": "object",
                                      "title": "Rectangle",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "RECTANGLE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height"
                                      ],
                                      "example": {
                                        "type": "RECTANGLE",
                                        "x": 320,
                                        "y": 240,
                                        "width": 50,
                                        "height": 25
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "Url to get next page with prediction results. Only appears if number of predictions exceeds maximum allowed predictions defined in backend."
                    },
                    "video_prediction_properties": {
                      "type": "object",
                      "properties": {
                        "total_count": {
                          "type": "integer",
                          "description": "Total number of frames returned",
                          "minimum": 0
                        },
                        "start_frame": {
                          "type": "integer",
                          "description": "Integer representing the index of the first returned frame"
                        },
                        "end_frame": {
                          "type": "integer",
                          "description": "Integer representing the index of the last returned frame"
                        },
                        "total_requested_count": {
                          "type": "integer",
                          "description": "Total number of frames requested by the user",
                          "minimum": 0
                        },
                        "requested_start_frame": {
                          "type": "integer",
                          "description": "Index of the start frame requested by the user (inclusive)",
                          "minimum": 0
                        },
                        "requested_end_frame": {
                          "type": "integer",
                          "description": "Index of the end frame requested by the user (inclusive)",
                          "minimum": 0
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Video predictions response": {
                    "value": {
                      "video_predictions": [
                        {
                          "annotations": [
                            {
                              "id": "6138bca43b7b11505c43f2c1",
                              "labels": [
                                {
                                  "color": "#26518eff",
                                  "id": "61387685df33ae8280c33d9d",
                                  "name": "test",
                                  "probability": 1,
                                  "source": {
                                    "user_id": null,
                                    "model_id": "61387685df33ae8280c347b2",
                                    "model_storage_id": "62387685df33ae8280c63a34"
                                  }
                                }
                              ],
                              "modified": "2021-09-08T13:40:44.445000+00:00",
                              "shape": {
                                "height": 14,
                                "type": "ELLIPSE",
                                "width": 8,
                                "x": 37,
                                "y": 37
                              }
                            }
                          ],
                          "id": "6138bd5c3b7b11505c43f2c3",
                          "kind": "prediction",
                          "media_identifier": {
                            "frame_index": 630,
                            "type": "video_frame",
                            "video_id": "6138bca43b7b11505c43f2c1"
                          },
                          "modified": "2021-09-08T13:40:44.448000+00:00"
                        },
                        {
                          "annotations": [
                            {
                              "id": "6138bca43b7b11505c43f2c1",
                              "labels": [
                                {
                                  "color": "#26518eff",
                                  "id": "61387685df33ae8280c33d9d",
                                  "name": "test",
                                  "probability": 0.56,
                                  "source": {
                                    "user_id": null,
                                    "model_id": "61387685df33ae8280c347b2",
                                    "model_storage_id": "62387685df33ae8280c63a34"
                                  }
                                }
                              ],
                              "modified": "2021-09-08T13:39:49.650000+00:00",
                              "shape": {
                                "type": "RECTANGLE",
                                "x": 10,
                                "y": 10,
                                "width": 20,
                                "height": 20
                              }
                            }
                          ],
                          "id": "6138bd253b7b11505c43f2c2",
                          "kind": "prediction",
                          "media_identifier": {
                            "frame_index": 240,
                            "type": "video_frame",
                            "video_id": "6138bca43b7b11505c43f2c1"
                          },
                          "modified": "2021-09-08T13:39:49.653000+00:00",
                          "maps": [
                            {
                              "id": "6138bca43b7b11505c43f2c1",
                              "labels_id": "6138bca43b7b11505c43f2c1",
                              "name": "Result media name",
                              "type": "Result media type",
                              "url": "/api/v1/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/{media_url}/predictions/{prediction.id}/maps/{combined_map_id}",
                              "roi": {
                                "id": "61387685df33ae8280c33d9d",
                                "shape": {
                                  "type": "RECTANGLE",
                                  "height": 45,
                                  "width": 32,
                                  "x": 19,
                                  "y": 38
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "next_page": "/api/v1/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/predictions/{prediction_type}?start_frame=50&frameskip=1",
                      "video_prediction_properties": {
                        "total_count": 2,
                        "start_frame": 0,
                        "end_frame": 630,
                        "total_requested_count": 2,
                        "requested_start_frame": 0,
                        "requested_end_frame": 1000
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No predictions available for the requested media."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/predictions/{prediction_type_or_id}": {
      "get": {
        "tags": [
          "Predictions"
        ],
        "summary": "Get a prediction for a video frame",
        "description": "Get a prediction for a video frame. This endpoint currently only supports 'latest' prediction type, where the server returns the latest prediction from cache. Other types have been deprecated: if you want to generate a fresh prediction with the active model ('online') then use the pipelines/<pipeline_id>:predict endpoint.",
        "operationId": "GetVideoFramePrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "frame_index",
            "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "prediction_type_or_id",
            "style": "simple",
            "description": "Either the id of a prediction or 'latest'. The latter fetches the latest prediction from the cache, if available.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "latest"
                  ]
                }
              ]
            },
            "required": true,
            "example": "latest"
          },
          {
            "in": "query",
            "name": "task_id",
            "description": "The ID of the task in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          },
          {
            "in": "query",
            "name": "roi_id",
            "description": "The ID of the ROI to predict on. Can only be an ID of a user annotated ROI. Note that if you pass an ID for an ROI you should in most cases also pass a task_id. For example, in a detection -> classification chain if a user  annotates a ROI (box for first task) and requests a prediction for this ROI you don't want the detection task to have to find the same object again that the user annotated but immediately skip to the classification task.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prediction successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "description": "List of predictions",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                              "description": "A UUID, used to identify an annotation."
                            },
                            "shape": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "Rectangle",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "RECTANGLE"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "x": {
                                      "type": "number",
                                      "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "y": {
                                      "type": "number",
                                      "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "width": {
                                      "type": "number",
                                      "description": "Width of the rectangle. Coordinates are pixel values.",
                                      "minimum": 1
                                    },
                                    "height": {
                                      "type": "number",
                                      "description": "Height of the rectangle. Coordinates are pixel values.",
                                      "minimum": 1
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "x",
                                    "y",
                                    "width",
                                    "height"
                                  ],
                                  "example": {
                                    "type": "RECTANGLE",
                                    "x": 320,
                                    "y": 240,
                                    "width": 50,
                                    "height": 25
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Polygon",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "POLYGON"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "points": {
                                      "type": "array",
                                      "maxItems": 5000,
                                      "description": "Array of points that define the polygon.",
                                      "items": {
                                        "title": "Point",
                                        "type": "object",
                                        "properties": {
                                          "x": {
                                            "type": "number",
                                            "description": "x-coordinate of the point. Coordinates are pixel values.",
                                            "minimum": 0
                                          },
                                          "y": {
                                            "type": "number",
                                            "description": "y-coordinate of the point. Coordinates are pixel values.",
                                            "minimum": 0
                                          }
                                        },
                                        "required": [
                                          "x",
                                          "y"
                                        ],
                                        "example": {
                                          "x": 10,
                                          "y": 10
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "points"
                                  ],
                                  "example": {
                                    "type": "POLYGON",
                                    "point": [
                                      {
                                        "x": 10,
                                        "y": 10
                                      },
                                      {
                                        "x": 20,
                                        "y": 20
                                      },
                                      {
                                        "x": 10,
                                        "y": 20
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Ellipse",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "ELLIPSE"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "x": {
                                      "type": "number",
                                      "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                    },
                                    "y": {
                                      "type": "number",
                                      "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                    },
                                    "width": {
                                      "type": "number",
                                      "description": "Width of the ellipse. Coordinates are pixel values.",
                                      "minimum": 1
                                    },
                                    "height": {
                                      "type": "number",
                                      "description": "Height of the ellipse. Coordinates are pixel values.",
                                      "minimum": 1
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "x",
                                    "y",
                                    "width",
                                    "height"
                                  ],
                                  "example": {
                                    "type": "ELLIPSE",
                                    "x": 300,
                                    "y": 250,
                                    "width": 75,
                                    "height": 25
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Rotated Rectangle",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "ROTATED_RECTANGLE"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "x": {
                                      "type": "number",
                                      "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                    },
                                    "y": {
                                      "type": "number",
                                      "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                    },
                                    "width": {
                                      "type": "number",
                                      "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                    },
                                    "height": {
                                      "type": "number",
                                      "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                    },
                                    "angle": {
                                      "type": "number",
                                      "description": "Clockwise angle in degrees for the rectangle."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "x",
                                    "y",
                                    "width",
                                    "height",
                                    "angle"
                                  ],
                                  "example": {
                                    "type": "ROTATED_RECTANGLE",
                                    "x": 320,
                                    "y": 240,
                                    "width": 50,
                                    "height": 25,
                                    "angle": 45
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Keypoint",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "KEYPOINT"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "x": {
                                      "type": "number",
                                      "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "y": {
                                      "type": "number",
                                      "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "is_visible": {
                                      "type": "boolean",
                                      "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "x",
                                    "y",
                                    "is_visible"
                                  ],
                                  "example": {
                                    "type": "KEYPOINT",
                                    "x": 320,
                                    "y": 240,
                                    "is_visible": true
                                  }
                                }
                              ]
                            },
                            "labels": {
                              "description": "List of labels",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "probability": {
                                    "title": "Probability",
                                    "type": "number",
                                    "format": "float",
                                    "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                  },
                                  "source": {
                                    "type": "object",
                                    "properties": {
                                      "user_id": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "description": "User name of the user that added the label or accepted the prediction"
                                      },
                                      "model_id": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "description": "Model id of the model that predicted the label"
                                      },
                                      "model_storage_id": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "description": "Model storage id of model that predicted the label"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "modified": {
                              "type": "string",
                              "description": "Modification date"
                            },
                            "labels_to_revisit": {
                              "description": "List of labels IDs for which the annotation should be revisited",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                                "description": "A UUID, used to identify an annotation."
                              }
                            }
                          },
                          "required": [
                            "id",
                            "labels",
                            "modified"
                          ]
                        }
                      },
                      "id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "kind": {
                        "type": "string",
                        "description": "Kind of annotation (prediction or annotation).",
                        "enum": [
                          "prediction"
                        ]
                      },
                      "media_identifier": {
                        "type": "object",
                        "properties": {
                          "frame_index": {
                            "type": "number",
                            "format": "int32"
                          },
                          "video_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "video_frame"
                            ],
                            "description": "Type of media. 'image' for images, 'video' for videos."
                          }
                        }
                      },
                      "modified": {
                        "type": "string",
                        "description": "Modification date"
                      },
                      "maps": {
                        "description": "List of result media options\nThis parameter is deprecated and should not be used, it will be removed in the future.",
                        "deprecated": true,
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name for the result media option"
                            },
                            "type": {
                              "type": "string",
                              "description": "Type of the result media"
                            },
                            "url": {
                              "type": "string",
                              "description": "Url where the result media can be found"
                            },
                            "binary": {
                              "type": "string",
                              "description": "A base 64 encoded representation of the binary data of the result media"
                            },
                            "label_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "roi": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "shape": {
                                  "type": "object",
                                  "title": "Rectangle",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "RECTANGLE"
                                      ],
                                      "description": "Type of the shape."
                                    },
                                    "x": {
                                      "type": "number",
                                      "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "y": {
                                      "type": "number",
                                      "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                      "minimum": 0
                                    },
                                    "width": {
                                      "type": "number",
                                      "description": "Width of the rectangle. Coordinates are pixel values.",
                                      "minimum": 1
                                    },
                                    "height": {
                                      "type": "number",
                                      "description": "Height of the rectangle. Coordinates are pixel values.",
                                      "minimum": 1
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "x",
                                    "y",
                                    "width",
                                    "height"
                                  ],
                                  "example": {
                                    "type": "RECTANGLE",
                                    "x": 320,
                                    "y": 240,
                                    "width": 50,
                                    "height": 25
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Video frame prediction response": {
                    "value": {
                      "annotations": [
                        {
                          "id": "6138bca43b7b11505c43f2c1",
                          "labels": [
                            {
                              "color": "#00c3ffff",
                              "id": "610a9065a0d4fbb541cac729",
                              "name": "test1",
                              "probability": 0.81,
                              "source": {
                                "user_id": null,
                                "model_id": "61387685df33ae8280c347b2",
                                "model_storage_id": "62387685df33ae8280c63a34"
                              }
                            }
                          ],
                          "modified": "2021-08-04T13:06:47.056000+00:00",
                          "shape": {
                            "height": 55,
                            "type": "ELLIPSE",
                            "width": 31,
                            "x": 23,
                            "y": 9
                          }
                        }
                      ],
                      "id": "610a90e7a0d4fbb541cac7b0",
                      "kind": "prediction",
                      "media_identifier": {
                        "frame_index": 420,
                        "type": "video_frame",
                        "video_id": "610a908ea0d4fbb541cac741"
                      },
                      "modified": "2021-08-04T13:06:47.056000+00:00",
                      "maps": [
                        {
                          "id": "6138bca43b7b11505c43f2c1",
                          "labels_id": "6138bca43b7b11505c43f2c1",
                          "name": "Result media name",
                          "type": "Result media type",
                          "url": "/api/v1/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/{media_url}/predictions/{prediction.id}/maps/{combined_map_id}",
                          "roi": {
                            "id": "61387685df33ae8280c33d9d",
                            "shape": {
                              "type": "RECTANGLE",
                              "height": 45,
                              "width": 32,
                              "x": 19,
                              "y": 38
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No prediction available for the requested media."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/active": {
      "get": {
        "tags": [
          "Active Learning"
        ],
        "summary": "Get the active dataset",
        "description": "Retrieve active dataset for a project. The active dataset is the set of images and video frames that are suggested for annotation by the active learning algorithm.",
        "operationId": "GetActiveDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested media entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active_set": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "dataset_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "description": "Upload time of the media file",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "active_frames": {
                                "type": "array",
                                "description": "List of video frame indices",
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "dataset_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video.",
                                "enum": [
                                  "video"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "Combined media list response": {
                    "value": {
                      "active_set": [
                        {
                          "active_frames": [
                            30,
                            0
                          ],
                          "dataset_id": "6139eab61e3343cd22a41a65",
                          "id": "6139ec7555f78343bad38d2b",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "earth",
                          "state": "annotated",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/thumb",
                          "type": "video",
                          "upload_time": "2021-09-09T11:13:57.407000+00:00"
                        },
                        {
                          "dataset_id": "6139eab61e3343cd22a41a65",
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/full ",
                            "height": 331,
                            "width": 584,
                            "size": 128,
                            "extension": ".png"
                          },
                          "name": "dummy_images",
                          "state": "none",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "image",
                          "upload_time": "2021-09-09T15:08:54.118000+00:00"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No active media found in dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "No active media response": {
                    "value": {
                      "http_status": 204,
                      "message": "No active media found in dataset.",
                      "error_code": "no_active_media"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Active set requested on a non-trainable task response": {
                    "value": {
                      "error_code": "active_set_on_non_trainable_task",
                      "http_status": 400,
                      "message": "Task node with ID 63120c2a5ca5eb9986a821c8 is not trainable."
                    }
                  },
                  "Task not part of the project response": {
                    "value": {
                      "error_code": "active_set_on_non_trainable_task",
                      "http_status": 400,
                      "message": "Task with id 63120c2a5ca5eb9986a821c7 can not be found in project 63120c2a5ca5eb9986a821ca."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests": {
      "post": {
        "tags": [
          "Tests"
        ],
        "summary": "Start new model test job",
        "description": "Starts a new model test job which creates and populates a test resource",
        "operationId": "TriggerModelTestJob",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "model_group_id",
                  "model_id",
                  "dataset_ids"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the test"
                  },
                  "model_group_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "model_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "dataset_ids": {
                    "type": "array",
                    "description": "Array of dataset ids",
                    "items": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  },
                  "metric": {
                    "type": "string",
                    "enum": [
                      "global"
                    ],
                    "description": "Pick global to compute the media-level performance (e.g., accuracy), and pick local to compute localized metrics \\\n(e.g., dice for segmentation and f-measure for detection). If no value is passed, we default to local metric.\n"
                  }
                }
              },
              "examples": {
                "Creating test": {
                  "value": {
                    "name": "Sample model test",
                    "model_group_id": "62df95bfc7e3b80a6732bbf8",
                    "model_id": "62df9720412a32f247f9853b",
                    "dataset_ids": [
                      "62df95bfc7e3b80a6732bbf5"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested tests info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Successfully started job response": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Missing required parameter response": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "Missing required query parameter 'model_group_id'"
                    }
                  },
                  "Invalid id response": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "'model_group_id' must be a well-formed MongoDB ObjectID - got '1234' instead."
                    }
                  },
                  "Too many dataset ids response": {
                    "value": {
                      "error_code": "bad_request",
                      "http_status": 400,
                      "message": "List parameter 'dataset_ids' should have exactly one item in current version"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "Get info about all tests in project",
        "description": "Get all tests in the project. Includes info of the model, datasets and the job id.",
        "operationId": "GetAllTestsInAProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested tests info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "test_results": {
                      "type": "array",
                      "description": "Array of tests",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "name": {
                            "type": "string",
                            "description": "Test name",
                            "minLength": 1
                          },
                          "creation_time": {
                            "type": "string",
                            "description": "Creation time of the test"
                          },
                          "job_info": {
                            "type": "object",
                            "description": "Info of job related to the model test result. This attribute is only present after job is created for the model test.",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "status": {
                                "type": "string",
                                "description": "Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ]"
                              }
                            }
                          },
                          "datasets_info": {
                            "type": "array",
                            "description": "Array of datasets",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "is_deleted": {
                                  "type": "boolean",
                                  "description": "boolean showing whether the dataset is deleted"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset"
                                },
                                "n_images": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Number of images in the dataset"
                                },
                                "n_frames": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Number of frames in the dataset"
                                },
                                "n_samples": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Number of samples in the dataset"
                                }
                              }
                            }
                          },
                          "model_info": {
                            "type": "object",
                            "properties": {
                              "group_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "n_labels": {
                                "type": "number",
                                "format": "int32",
                                "description": "Number of labels model was trained with"
                              },
                              "task_type": {
                                "type": "string",
                                "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                              },
                              "template_id": {
                                "type": "string",
                                "description": "Name of the model template for the model"
                              },
                              "optimization_type": {
                                "type": "string",
                                "description": "Optimization type of the model, one of [ NONE, MO, POT, NNCF ]"
                              },
                              "version": {
                                "type": "number",
                                "format": "int32",
                                "description": "Version of the model"
                              }
                            }
                          },
                          "scores": {
                            "type": "array",
                            "description": "Array of scores",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the metric"
                                },
                                "value": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Value of the score"
                                },
                                "label_id": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "ID of the label corresponding to the score. If  null, the score is for all labels"
                                }
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "creation_time",
                          "datasets_info",
                          "job_info",
                          "model_info",
                          "scores"
                        ]
                      }
                    }
                  },
                  "required": [
                    "test_results"
                  ]
                },
                "examples": {
                  "Successful response": {
                    "value": {
                      "test_results": [
                        {
                          "creation_time": "2022-07-29T07:27:49.631000+00:00",
                          "datasets_info": [
                            {
                              "id": "62df95bfc7e3b80a6732bbf5",
                              "is_deleted": false,
                              "name": "Dataset",
                              "n_frames": 0,
                              "n_images": 0,
                              "n_samples": 0
                            }
                          ],
                          "id": "62e38bf55d3d950c738e5615",
                          "job_info": {
                            "id": "62e38bf55d3d950c738e5613",
                            "status": "INFERRING"
                          },
                          "model_info": {
                            "group_id": "62df95bfc7e3b80a6732bbf8",
                            "id": "62df9720412a32f247f9853b",
                            "n_labels": 2,
                            "task_type": "DETECTION",
                            "template_id": "Custom_Object_Detection_Gen3_ATSS",
                            "optimization_type": "NONE",
                            "precision": [
                              "FP32"
                            ],
                            "version": 1
                          },
                          "name": "Sample model test",
                          "scores": []
                        },
                        {
                          "creation_time": "2022-07-28T15:53:02.690000+00:00",
                          "datasets_info": [
                            {
                              "id": "62df95bfc7e3b80a6732bbf5",
                              "is_deleted": false,
                              "n_frames": 0,
                              "n_images": 250,
                              "n_samples": 250,
                              "name": "Dataset"
                            }
                          ],
                          "id": "62e2b0deddb0eebbcb1c1a0c",
                          "job_info": {
                            "id": "62e2b0deddb0eebbcb1c1a0a",
                            "status": "DONE"
                          },
                          "model_info": {
                            "group_id": "62df95bfc7e3b80a6732bbf8",
                            "id": "62df9720412a32f247f9853b",
                            "n_labels": 2,
                            "task_type": "DETECTION",
                            "template_id": "Custom_Object_Detection_Gen3_ATSS",
                            "optimization_type": "MO",
                            "precision": [
                              "FP32"
                            ],
                            "version": 1
                          },
                          "name": "Sample model test",
                          "scores": [
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfd",
                              "name": "F_measure",
                              "value": 0.054545454545454536
                            },
                            {
                              "label_id": null,
                              "name": "F_measure",
                              "value": 0.05357142857142856
                            },
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfb",
                              "name": "F_measure",
                              "value": 0
                            }
                          ]
                        },
                        {
                          "creation_time": "2022-07-26T16:18:48.316000+00:00",
                          "datasets_info": [
                            {
                              "id": "62df95bfc7e3b80a6732bbf5",
                              "is_deleted": false,
                              "n_frames": 0,
                              "n_images": 250,
                              "n_samples": 250,
                              "name": "Dataset"
                            }
                          ],
                          "id": "62e013e856febca4609706c6",
                          "job_info": {
                            "id": "62e013e756febca4609706c4",
                            "status": "DONE"
                          },
                          "model_info": {
                            "group_id": "62df95bfc7e3b80a6732bbf8",
                            "id": "62df9720412a32f247f9853b",
                            "n_labels": 2,
                            "task_type": "DETECTION",
                            "template_id": "Custom_Object_Detection_Gen3_ATSS",
                            "optimization_type": "POT",
                            "precision": [
                              "FP32"
                            ],
                            "version": 1
                          },
                          "name": "test",
                          "scores": [
                            {
                              "label_id": null,
                              "name": "F_measure",
                              "value": 0.05357142857142856
                            },
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfd",
                              "name": "F_measure",
                              "value": 0.054545454545454536
                            },
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfb",
                              "name": "F_measure",
                              "value": 0
                            }
                          ]
                        },
                        {
                          "creation_time": "2022-07-26T14:40:22.778000+00:00",
                          "datasets_info": [
                            {
                              "id": "62dffcd67dcbc16c629a3e65",
                              "is_deleted": true,
                              "n_frames": 0,
                              "n_images": 0,
                              "n_samples": 0,
                              "name": "Old Dataset"
                            }
                          ],
                          "id": "62dffcd67dcbc16c629a3e64",
                          "job_info": {
                            "id": "62dffcd67dcbc16c629a3e62",
                            "status": "DONE"
                          },
                          "model_info": {
                            "group_id": "62df95bfc7e3b80a6732bbf8",
                            "id": "62df9720412a32f247f9853b",
                            "n_labels": 2,
                            "task_type": "DETECTION",
                            "template_id": "Custom_Object_Detection_Gen3_ATSS",
                            "optimization_type": "POT",
                            "precision": [
                              "FP32"
                            ],
                            "version": 1
                          },
                          "name": "test",
                          "scores": [
                            {
                              "label_id": null,
                              "name": "F_measure",
                              "value": 0.04921700223713645
                            },
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfd",
                              "name": "F_measure",
                              "value": 0.0501138952164009
                            },
                            {
                              "label_id": "62df95bfc7e3b80a6732bbfb",
                              "name": "F_measure",
                              "value": 0
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests/{test_id}": {
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "Get info about a test in project",
        "description": "Get info of test in the project. Includes info of the model, datasets and the job id.",
        "operationId": "GetTestInAProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "test_id",
            "style": "simple",
            "description": "The ID of the test of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested test info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Test name",
                      "minLength": 1
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the test"
                    },
                    "job_info": {
                      "type": "object",
                      "description": "Info of job related to the model test result. This attribute is only present after job is created for the model test.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "status": {
                          "type": "string",
                          "description": "Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ]"
                        }
                      }
                    },
                    "datasets_info": {
                      "type": "array",
                      "description": "Array of datasets",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "is_deleted": {
                            "type": "boolean",
                            "description": "boolean showing whether the dataset is deleted"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset"
                          },
                          "n_images": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of images in the dataset"
                          },
                          "n_frames": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of frames in the dataset"
                          },
                          "n_samples": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of samples in the dataset"
                          }
                        }
                      }
                    },
                    "model_info": {
                      "type": "object",
                      "properties": {
                        "group_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "n_labels": {
                          "type": "number",
                          "format": "int32",
                          "description": "Number of labels model was trained with"
                        },
                        "task_type": {
                          "type": "string",
                          "description": "Task type; should be one of: [ classification, detection, segmentation, crop, dataset ]"
                        },
                        "template_id": {
                          "type": "string",
                          "description": "Name of the model template for the model"
                        },
                        "optimization_type": {
                          "type": "string",
                          "description": "Optimization type of the model, one of [ NONE, MO, POT, NNCF ]"
                        },
                        "version": {
                          "type": "number",
                          "format": "int32",
                          "description": "Version of the model"
                        }
                      }
                    },
                    "scores": {
                      "type": "array",
                      "description": "Array of scores",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the metric"
                          },
                          "value": {
                            "type": "number",
                            "format": "float",
                            "description": "Value of the score"
                          },
                          "label_id": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "ID of the label corresponding to the score. If  null, the score is for all labels"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "creation_time",
                    "datasets_info",
                    "job_info",
                    "model_info",
                    "scores"
                  ]
                },
                "examples": {
                  "Running test response": {
                    "value": {
                      "creation_time": "2022-07-28T15:53:02.690000+00:00",
                      "datasets_info": [
                        {
                          "id": "62df95bfc7e3b80a6732bbf5",
                          "name": "Dataset",
                          "is_deleted": false,
                          "n_frames": 0,
                          "n_images": 0,
                          "n_samples": 0
                        }
                      ],
                      "id": "62e2b0deddb0eebbcb1c1a0c",
                      "job_info": {
                        "id": "62e2b0deddb0eebbcb1c1a0a",
                        "status": "INFERRING"
                      },
                      "model_info": {
                        "group_id": "62df95bfc7e3b80a6732bbf8",
                        "id": "62df9720412a32f247f9853b",
                        "n_labels": 2,
                        "task_type": "DETECTION",
                        "template_id": "Custom_Object_Detection_Gen3_ATSS",
                        "optimization_type": "MO",
                        "precision": [
                          "FP32"
                        ],
                        "version": 1
                      },
                      "name": "Sample model test",
                      "scores": []
                    }
                  },
                  "Finished test response": {
                    "value": {
                      "creation_time": "2022-07-28T15:53:02.690000+00:00",
                      "datasets_info": [
                        {
                          "id": "62df95bfc7e3b80a6732bbf5",
                          "is_deleted": false,
                          "n_frames": 0,
                          "n_images": 250,
                          "n_samples": 250,
                          "name": "Dataset"
                        }
                      ],
                      "id": "62e2b0deddb0eebbcb1c1a0c",
                      "job_info": {
                        "id": "62e2b0deddb0eebbcb1c1a0a",
                        "status": "DONE"
                      },
                      "model_info": {
                        "group_id": "62df95bfc7e3b80a6732bbf8",
                        "id": "62df9720412a32f247f9853b",
                        "n_labels": 2,
                        "task_type": "DETECTION",
                        "template_id": "Custom_Object_Detection_Gen3_ATSS",
                        "optimization_type": "MO",
                        "precision": [
                          "FP32"
                        ],
                        "version": 1
                      },
                      "name": "Sample model test",
                      "scores": [
                        {
                          "label_id": null,
                          "name": "F_measure",
                          "value": 0.05357142857142856
                        },
                        {
                          "label_id": "62df95bfc7e3b80a6732bbfb",
                          "name": "F_measure",
                          "value": 0
                        },
                        {
                          "label_id": "62df95bfc7e3b80a6732bbfd",
                          "name": "F_measure",
                          "value": 0.054545454545454536
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Test not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Test with id 62e2b0deddb0eebbcb1c1a0ca could not be found.",
                      "error_code": "test_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tests"
        ],
        "summary": "Delete all info about a test",
        "description": "Delete all the information relative to a test in the project.",
        "operationId": "DeleteTestInAProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "test_id",
            "style": "simple",
            "description": "The ID of the test of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Successful delete": {
                    "value": {
                      "result": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Test not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Test with id 62e2b0deddb0eebbcb1c1a0ca could not be found.",
                      "error_code": "test_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests/{test_id}/results:query": {
      "post": {
        "tags": [
          "Tests"
        ],
        "summary": "Retrieve specific media test results by applying a query on the test",
        "description": "Allows the user to quickly filter through their test results by supplying one or more filters to match results against. Currently you can filter on 'score' and 'label_id' fields. The following operators can be used for score 'greater', 'less', 'greater_or_equal', 'less_or_equal'. The following operator can be used for label id 'equal'. If a non-allowed filter is used, then the endpoint will respond with the possible operators that are allowed.",
        "operationId": "FilterDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "test_id",
            "style": "simple",
            "description": "The ID of the test of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by, only 'score' available",
            "schema": {
              "type": "string",
              "enum": [
                "score"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "condition",
                  "rules"
                ],
                "properties": {
                  "condition": {
                    "type": "string",
                    "enum": [
                      "and"
                    ],
                    "description": "Connection between the rules of the query"
                  },
                  "rules": {
                    "type": "array",
                    "description": "list of rules used to filter test media results",
                    "maxItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "field",
                        "operator",
                        "value"
                      ],
                      "properties": {
                        "field": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "value": {
                          "type": [
                            "string",
                            "number",
                            "null"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Filtering a dataset": {
                  "value": {
                    "condition": "and",
                    "rules": [
                      {
                        "field": "label_id",
                        "operator": "equal",
                        "value": null
                      },
                      {
                        "field": "score",
                        "operator": "greater",
                        "value": 0.5
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Media items matching the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "media_information",
                              "name",
                              "test_result",
                              "thumbnail",
                              "type",
                              "preprocessing"
                            ],
                            "properties": {
                              "annotation_scene_id": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "annotation_state_per_task": {
                                "type": "array",
                                "description": "Annotation state per task of the image.",
                                "items": {
                                  "type": "object",
                                  "title": "Annotation state aggregated per task",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                                      "enum": [
                                        "to_revisit",
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        null
                                      ]
                                    }
                                  },
                                  "example": {
                                    "task_id": "61012cdb1d38a5e71ef3bafd",
                                    "state": "to_revisit"
                                  }
                                }
                              },
                              "last_annotator_id": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "preprocessing": {
                                "type": "string",
                                "description": "Status of the preprocessing operation",
                                "enum": [
                                  "SCHEDULED",
                                  "IN_PROGRESS",
                                  "FINISHED",
                                  "FAILED"
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "roi_id": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                                    "description": "A UUID, used to identify an annotation."
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "test_result": {
                                "type": "object",
                                "description": "The media's test info",
                                "properties": {
                                  "annotation_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "prediction_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "scores": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label_id": {
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the metric of this score"
                                        },
                                        "value": {
                                          "type": "number",
                                          "description": "The score in percentage (0-100)"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, and 'video_frame' for video frames.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "uploader_id": {
                                "type": "string",
                                "description": "The ID of the user who uploaded the image"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "frame_index",
                              "media_information",
                              "name",
                              "test_result",
                              "thumbnail",
                              "type",
                              "video_id",
                              "preprocessing"
                            ],
                            "properties": {
                              "annotation_scene_id": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "annotation_state_per_task": {
                                "type": "array",
                                "description": "Annotation state per task of the image.",
                                "items": {
                                  "type": "object",
                                  "title": "Annotation state aggregated per task",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null ",
                                      "enum": [
                                        "to_revisit",
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        null
                                      ]
                                    }
                                  },
                                  "example": {
                                    "task_id": "61012cdb1d38a5e71ef3bafd",
                                    "state": "to_revisit"
                                  }
                                }
                              },
                              "last_annotator_id": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "frame_index": {
                                "type": "integer",
                                "description": "The index of the video frame (0-based)"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "preprocessing": {
                                "type": "string",
                                "description": "Status of the preprocessing operation",
                                "enum": [
                                  "SCHEDULED",
                                  "IN_PROGRESS",
                                  "FINISHED",
                                  "FAILED"
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The title of the video frame"
                              },
                              "roi_id": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "example": "e42cf382-5f7b-4fda-980a-fa0fab00243c",
                                    "description": "A UUID, used to identify an annotation."
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "test_result": {
                                "type": "object",
                                "description": "The media's test info",
                                "properties": {
                                  "annotation_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "prediction_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "scores": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label_id": {
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the metric of this score"
                                        },
                                        "value": {
                                          "type": "number",
                                          "description": "The score in percentage (0-100)"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "uploader_id": {
                                "type": "string",
                                "description": "The ID of the user who uploaded the video"
                              },
                              "video_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_images": {
                      "type": "integer",
                      "description": "Total images that match the query."
                    },
                    "total_matched_videos": {
                      "type": "integer",
                      "description": "Total videos that match the query."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    },
                    "total_images": {
                      "type": "integer",
                      "description": "Total images in the dataset."
                    },
                    "total_videos": {
                      "type": "integer",
                      "description": "Total videos in the dataset."
                    }
                  }
                },
                "examples": {
                  "Combined media list response": {
                    "value": {
                      "media": [
                        {
                          "annotation_scene_id": null,
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "646c7357b16ae00cc67f2d2b"
                            }
                          ],
                          "last_annotator_id": null,
                          "id": "646c73b8b16ae00cc67f2e0e",
                          "media_information": {
                            "display_url": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/images/646c73b8b16ae00cc67f2e0e/display/full ",
                            "height": 549,
                            "size": 68583,
                            "width": 500,
                            "extension": ".png"
                          },
                          "preprocessing": "FINISHED",
                          "name": "image_0738",
                          "roi_id": null,
                          "test_result": {
                            "annotation_id": "646c73b8b16ae00cc67f2e10",
                            "prediction_id": "646c94e338f43e0a9cc18a47",
                            "scores": [
                              {
                                "label_id": null,
                                "name": "Accuracy",
                                "value": 1
                              },
                              {
                                "label_id": "646c7357b16ae00cc67f2d2f",
                                "name": "Accuracy",
                                "value": 1
                              }
                            ]
                          },
                          "thumbnail": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/images/646c73b8b16ae00cc67f2e0e/display/thumb",
                          "type": "image",
                          "upload_time": "2023-05-23T08:05:12.287000+00:00",
                          "uploader_id": "user@company.com"
                        },
                        {
                          "annotation_scene_id": null,
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "646c7357b16ae00cc67f2d2b"
                            }
                          ],
                          "last_annotator_id": null,
                          "id": "646c73b8b16ae00cc67f2e12",
                          "media_information": {
                            "display_url": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/images/646c73b8b16ae00cc67f2e12/display/full ",
                            "height": 512,
                            "size": 77353,
                            "width": 499,
                            "extension": ".png"
                          },
                          "preprocessing": "FINISHED",
                          "name": "image_0739",
                          "roi_id": null,
                          "test_result": {
                            "annotation_id": "646c73b8b16ae00cc67f2e14",
                            "prediction_id": "646c94e338f43e0a9cc18b5b",
                            "scores": [
                              {
                                "label_id": null,
                                "name": "Accuracy",
                                "value": 1
                              },
                              {
                                "label_id": "646c7357b16ae00cc67f2d2f",
                                "name": "Accuracy",
                                "value": 1
                              }
                            ]
                          },
                          "thumbnail": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/images/646c73b8b16ae00cc67f2e12/display/thumb",
                          "type": "image",
                          "upload_time": "2023-05-23T08:05:12.502000+00:00",
                          "uploader_id": "user@company.com"
                        },
                        {
                          "annotation_scene_id": null,
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "646c7357b16ae00cc67f2d2b"
                            }
                          ],
                          "last_annotator_id": null,
                          "frame_index": 408,
                          "media_information": {
                            "display_url": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/videos/646c9475b16ae00cc67f2ea6/frames/408/display/full",
                            "height": 180,
                            "width": 320
                          },
                          "preprocessing": "FINISHED",
                          "name": "BigBuckBunny_320x180_f408",
                          "roi_id": null,
                          "test_result": {
                            "annotation_id": "646c9476b16ae00cc67f2ecb",
                            "prediction_id": "646c94e338f43e0a9cc18a5f",
                            "scores": [
                              {
                                "label_id": null,
                                "name": "Accuracy",
                                "value": 1
                              },
                              {
                                "label_id": "646c7357b16ae00cc67f2d2f",
                                "name": "Accuracy",
                                "value": 1
                              }
                            ]
                          },
                          "thumbnail": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/videos/646c9475b16ae00cc67f2ea6/frames/408/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2023-05-23T10:24:53.716000+00:00",
                          "uploader_id": "user@company.com",
                          "video_id": "646c9475b16ae00cc67f2ea6"
                        },
                        {
                          "annotation_scene_id": null,
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "646c7357b16ae00cc67f2d2b"
                            }
                          ],
                          "last_annotator_id": null,
                          "frame_index": 3096,
                          "media_information": {
                            "display_url": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/videos/646c9475b16ae00cc67f2ea6/frames/3096/display/full",
                            "height": 180,
                            "width": 320
                          },
                          "preprocessing": "FINISHED",
                          "name": "BigBuckBunny_320x180_f3096",
                          "roi_id": null,
                          "test_result": {
                            "annotation_id": "646c947cb16ae00cc67f2fab",
                            "prediction_id": "646c94e338f43e0a9cc18bd0",
                            "scores": [
                              {
                                "label_id": null,
                                "name": "Accuracy",
                                "value": 1
                              },
                              {
                                "label_id": "646c7357b16ae00cc67f2d2f",
                                "name": "Accuracy",
                                "value": 1
                              }
                            ]
                          },
                          "thumbnail": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/datasets/646c7381b16ae00cc67f2d89/media/videos/646c9475b16ae00cc67f2ea6/frames/3096/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2023-05-23T10:24:53.716000+00:00",
                          "uploader_id": "user@company.com",
                          "video_id": "646c9475b16ae00cc67f2ea6"
                        }
                      ],
                      "total_images": 44,
                      "total_matched_images": 22,
                      "total_matched_video_frames": 16,
                      "total_matched_videos": 1,
                      "total_videos": 1,
                      "next_page": "/api/v1/organizations/5b1f89f3-aba5-4a5f-84ab-de9abb8e0633/workspaces/646b7a57b16ae00cc67f2636/projects/646c7356b16ae00cc67f2d27/tests/60d31793d5f1fb7e6e3c1a59/results:query?limit=10&skip=10&sort_by=score&sort_direction=ASC"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Test not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Test with id 62e2b0deddb0eebbcb1c1a0ca could not be found.",
                      "error_code": "test_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests/{test_id}/predictions/{prediction_id}": {
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "Get a prediction from a test in project",
        "description": "Get a prediction from a test in the project.",
        "operationId": "GetPredictionFromTestInAProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "test_id",
            "style": "simple",
            "description": "The ID of the test of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "prediction_id",
            "style": "simple",
            "description": "The ID of the prediction",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Prediction successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "predictions": {
                      "description": "List of predictions",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "media_identifier": {
                      "type": "object",
                      "properties": {
                        "image_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "image"
                          ],
                          "description": "Type of media. 'image' for images, 'video' for videos."
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "Modification date"
                    }
                  }
                },
                "examples": {
                  "Image prediction response": {
                    "value": {
                      "predictions": [
                        {
                          "id": "6138bca43b7b11505c43f2c1",
                          "labels": [
                            {
                              "id": "61387685df33ae8280c33d9d",
                              "probability": 0.87
                            }
                          ],
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "id": "6138afea3b7b11505c43f2c0",
                      "media_identifier": {
                        "image_id": "6138af293b7b11505c43f2bc",
                        "type": "image"
                      },
                      "created": "2021-09-08T12:43:22.290000+00:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Test not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Test with id 62e2b0deddb0eebbcb1c1a0ca could not be found.",
                      "error_code": "test_not_found"
                    }
                  },
                  "Prediction not found response": {
                    "description": "The prediction could not be found.",
                    "value": {
                      "http_status": 404,
                      "message": "Prediction with prediction id 60ec6bbfb98caeb87e34306e could not be found.",
                      "error_code": "prediction_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}": {
      "get": {
        "tags": [
          "Training dataset versions"
        ],
        "summary": "Get statistics for a training revision",
        "description": "Retrieves the training revision statistics overview. A training revision is a specific dataset that has been split into the three Deep Learning subsets; Train, Test, and Validation. The \"subset_info\" retrieves the split of images and frames (aggregated together from the dataset) among the Train, Test, and Validation subsets. The \"dataset_info\" retrieves the distribution of images, videos, and frames within the whole dataset.",
        "operationId": "GetTrainingRevisionStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_revision_id",
            "style": "simple",
            "description": "The ID of the dataset of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics for the requested training revision",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Number of images in the dataset",
                      "type": "number",
                      "format": "int32"
                    },
                    "creation_time": {
                      "type": "string",
                      "description": "Creation time of the project"
                    },
                    "subset_info": {
                      "description": "Number of items in each subset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "training": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of media in the training set"
                          },
                          "testing": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of media in the testing set"
                          },
                          "validation": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of media in the validation set"
                          }
                        }
                      }
                    },
                    "dataset_info": {
                      "description": "Amount per media type in the dataset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "videos": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of videos in the dataset"
                          },
                          "frames": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of frames in the dataset"
                          },
                          "images": {
                            "type": "number",
                            "format": "int32",
                            "description": "Number of images in the dataset"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Training revision detail response": {
                    "value": {
                      "id": "619b97d3f19eee235e66b8f3",
                      "subset_info": {
                        "training": 40,
                        "testing": 10,
                        "validation": 10
                      },
                      "dataset_info": {
                        "videos": 1,
                        "frames": 30,
                        "images": 30
                      },
                      "creation_time": "2022-06-18T11:40:34.790000+00:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media": {
      "get": {
        "tags": [
          "Training dataset versions"
        ],
        "summary": "Retrieve all media in a training revision",
        "description": "Allows the user to get all the media items in a training revision. A training revision is a dataset which contains the Training, Testing, and Validation subsets. A training revision ID can be obtained after starting at least one training inference.",
        "operationId": "GetMediaForDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_revision_id",
            "style": "simple",
            "description": "The ID of the dataset of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by. ",
            "schema": {
              "type": "string",
              "enum": [
                "media_name",
                "media_upload_date",
                "media_width",
                "media_height",
                "media_size",
                "annotation_creation_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media items in the training revision",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "description": "Upload time of the media file",
                                "type": "string"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene  if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "matched_frames": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "Number of frames in the video that match the filter. Only returned when filtering by annotation properties."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "format": "int32",
                                "description": "The video frame index"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_images": {
                      "type": "integer",
                      "description": "Total images that match the query."
                    },
                    "total_matched_videos": {
                      "type": "integer",
                      "description": "Total videos that match the query."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    },
                    "total_images": {
                      "type": "integer",
                      "description": "Total images in the dataset."
                    },
                    "total_videos": {
                      "type": "integer",
                      "description": "Total videos in the dataset."
                    }
                  }
                },
                "examples": {
                  "Combined media list response": {
                    "value": {
                      "media": [
                        {
                          "id": "613a23866674c43ae7a777aa",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/full ",
                            "height": 331,
                            "width": 584,
                            "size": 128,
                            "extension": ".png"
                          },
                          "name": "dummy_images",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "image",
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "matched_frames": 22
                        }
                      ],
                      "next_page": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media:query?limit=2&skip=4",
                      "total_matched_images": 1,
                      "total_matched_videos": 1,
                      "total_matched_video_frames": 2,
                      "total_images": 48,
                      "total_videos": 7
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  },
                  "Dataset is not a training dataset": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with ID 60ec6bbfb98caeb87e343066 is not a training dataset.",
                      "error_code": "dataset_is_not_a_training_dataset"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Training revision not found response": {
                    "description": "Note, a training revision is a type of dataset.",
                    "value": {
                      "error_code": "training_revision_not_found",
                      "http_status": 404,
                      "message": "Training revision with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media:query": {
      "post": {
        "tags": [
          "Training dataset versions"
        ],
        "summary": "Retrieve specific media items by applying a query on the training revision",
        "description": "Allows the user to quickly filter through their training revision by supplying one or more filters to match media items against. Currently you can filter on 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id',  'annotation_scene_state', 'annotation_creation_date', 'shape_type', 'shape_area_percentage', 'shape_area_pixel', 'subset' and 'user_name'. The following operators can be used 'greater', 'less', 'greater_or_equal', 'less_or_equal', 'equal',  'not_equal', 'in' and 'not_in'. Not all combinations of filter and operator can be used. If a combination is not  supported then the endpoint will respond with the possible operators that are allowed for the filter.",
        "operationId": "FilterMediaInTrainingRevision",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_revision_id",
            "style": "simple",
            "description": "The ID of the dataset of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by. ",
            "schema": {
              "type": "string",
              "enum": [
                "media_name",
                "media_upload_date",
                "media_width",
                "media_height",
                "media_size",
                "annotation_creation_date"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rules"
                ],
                "properties": {
                  "condition": {
                    "description": "Condition to apply to group of rules.",
                    "type": "string",
                    "enum": [
                      "and"
                    ]
                  },
                  "rules": {
                    "type": "array",
                    "description": "All the rules to filter a dataset with.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "properties": {
                            "field": {
                              "description": "Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.",
                              "type": "string",
                              "enum": [
                                "media_upload_date",
                                "media_height",
                                "media_width",
                                "media_name",
                                "label_id",
                                "annotation_creation_date",
                                "annotation_scene_state",
                                "shape_type",
                                "shape_area_percentage",
                                "shape_area_pixel",
                                "user_name"
                              ]
                            },
                            "operator": {
                              "description": "Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'",
                              "type": "string",
                              "enum": [
                                "greater",
                                "less",
                                "greater_or_equal",
                                "less_or_equal",
                                "equal",
                                "not_equal",
                                "in",
                                "not_in",
                                "regex"
                              ]
                            },
                            "value": {
                              "description": "Value that the field should match to in combination with the operator",
                              "type": [
                                "array",
                                "string",
                                "integer"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Filtering a dataset": {
                  "value": {
                    "condition": "and",
                    "rules": [
                      {
                        "field": "label_id",
                        "operator": "in",
                        "value": [
                          "id_1",
                          "id_2"
                        ]
                      },
                      {
                        "field": "media_width",
                        "operator": "greater",
                        "value": 10
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Media items matching in the training revision that match the filter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "description": "Upload time of the media file",
                                "type": "string"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene  if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "matched_frames": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "Number of frames in the video that match the filter. Only returned when filtering by annotation properties."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "format": "int32",
                                "description": "The video frame index"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_images": {
                      "type": "integer",
                      "description": "Total images that match the query."
                    },
                    "total_matched_videos": {
                      "type": "integer",
                      "description": "Total videos that match the query."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    },
                    "total_images": {
                      "type": "integer",
                      "description": "Total images in the dataset."
                    },
                    "total_videos": {
                      "type": "integer",
                      "description": "Total videos in the dataset."
                    }
                  }
                },
                "examples": {
                  "Combined media list response": {
                    "value": {
                      "media": [
                        {
                          "id": "613a23866674c43ae7a777aa",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/full ",
                            "height": 331,
                            "width": 584,
                            "size": 128,
                            "extension": ".png"
                          },
                          "name": "dummy_images",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "image",
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/images/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00"
                        },
                        {
                          "id": "613a23866674c43ae7a777ab",
                          "media_information": {
                            "display_url": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/6139ec7555f78343bad38d2b/display/stream",
                            "duration": 30,
                            "frame_count": 901,
                            "frame_stride": 30,
                            "frame_rate": 30,
                            "height": 270,
                            "width": 480,
                            "size": 16384,
                            "extension": ".mp4"
                          },
                          "name": "dummy_video",
                          "thumbnail": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media/videos/613a23866674c43ae7a777ab/display/thumb",
                          "type": "video",
                          "annotation_state_per_task": [
                            {
                              "task_id": "61012cdb1d38a5e71ef3bafd",
                              "state": "to_revisit"
                            }
                          ],
                          "upload_time": "2021-09-09T15:08:54.118000+00:00",
                          "matched_frames": 22
                        }
                      ],
                      "next_page": "/api/v1/workspaces/61376cf8c0e392f0c4efb2bb/projects/6139eab61e3343cd22a41a66/datasets/6139eab61e3343cd22a41a65/media:query?limit=2&skip=4",
                      "total_matched_images": 1,
                      "total_matched_videos": 1,
                      "total_matched_video_frames": 2,
                      "total_images": 48,
                      "total_videos": 7
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Training revision not found response": {
                    "description": "Note, a training revision is a type of dataset.",
                    "value": {
                      "error_code": "training_revision_not_found",
                      "http_status": 404,
                      "message": "Training revision with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media/videos/{video_id}:query": {
      "post": {
        "tags": [
          "Training dataset versions"
        ],
        "summary": "Retrieve specific frames from a video in a training revision by applying a query",
        "description": "Allows the user to quickly filter through frames in a video in a specific training revision by supplying one or  more filters to match frames against. Currently you can filter on 'label_id',  'annotation_scene_state',  'annotation_creation_date', 'shape_type', 'shape_area_percentage', 'shape_area_pixel' and 'user_name'. The following  operators can be used 'greater', 'less', 'greater_or_equal', 'less_or_equal', 'equal', 'not_equal', 'in' and 'not_in'. Not all combinations of filter and operator can be used. If a combination is not supported, the endpoint will respond  with the possible operators that are allowed for the filter.",
        "operationId": "FilterVideoFramesInTrainingRevision",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_revision_id",
            "style": "simple",
            "description": "The ID of the dataset of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "video_id",
            "style": "simple",
            "description": "The ID of the video.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by. ",
            "schema": {
              "type": "string",
              "enum": [
                "media_name",
                "media_upload_date",
                "media_width",
                "media_height",
                "media_size",
                "annotation_creation_date"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rules"
                ],
                "properties": {
                  "condition": {
                    "description": "Condition to apply to group of rules.",
                    "type": "string",
                    "enum": [
                      "and"
                    ]
                  },
                  "rules": {
                    "type": "array",
                    "description": "All the rules to filter a dataset with.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "properties": {
                            "field": {
                              "description": "Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.",
                              "type": "string",
                              "enum": [
                                "media_upload_date",
                                "media_height",
                                "media_width",
                                "media_name",
                                "label_id",
                                "annotation_creation_date",
                                "annotation_scene_state",
                                "shape_type",
                                "shape_area_percentage",
                                "shape_area_pixel",
                                "user_name"
                              ]
                            },
                            "operator": {
                              "description": "Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'",
                              "type": "string",
                              "enum": [
                                "greater",
                                "less",
                                "greater_or_equal",
                                "less_or_equal",
                                "equal",
                                "not_equal",
                                "in",
                                "not_in",
                                "regex"
                              ]
                            },
                            "value": {
                              "description": "Value that the field should match to in combination with the operator",
                              "type": [
                                "array",
                                "string",
                                "integer"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Filtering a dataset": {
                  "value": {
                    "condition": "and",
                    "rules": [
                      {
                        "field": "label_id",
                        "operator": "in",
                        "value": [
                          "id_1",
                          "id_2"
                        ]
                      },
                      {
                        "field": "media_width",
                        "operator": "greater",
                        "value": 10
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Frames matching the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "description": "List of media items",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video frame"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the image or video frame"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the image or video frame"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the image or video in bytes"
                                  },
                                  "extension": {
                                    "type": "string",
                                    "description": "Extension of the image or video in lowercase with a dot (e.g. '.jpg')"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the image thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "image"
                                ]
                              },
                              "upload_time": {
                                "description": "Upload time of the media file",
                                "type": "string"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene  if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "matched_frames": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "Number of frames in the video that match the filter. Only returned when filtering by annotation properties."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "format": "int32",
                                "description": "The video frame index"
                              },
                              "media_information": {
                                "type": "object",
                                "properties": {
                                  "display_url": {
                                    "type": "string",
                                    "description": "Display URL of the image or video"
                                  },
                                  "duration": {
                                    "type": "integer",
                                    "description": "Duration of the video"
                                  },
                                  "frame_count": {
                                    "type": "integer",
                                    "description": "Number of frames in the video"
                                  },
                                  "frame_stride": {
                                    "type": "integer",
                                    "description": "Frame stride of the video"
                                  },
                                  "frame_rate": {
                                    "type": "number",
                                    "description": "Frame rate of the video"
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the video"
                                  },
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the video"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "Size of the video in bytes"
                                  }
                                }
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the image"
                              },
                              "annotation_state_per_task": {
                                "description": "List of per-task states obtained aggregating the annotation state with the revisit information",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "task_id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "state": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Annotation state of the media for this task",
                                      "enum": [
                                        "annotated",
                                        "partially_annotated",
                                        "none",
                                        "to_revisit",
                                        null
                                      ]
                                    }
                                  }
                                }
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "Relative URL to the video frame thumbnail"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.",
                                "enum": [
                                  "video_frame"
                                ]
                              },
                              "upload_time": {
                                "type": "string",
                                "description": "Upload time of the media file"
                              },
                              "annotation_scene_id": {
                                "description": "Optional ID of the annotation scene if filtering in a specific training revision",
                                "type": "string"
                              },
                              "roi_id": {
                                "description": "Optional ID of the roi id if filtering in a specific training revision",
                                "type": "string"
                              },
                              "last_annotator_id": {
                                "description": "Optional ID of the user that last edited the annotation.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next page of results, if the same parameters are used."
                    },
                    "total_matched_images": {
                      "type": "integer",
                      "description": "Total images that match the query."
                    },
                    "total_matched_videos": {
                      "type": "integer",
                      "description": "Total videos that match the query."
                    },
                    "total_matched_video_frames": {
                      "type": "integer",
                      "description": "Total video frames that match the query."
                    },
                    "total_images": {
                      "type": "integer",
                      "description": "Total images in the dataset."
                    },
                    "total_videos": {
                      "type": "integer",
                      "description": "Total videos in the dataset."
                    }
                  }
                },
                "examples": {
                  "Filtered video frames list response": {
                    "value": {
                      "next_page": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb}/media/videos/62ff4089b2b8cfb7732d03fc:query?limit=100&skip=100",
                      "video_frames": [
                        {
                          "annotation_state_per_task": [
                            {
                              "state": "annotated",
                              "task_id": "60d31793d5f1fb7e6e3c1a4f"
                            }
                          ],
                          "id": 1,
                          "media_information": {
                            "display_url": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/1/display/full",
                            "height": 360,
                            "width": 640
                          },
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5",
                          "name": "video 1_f1",
                          "thumbnail": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/1/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2022-08-19T07:49:29.665000+00:00",
                          "uploader_id": ""
                        },
                        {
                          "annotation_state_per_task": [
                            {
                              "state": "none",
                              "task_id": "60d31793d5f1fb7e6e3c1a4f"
                            }
                          ],
                          "id": 3,
                          "media_information": {
                            "display_url": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/3/display/full",
                            "height": 360,
                            "width": 640
                          },
                          "last_annotator_id": "2e1de607-b549-42bf-8031-fd16d87379e5",
                          "name": "video 1_f3",
                          "thumbnail": "/api/v1/workspaces/62ff4089b2b8cfb7732d03f9/projects/60d31793d5f1fb7e6e3c1a50/datasets/62ff4089b2b8cfb7732d03fb/media/videos/62ff4089b2b8cfb7732d03fc/frames/3/display/thumb",
                          "type": "video_frame",
                          "upload_time": "2022-08-19T07:49:29.665000+00:00",
                          "uploader_id": ""
                        }
                      ],
                      "total_matched_video_frames": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid filter exception": {
                    "value": {
                      "error_code": "invalid_filter",
                      "http_status": 400,
                      "message": "Invalid filter provided. greater is not a valid value for enum DatasetFilterField. Please choose one of ['MEDIA_UPLOAD_DATE', 'MEDIA_HEIGHT', 'MEDIA_WIDTH', 'MEDIA_NAME', 'LABEL_ID', 'ANNOTATION_CREATION_DATE', 'ANNOTATION_SCENE_STATE', 'SHAPE_TYPE', 'SHAPE_AREA_PERCENTAGE', 'SHAPE_AREA_PIXEL', 'USER_NAME', 'SUBSET']"
                    }
                  },
                  "Dataset is not a training dataset": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with ID 60ec6bbfb98caeb87e343066 is not a training dataset.",
                      "error_code": "dataset_is_not_a_training_dataset"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Training revision not found response": {
                    "description": "Note, a training revision is a type of dataset.",
                    "value": {
                      "error_code": "training_revision_not_found",
                      "http_status": 404,
                      "message": "Training revision with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Video not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Video with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "video_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:predict": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Generate or retrieve a prediction for an image or video frame",
        "description": "Generate or retrieve a prediction for an image or a single video frame.",
        "operationId": "GetSinglePrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline_id",
            "style": "simple",
            "description": "Set this parameter to `active` request predictions generated using the currently active model(s) in the project.\nFor task chain, this parameter could be set to the task ID within the project to request for inference only for that task. \nThe task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint. ",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "active"
                  ]
                }
              ]
            },
            "required": true,
            "example": "active"
          },
          {
            "in": "query",
            "name": "roi",
            "description": "The Region of Interest (ROI) of the image or video frame to use for inference.\nThe ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,\nwith the format: `left,top,width,height`.",
            "schema": {
              "type": "string",
              "example": "10,20,40,60"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hyper_parameters",
            "description": "Hyper parameters for the inference",
            "schema": {
              "type": "string",
              "example": "[{\"task_id\":\"660287bb20d4f3a4595c3137\", \"confidence_treshold\":0.35, \"use_ellipse_shapes\": \"true\"}]"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "use_cache",
            "description": "This parameter defines the origin of the predictions.  \n\nWhen `use_cache=always`, the predictions are pulled from the database cache. If no prediction with the desired configuration exists in the\ncache, a 'not found' respones will be returned. \n\nWhen `use_cache=never`, the predictions are generated on the fly based on the request. Note that, the predictions are generated using\nthe OpenVINO model with FP32 precision with XAI. This model can be found under the [model detail](#Models/GetModelDetail) endpoint.  \n\nWhen `use_cache=auto`, the system will first attempt to retrieve an existing prediction for the media item from the\ncache. If no prediction with the desired configuration exists in the cache, a new prediction will be generated on the\nfly. By default, `auto` is used.",
            "schema": {
              "type": "string",
              "enum": [
                "always",
                "never",
                "auto"
              ],
              "example": "auto"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "Either an image file, or an identifier for an image or single video frame for which a prediction should be returned.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to be uploaded for inference."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Identifier for an image which already exists on the system.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "image_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "Identifier for a single video frame.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "video_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "frame_index": {
                        "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "frame_index"
                    ]
                  }
                ]
              },
              "examples": {
                "Image identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "image_id": "6548cac2e645c2fbcd20b7b2"
                  }
                },
                "Video frame identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "video_id": "6548cac2e645c2fbcd20b7b2",
                    "frame_index": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prediction successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "predictions": {
                      "description": "List of predictions",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "Creation date"
                    },
                    "media_identifier": {
                      "description": "Optional identifier for the media item on which the prediction was made. Only included for persistent media.",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "image"
                              ]
                            },
                            "image_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "video_frame"
                              ]
                            },
                            "video_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "frame_index": {
                              "type": "integer"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Image prediction response": {
                    "value": {
                      "predictions": [
                        {
                          "labels": [
                            {
                              "id": "61387685df33ae8280c33d9d",
                              "probability": 0.87
                            }
                          ],
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "created": "2021-09-08T12:43:22.290000+00:00"
                    }
                  },
                  "Image prediction response including media identifier": {
                    "value": {
                      "predictions": [
                        {
                          "labels": [
                            {
                              "id": "61387685df33ae8280c33d9d",
                              "probability": 0.87
                            }
                          ],
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "created": "2021-09-08T12:43:22.290000+00:00",
                      "media_identifier": {
                        "image_id": "61387685df33ae8280c32d9a",
                        "type": "image"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No prediction available for the requested media."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:explain": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Generate or retrieve explanations for an image or video frame",
        "description": "Generate or retrieve explanations of the inference output for an image or a single video frame. The explanation is typically the heatmap \nhighlighting the area which the model finds to be salient. For more info, please refer to [OpenVINO XAI](https://github.com/openvinotoolkit/openvino_xai).",
        "operationId": "GetSingleExplanation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline_id",
            "style": "simple",
            "description": "Set this parameter to `active` request predictions generated using the currently active model(s) in the project.\nFor task chain, this parameter could be set to the task ID within the project to request for inference only for that task. \nThe task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint. ",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "active"
                  ]
                }
              ]
            },
            "required": true,
            "example": "active"
          },
          {
            "in": "query",
            "name": "roi",
            "description": "The Region of Interest (ROI) of the image or video frame to use for inference.\nThe ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,\nwith the format: `left,top,width,height`.",
            "schema": {
              "type": "string",
              "example": "10,20,40,60"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hyper_parameters",
            "description": "Hyper parameters for the inference",
            "schema": {
              "type": "string",
              "example": "[{\"task_id\":\"660287bb20d4f3a4595c3137\", \"confidence_treshold\":0.35, \"use_ellipse_shapes\": \"true\"}]"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "Either an image file, or an identifier for an image or single video frame for which explanations should be returned.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to be uploaded for inference."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Identifier for an image which already exists on the system.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "image_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "Identifier for a single video frame.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "video_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "frame_index": {
                        "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "frame_index"
                    ]
                  }
                ]
              },
              "examples": {
                "Image identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "image_id": "6548cac2e645c2fbcd20b7b2"
                  }
                },
                "Video frame identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "video_id": "6548cac2e645c2fbcd20b7b2",
                    "frame_index": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Explanations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maps": {
                      "description": "List of explanations (saliency maps)",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "data": {
                            "type": "string",
                            "description": "Binary representation of the saliency map"
                          },
                          "label_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "Creation date"
                    },
                    "media_identifier": {
                      "description": "Optional identifier for the media item on which the prediction was made. Only included for persistent media.",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "image"
                              ]
                            },
                            "image_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "video_frame"
                              ]
                            },
                            "video_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "frame_index": {
                              "type": "integer"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Image explanation response": {
                    "value": {
                      "maps": [
                        {
                          "data": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/wAALCAAGAAgBAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APyq+Ov7Tf7GuqfDH4u/Cz4G6X8XYrXxBN4Ot/h2fFHiScxR2ekxTxXX9p28eoPBK5DxfZ18uZIPnEQt1OD/AP/Z",
                          "label_id": "6548caa9e645c2fbcd20b798"
                        }
                      ],
                      "created": "2023-11-07 14:57:03.371633532 +0000",
                      "media_identifier": {
                        "image_id": "6548cac2e645c2fbcd20b7b2",
                        "type": "image"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No explanation available for the requested media."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:batch_predict": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Generate or retrieve predictions for a batch of video frames",
        "description": "Generate or retrieve the predictions for a sequence of video frames.",
        "operationId": "GetBatchPrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline_id",
            "style": "simple",
            "description": "Set this parameter to `active` request predictions generated using the currently active model(s) in the project.\nFor task chain, this parameter could be set to the task ID within the project to request for inference only for that task. \nThe task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint. ",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "active"
                  ]
                }
              ]
            },
            "required": true,
            "example": "active"
          },
          {
            "in": "query",
            "name": "roi",
            "description": "The Region of Interest (ROI) of the image or video frame to use for inference.\nThe ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,\nwith the format: `left,top,width,height`.",
            "schema": {
              "type": "string",
              "example": "10,20,40,60"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hyper_parameters",
            "description": "Hyper parameters for the inference",
            "schema": {
              "type": "string",
              "example": "[{\"task_id\":\"660287bb20d4f3a4595c3137\", \"confidence_treshold\":0.35, \"use_ellipse_shapes\": \"true\"}]"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "An identifier for a range of video frames on which to perform inference. \nThe predictions are strating from the `start_frame` of the range, for every frame at `frame_skip` intervals, and all \nthe way up to the `end_frame`. \n\nThe maximum number of frames to generate predictions for is 20.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Identifier for a range of video frames.",
                "properties": {
                  "dataset_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "video_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "start_frame": {
                    "type": "integer",
                    "description": "Index of the first frame in the range.",
                    "minimum": 0,
                    "default": 0
                  },
                  "end_frame": {
                    "type": "integer",
                    "description": "Index of the last frame in the range."
                  },
                  "frame_skip": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Stride (step size), that is the interval between two consecutive frames in the range.\nIf `frame_skip` is 1, all frames are considered to be part of the range."
                  }
                },
                "required": [
                  "end_frame",
                  "frame_skip"
                ]
              },
              "examples": {
                "Video frame range identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "video_id": "6548cac2e645c2fbcd20b7b2",
                    "start_frame": 1,
                    "end_frame": 100,
                    "frame_skip": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Predictions successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "batch_predictions": {
                      "description": "List of predictions. Each entry corresponds to the prediction for a single media item in the batch.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "predictions": {
                            "description": "List of predictions",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "shape": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Rectangle",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "RECTANGLE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the rectangle. Coordinates are pixel values.",
                                          "minimum": 1
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height"
                                      ],
                                      "example": {
                                        "type": "RECTANGLE",
                                        "x": 320,
                                        "y": 240,
                                        "width": 50,
                                        "height": 25
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Polygon",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "POLYGON"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "points": {
                                          "type": "array",
                                          "maxItems": 5000,
                                          "description": "Array of points that define the polygon.",
                                          "items": {
                                            "title": "Point",
                                            "type": "object",
                                            "properties": {
                                              "x": {
                                                "type": "number",
                                                "description": "x-coordinate of the point. Coordinates are pixel values.",
                                                "minimum": 0
                                              },
                                              "y": {
                                                "type": "number",
                                                "description": "y-coordinate of the point. Coordinates are pixel values.",
                                                "minimum": 0
                                              }
                                            },
                                            "required": [
                                              "x",
                                              "y"
                                            ],
                                            "example": {
                                              "x": 10,
                                              "y": 10
                                            }
                                          }
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "points"
                                      ],
                                      "example": {
                                        "type": "POLYGON",
                                        "point": [
                                          {
                                            "x": 10,
                                            "y": 10
                                          },
                                          {
                                            "x": 20,
                                            "y": 20
                                          },
                                          {
                                            "x": 10,
                                            "y": 20
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Ellipse",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ELLIPSE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the ellipse. Coordinates are pixel values.",
                                          "minimum": 1
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the ellipse. Coordinates are pixel values.",
                                          "minimum": 1
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height"
                                      ],
                                      "example": {
                                        "type": "ELLIPSE",
                                        "x": 300,
                                        "y": 250,
                                        "width": 75,
                                        "height": 25
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Rotated Rectangle",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ROTATED_RECTANGLE"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                        },
                                        "width": {
                                          "type": "number",
                                          "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                        },
                                        "height": {
                                          "type": "number",
                                          "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                        },
                                        "angle": {
                                          "type": "number",
                                          "description": "Clockwise angle in degrees for the rectangle."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "width",
                                        "height",
                                        "angle"
                                      ],
                                      "example": {
                                        "type": "ROTATED_RECTANGLE",
                                        "x": 320,
                                        "y": 240,
                                        "width": 50,
                                        "height": 25,
                                        "angle": 45
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Keypoint",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "KEYPOINT"
                                          ],
                                          "description": "Type of the shape."
                                        },
                                        "x": {
                                          "type": "number",
                                          "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "is_visible": {
                                          "type": "boolean",
                                          "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "x",
                                        "y",
                                        "is_visible"
                                      ],
                                      "example": {
                                        "type": "KEYPOINT",
                                        "x": 320,
                                        "y": 240,
                                        "is_visible": true
                                      }
                                    }
                                  ]
                                },
                                "labels": {
                                  "description": "List of labels",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "probability": {
                                        "title": "Probability",
                                        "type": "number",
                                        "format": "float",
                                        "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "created": {
                            "type": "string",
                            "description": "Creation date"
                          },
                          "media_identifier": {
                            "description": "Optional identifier for the media item on which the prediction was made. Only included for persistent media.",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "image"
                                    ]
                                  },
                                  "image_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "video_frame"
                                    ]
                                  },
                                  "video_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "frame_index": {
                                    "type": "integer"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Batch prediction response": {
                    "value": {
                      "batch_predictions": [
                        {
                          "predictions": [
                            {
                              "labels": [
                                {
                                  "id": "61387685df33ae8280c33d9d",
                                  "probability": 0.87
                                }
                              ],
                              "shape": {
                                "height": 34,
                                "type": "RECTANGLE",
                                "width": 28,
                                "x": 25,
                                "y": 40
                              }
                            }
                          ],
                          "created": "2021-09-08T12:43:22.290000+00:00",
                          "media_identifier": {
                            "video_id": "61387685df33ae8280c33d9d",
                            "type": "video_frame",
                            "frame_index": 1
                          }
                        },
                        {
                          "predictions": [
                            {
                              "labels": [
                                {
                                  "id": "61387685df33ae8280c33d9d",
                                  "probability": 0.82
                                }
                              ],
                              "shape": {
                                "height": 54,
                                "type": "RECTANGLE",
                                "width": 48,
                                "x": 50,
                                "y": 80
                              }
                            }
                          ],
                          "created": "2021-09-08T12:43:22.690000+00:00",
                          "media_identifier": {
                            "video_id": "61387685df33ae8280c33d9d",
                            "type": "video_frame",
                            "frame_index": 11
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No prediction available for the requested media."
          },
          "400": {
            "description": "Too many predictions requested.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:batch_explain": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Generate or retrieve explanations for a batch of video frames",
        "description": "Generate or retrieve explanations of the inference output for a sequence of video frames. The explanation is typically the heatmap \nhighlighting the area which the model finds to be salient. For more info, please refer to [OpenVINO XAI](https://github.com/openvinotoolkit/openvino_xai).",
        "operationId": "GetBatchExplanation",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline_id",
            "style": "simple",
            "description": "Set this parameter to `active` request predictions generated using the currently active model(s) in the project.\nFor task chain, this parameter could be set to the task ID within the project to request for inference only for that task. \nThe task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint. ",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 24,
                  "maxLength": 24,
                  "example": "60d31793d5f1fb7e6e3c1a4c",
                  "description": "Mongo ID of the object"
                },
                {
                  "type": "string",
                  "enum": [
                    "active"
                  ]
                }
              ]
            },
            "required": true,
            "example": "active"
          },
          {
            "in": "query",
            "name": "roi",
            "description": "The Region of Interest (ROI) of the image or video frame to use for inference.\nThe ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,\nwith the format: `left,top,width,height`.",
            "schema": {
              "type": "string",
              "example": "10,20,40,60"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hyper_parameters",
            "description": "Hyper parameters for the inference",
            "schema": {
              "type": "string",
              "example": "[{\"task_id\":\"660287bb20d4f3a4595c3137\", \"confidence_treshold\":0.35, \"use_ellipse_shapes\": \"true\"}]"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "An identifier for a range of video frames from which the explanations are generated. \nThe explanations are strating from the `start_frame` of the range, for every frame at `frame_skip` intervals, and all \nthe way up to the `end_frame`. \n\nThe maximum number of frames to generate explanations for is 20. If the request exceeds this value, the response will contain error code\n`400`. ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Identifier for a range of video frames.",
                "properties": {
                  "dataset_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "video_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "start_frame": {
                    "type": "integer",
                    "description": "Index of the first frame in the range.",
                    "minimum": 0,
                    "default": 0
                  },
                  "end_frame": {
                    "type": "integer",
                    "description": "Index of the last frame in the range."
                  },
                  "frame_skip": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Stride (step size), that is the interval between two consecutive frames in the range.\nIf `frame_skip` is 1, all frames are considered to be part of the range."
                  }
                },
                "required": [
                  "end_frame",
                  "frame_skip"
                ]
              },
              "examples": {
                "Video frame range identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "video_id": "6548cac2e645c2fbcd20b7b2",
                    "start_frame": 1,
                    "end_frame": 100,
                    "frame_skip": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Explanations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "explanations": {
                      "description": "List of explanations. Each entry corresponds to the explanations for a single media item in the batch.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "maps": {
                            "description": "List of explanations (saliency maps)",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "data": {
                                  "type": "string",
                                  "description": "Binary representation of the saliency map"
                                },
                                "label_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                }
                              }
                            }
                          },
                          "created": {
                            "type": "string",
                            "description": "Creation date"
                          },
                          "media_identifier": {
                            "description": "Optional identifier for the media item on which the prediction was made. Only included for persistent media.",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "image"
                                    ]
                                  },
                                  "image_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "video_frame"
                                    ]
                                  },
                                  "video_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "frame_index": {
                                    "type": "integer"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Batch prediction response": {
                    "value": {
                      "explanations": [
                        {
                          "maps": [
                            {
                              "data": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/wAALCAAGAAgBAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APyq+Ov7Tf7GuqfDH4u/Cz4G6X8XYrXxBN4Ot/h2fFHiScxR2ekxTxXX9p28eoPBK5DxfZ18uZIPnEQt1OD/AP/Z",
                              "label_id": "6548caa9e645c2fbcd20b798"
                            }
                          ],
                          "created": "2023-11-07 14:57:03.371633532 +0000",
                          "media_identifier": {
                            "video_id": "6548cac2e645c2fbcd20b7b2",
                            "type": "video_frame",
                            "frame_index": 1
                          }
                        },
                        {
                          "maps": [
                            {
                              "data": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/wAALCAAGAAgBAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APyq+Ov7Tf7GuqfDH4u/Cz4G6X8XYrXxBN4Ot/h2fFHiScxR2ekxTxXX9p28eoPBK5DxfZ18uZIPnEQt1OD/AP/Z",
                              "label_id": "6548caa9e645c2fbcd20b798"
                            }
                          ],
                          "created": "2023-11-07 14:57:04.371633532 +0000",
                          "media_identifier": {
                            "video_id": "6548cac2e645c2fbcd20b7b2",
                            "type": "video_frame",
                            "frame_index": 11
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No explanations available for the requested media."
          },
          "400": {
            "description": "Too many predictions requested."
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{task_id}:prompt": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Generate prediction using the prompt model",
        "description": "Generate a prediction for an image or a single video frame using the one-shot learned prompt model.",
        "operationId": "GetPromptPrediction",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "task_id",
            "style": "simple",
            "description": "The ID of the task of interest.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Either an image file, or an identifier for an image or single video frame for which a prediction should be returned.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to be uploaded for inference."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Identifier for an image which already exists on the system.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "image_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "Identifier for a single video frame.",
                    "properties": {
                      "dataset_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "video_id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24,
                        "example": "60d31793d5f1fb7e6e3c1a4c",
                        "description": "Mongo ID of the object"
                      },
                      "frame_index": {
                        "description": "This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`. \nThe possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video\nand it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. ",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "frame_index"
                    ]
                  }
                ]
              },
              "examples": {
                "Image identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "image_id": "6548cac2e645c2fbcd20b7b2"
                  }
                },
                "Video frame identifier": {
                  "value": {
                    "dataset_id": "6548caa9e645c2fbcd20b799",
                    "video_id": "6548cac2e645c2fbcd20b7b2",
                    "frame_index": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prediction successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "predictions": {
                      "description": "List of predictions",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "shape": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "x-coordinate of the left side of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "y-coordinate of the top of the rectangle. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rectangle. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Polygon",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "POLYGON"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "points": {
                                    "type": "array",
                                    "maxItems": 5000,
                                    "description": "Array of points that define the polygon.",
                                    "items": {
                                      "title": "Point",
                                      "type": "object",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "description": "x-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        },
                                        "y": {
                                          "type": "number",
                                          "description": "y-coordinate of the point. Coordinates are pixel values.",
                                          "minimum": 0
                                        }
                                      },
                                      "required": [
                                        "x",
                                        "y"
                                      ],
                                      "example": {
                                        "x": 10,
                                        "y": 10
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "points"
                                ],
                                "example": {
                                  "type": "POLYGON",
                                  "point": [
                                    {
                                      "x": 10,
                                      "y": 10
                                    },
                                    {
                                      "x": 20,
                                      "y": 20
                                    },
                                    {
                                      "x": 10,
                                      "y": 20
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "object",
                                "title": "Ellipse",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ELLIPSE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Lowest x-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Lowest y-coordinate of the ellipse. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the ellipse. Coordinates are pixel values.",
                                    "minimum": 1
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height"
                                ],
                                "example": {
                                  "type": "ELLIPSE",
                                  "x": 300,
                                  "y": 250,
                                  "width": 75,
                                  "height": 25
                                }
                              },
                              {
                                "type": "object",
                                "title": "Rotated Rectangle",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ROTATED_RECTANGLE"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "Center x-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Center y-coordinate of the rotated rectangle. Coordinates are pixel values."
                                  },
                                  "width": {
                                    "type": "number",
                                    "description": "Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "height": {
                                    "type": "number",
                                    "description": "Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values."
                                  },
                                  "angle": {
                                    "type": "number",
                                    "description": "Clockwise angle in degrees for the rectangle."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "width",
                                  "height",
                                  "angle"
                                ],
                                "example": {
                                  "type": "ROTATED_RECTANGLE",
                                  "x": 320,
                                  "y": 240,
                                  "width": 50,
                                  "height": 25,
                                  "angle": 45
                                }
                              },
                              {
                                "type": "object",
                                "title": "Keypoint",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "KEYPOINT"
                                    ],
                                    "description": "Type of the shape."
                                  },
                                  "x": {
                                    "type": "number",
                                    "description": "X-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "y": {
                                    "type": "number",
                                    "description": "Y-coordinate of the keypoint. Coordinates are pixel values.",
                                    "minimum": 0
                                  },
                                  "is_visible": {
                                    "type": "boolean",
                                    "description": "Indicates whether the feature the keypoint is describing is visible in the image."
                                  }
                                },
                                "required": [
                                  "type",
                                  "x",
                                  "y",
                                  "is_visible"
                                ],
                                "example": {
                                  "type": "KEYPOINT",
                                  "x": 320,
                                  "y": 240,
                                  "is_visible": true
                                }
                              }
                            ]
                          },
                          "labels": {
                            "description": "List of labels",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "probability": {
                                  "title": "Probability",
                                  "type": "number",
                                  "format": "float",
                                  "description": "Estimated probability of a prediction. For annotations, this is set to 1."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "Creation date"
                    },
                    "media_identifier": {
                      "description": "Optional identifier for the media item on which the prediction was made. Only included for persistent media.",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "image"
                              ]
                            },
                            "image_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "video_frame"
                              ]
                            },
                            "video_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "frame_index": {
                              "type": "integer"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Image prediction response": {
                    "value": {
                      "predictions": [
                        {
                          "labels": [
                            {
                              "id": "61387685df33ae8280c33d9d",
                              "probability": 0.87
                            }
                          ],
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "created": "2021-09-08T12:43:22.290000+00:00"
                    }
                  },
                  "Image prediction response including media identifier": {
                    "value": {
                      "predictions": [
                        {
                          "labels": [
                            {
                              "id": "61387685df33ae8280c33d9d",
                              "probability": 0.87
                            }
                          ],
                          "shape": {
                            "height": 34,
                            "type": "RECTANGLE",
                            "width": 28,
                            "x": 25,
                            "y": 40
                          }
                        }
                      ],
                      "created": "2021-09-08T12:43:22.290000+00:00",
                      "media_identifier": {
                        "image_id": "61387685df33ae8280c32d9a",
                        "type": "image"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Dataset not found response": {
                    "value": {
                      "error_code": "dataset_not_found",
                      "http_status": 404,
                      "message": "Dataset with id '60ec6bbfb98caeb87e34306e' could not be found."
                    }
                  },
                  "Image not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Image with id 60ec6bbfb98caeb87e34306e not found",
                      "error_code": "image_not_found"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Project does not support prompt-based models.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "One-shot learning is not possible due to missing annotations.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get info on all jobs",
        "description": "Get info on all jobs, running and completed.",
        "operationId": "GetJobs",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "project_id",
            "style": "form",
            "description": "Select only items related to the given project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          },
          {
            "in": "query",
            "name": "state",
            "style": "form",
            "description": "Select only jobs in the given state.",
            "schema": {
              "type": "string",
              "enum": [
                "idle",
                "running",
                "paused",
                "finished",
                "error",
                "failed",
                "cancelled"
              ]
            }
          },
          {
            "in": "query",
            "name": "job_type",
            "style": "form",
            "explode": true,
            "description": "Select only jobs of the given type.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "train",
                  "optimize",
                  "test"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "job_key",
            "style": "form",
            "description": "Select jobs with matching key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "style": "form",
            "description": "Filter jobs by the author's unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_time_from",
            "style": "form",
            "description": "Timestamp used to filter jobs which started after the given time (inclusive)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "start_time_to",
            "style": "form",
            "description": "Timestamp used to filter jobs which started before the given time (inclusive)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "style": "form",
            "description": "Number indicating how many items to skip from the first item that matches the query. \nThis field is used in combination with the limit field for the pagination feature.",
            "schema": {
              "type": "string",
              "description": "Amount of items to skip"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "style": "form",
            "description": "Number of items returned in the response. Default is 10 and maximum is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "style": "form",
            "description": "Field to sort by, could be [job_name, start_time, end_time, creation_date, priority]",
            "schema": {
              "type": "string",
              "enum": [
                "job_name",
                "start_time",
                "end_time",
                "creation_date",
                "priority"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "style": "form",
            "description": "Sorting order, could be `asc` (ascending) or `dsc` (descending). ",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "description": "Array of jobs",
                      "items": {
                        "anyOf": [
                          {
                            "title": "train job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "train"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of train job",
                                "type": "object",
                                "description": "Additional information associated with the train job",
                                "properties": {
                                  "task": {
                                    "type": "object",
                                    "description": "Information about the task associated with the job, if any",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the task"
                                      },
                                      "model_template_id": {
                                        "type": "string",
                                        "description": "Identifier of the model template used by the task"
                                      },
                                      "model_architecture": {
                                        "type": "string",
                                        "description": "Neural network architecture used for the model"
                                      },
                                      "dataset_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      }
                                    }
                                  },
                                  "project": {
                                    "type": "object",
                                    "description": "Information about the project associated with the job",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      }
                                    }
                                  },
                                  "trained_model": {
                                    "type": "object",
                                    "description": "Information about the trained model",
                                    "properties": {
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "model_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "model_activated": {
                                        "type": "boolean",
                                        "description": "Whether the model became the active one after training"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "test job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "test"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of train/optimize/test job",
                                "type": "object",
                                "description": "Additional information associated with the train/optimize/test job",
                                "properties": {
                                  "task": {
                                    "type": "object",
                                    "description": "Information about the task associated with the job, if any",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the task"
                                      },
                                      "model_template_id": {
                                        "type": "string",
                                        "description": "Identifier of the model template used by the task"
                                      },
                                      "model_architecture": {
                                        "type": "string",
                                        "description": "Neural network architecture used for the model"
                                      },
                                      "dataset_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      }
                                    }
                                  },
                                  "test": {
                                    "type": "object",
                                    "description": "Information about the test associated with the job, if any",
                                    "properties": {
                                      "model_template_id": {
                                        "type": "string",
                                        "description": "Identifier of the model template used by the task"
                                      },
                                      "model_architecture": {
                                        "type": "string",
                                        "description": "Neural network architecture used for the model"
                                      },
                                      "model": {
                                        "id": {
                                          "type": "string",
                                          "minLength": 24,
                                          "maxLength": 24,
                                          "example": "60d31793d5f1fb7e6e3c1a4c",
                                          "description": "Mongo ID of the object"
                                        },
                                        "template_id": {
                                          "type": "string",
                                          "description": "Identifier of the model template used by the task"
                                        },
                                        "architecture": {
                                          "type": "string",
                                          "description": "Neural network architecture of the model"
                                        },
                                        "precision": {
                                          "type": "array",
                                          "description": "Precision of the model",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "optimization_type": {
                                          "type": "string",
                                          "description": "Type of optimization used for the model"
                                        },
                                        "has_xai_head": {
                                          "type": "boolean",
                                          "description": "Whether the model has an XAI head to generate saliency maps"
                                        }
                                      },
                                      "datasets": {
                                        "type": "array",
                                        "description": "Array of datasets",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "is_deleted": {
                                              "type": "boolean",
                                              "description": "boolean showing whether the dataset is deleted"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Name of the dataset"
                                            },
                                            "n_images": {
                                              "type": "number",
                                              "format": "int32",
                                              "description": "Number of images in the dataset"
                                            },
                                            "n_frames": {
                                              "type": "number",
                                              "format": "int32",
                                              "description": "Number of frames in the dataset"
                                            },
                                            "n_samples": {
                                              "type": "number",
                                              "format": "int32",
                                              "description": "Number of samples in the dataset"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "project": {
                                    "type": "object",
                                    "description": "Information about the project associated with the job",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "optimize job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "optimize"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of optimize job",
                                "type": "object",
                                "description": "Additional information associated with the optimize job",
                                "properties": {
                                  "task": {
                                    "type": "object",
                                    "description": "Information about the task associated with the job, if any",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the task"
                                      },
                                      "model_template_id": {
                                        "type": "string",
                                        "description": "Identifier of the model template used by the task"
                                      },
                                      "model_architecture": {
                                        "type": "string",
                                        "description": "Neural network architecture used for the model"
                                      },
                                      "dataset_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      }
                                    }
                                  },
                                  "project": {
                                    "type": "object",
                                    "description": "Information about the project associated with the job",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      }
                                    }
                                  },
                                  "model_storage_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "optimization_type": {
                                    "type": "string",
                                    "description": "Type of optimization",
                                    "enum": [
                                      "POT"
                                    ]
                                  },
                                  "base_model_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "optimized_model_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "prepare_import_to_new_project job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "prepare_import_to_new_project"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of `prepare_import_to_new_project` job",
                                "type": "object",
                                "description": "Supported project types and warnings",
                                "properties": {
                                  "file_id": {
                                    "type": "string",
                                    "description": "ID of the uploaded dataset file to be imported"
                                  },
                                  "warnings": {
                                    "type": "array",
                                    "description": "Warnings to import dataset to specific domain",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Type of the warning",
                                          "enum": [
                                            "error",
                                            "warning"
                                          ]
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name of the warning",
                                          "example": "Missing expected annotation type for classification domain"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "Detailed description of the warning"
                                        },
                                        "resolve_strategy": {
                                          "type": "string",
                                          "description": "How to handle the warning"
                                        },
                                        "affected_images": {
                                          "type": "number",
                                          "format": "int32",
                                          "description": "Number of affected images"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "name",
                                        "description"
                                      ]
                                    }
                                  },
                                  "supported_project_types": {
                                    "type": "array",
                                    "description": "Supported project types and corresponding labels",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "project_type",
                                        "pipeline"
                                      ],
                                      "properties": {
                                        "project_type": {
                                          "type": "string",
                                          "description": "Project type name",
                                          "enum": [
                                            "classification",
                                            "classification_hierarchical",
                                            "detection",
                                            "segmentation",
                                            "instance_segmentation",
                                            "anomaly",
                                            "detection_oriented",
                                            "detection_classification",
                                            "detection_segmentation",
                                            "keypoint_detection"
                                          ]
                                        },
                                        "pipeline": {
                                          "type": "object",
                                          "required": [
                                            "connections",
                                            "tasks"
                                          ],
                                          "properties": {
                                            "connections": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "from",
                                                  "to"
                                                ],
                                                "properties": {
                                                  "from": {
                                                    "type": "string",
                                                    "description": "Source task name"
                                                  },
                                                  "to": {
                                                    "type": "string",
                                                    "description": "Target task name"
                                                  }
                                                }
                                              }
                                            },
                                            "tasks": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "title",
                                                  "task_type",
                                                  "labels"
                                                ],
                                                "properties": {
                                                  "title": {
                                                    "type": "string",
                                                    "description": "Task name"
                                                  },
                                                  "task_type": {
                                                    "type": "string",
                                                    "description": "OTX Task type name in lowercase",
                                                    "enum": [
                                                      "dataset",
                                                      "classification",
                                                      "segmentation",
                                                      "detection",
                                                      "crop",
                                                      "instance_segmentation",
                                                      "keypoint_detection",
                                                      "anomaly",
                                                      "rotated_detection"
                                                    ]
                                                  },
                                                  "labels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Label name"
                                                        },
                                                        "group": {
                                                          "type": "string",
                                                          "description": "Label group name"
                                                        },
                                                        "parent": {
                                                          "type": "string",
                                                          "description": "Label parent name"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "perform_import_to_new_project job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "perform_import_to_new_project"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of `perform_import_to_new_project` job",
                                "type": "object",
                                "description": "Created project ID",
                                "properties": {
                                  "file_id": {
                                    "type": "string",
                                    "description": "ID of the uploaded dataset file to be imported"
                                  },
                                  "project": {
                                    "description": "Information about the project to create",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "project_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "prepare_import_to_existing_project job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "prepare_import_to_existing_project"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of `prepare_import_to_existing_project` job",
                                "type": "object",
                                "description": "Labels in the dataset and warnings",
                                "properties": {
                                  "file_id": {
                                    "type": "string",
                                    "description": "ID of the uploaded dataset file to be imported"
                                  },
                                  "project": {
                                    "description": "Information about the project where the dataset is imported",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the project"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Type name of the project",
                                        "enum": [
                                          "classification",
                                          "classification_hierarchical",
                                          "detection",
                                          "segmentation",
                                          "instance_segmentation",
                                          "anomaly",
                                          "detection_oriented",
                                          "detection_classification",
                                          "detection_segmentation",
                                          "keypoint_detection"
                                        ]
                                      }
                                    }
                                  },
                                  "warnings": {
                                    "type": "array",
                                    "description": "Warnings to import dataset to specific domain",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Type of the warning",
                                          "enum": [
                                            "error",
                                            "warning"
                                          ]
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name of the warning",
                                          "example": "Missing expected annotation type for classification domain"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "Detailed description of the warning"
                                        },
                                        "resolve_strategy": {
                                          "type": "string",
                                          "description": "How to handle the warning"
                                        },
                                        "affected_images": {
                                          "type": "number",
                                          "format": "int32",
                                          "description": "Number of affected images"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "name",
                                        "description"
                                      ]
                                    }
                                  },
                                  "labels": {
                                    "type": "array",
                                    "description": "Label names in the dataset",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "perform_import_to_existing_project job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "perform_import_to_existing_project"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of `perform_import_to_existing_project` job",
                                "type": "object",
                                "description": "Imported dataset information",
                                "properties": {
                                  "file_id": {
                                    "type": "string",
                                    "description": "ID of the uploaded dataset file to be imported"
                                  },
                                  "project": {
                                    "description": "Information about the project where the dataset is imported",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the project"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Type name of the project",
                                        "enum": [
                                          "classification",
                                          "classification_hierarchical",
                                          "detection",
                                          "segmentation",
                                          "instance_segmentation",
                                          "anomaly",
                                          "detection_oriented",
                                          "detection_classification",
                                          "detection_segmentation",
                                          "keypoint_detection"
                                        ]
                                      }
                                    }
                                  },
                                  "dataset": {
                                    "type": "object",
                                    "description": "The dataset information for importing the uploaded dataset file",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the dataset storage"
                                      },
                                      "use_for_training": {
                                        "type": "boolean",
                                        "description": "Whether the dataset will be used for training or not"
                                      },
                                      "creation_time": {
                                        "type": "string",
                                        "description": "The time at which the dataset was created",
                                        "example": "2024-03-05T06:34:32.332000+00:00"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "title": "export_dataset job",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the job"
                              },
                              "creation_time": {
                                "type": "string",
                                "description": "The time at which the job was created"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "author": {
                                "type": "string",
                                "description": "Identifier of the user who submitted the job"
                              },
                              "cancellation_info": {
                                "type": "object",
                                "description": "Information detailing the cancellation status of the job",
                                "properties": {
                                  "cancellable": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job can be cancelled after startup"
                                  },
                                  "is_cancelled": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "description": "whether the job is cancelled"
                                  },
                                  "user_uid": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The user UID who requested the cancellation"
                                  },
                                  "cancel_time": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "format": "date-time",
                                    "description": "The time of cancellation"
                                  }
                                }
                              },
                              "steps": {
                                "type": "array",
                                "description": "Progress details for each step of the job",
                                "items": {
                                  "type": "object",
                                  "description": "Progress for the step",
                                  "properties": {
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Status message"
                                    },
                                    "index": {
                                      "type": "integer",
                                      "description": "The index of the step within the job"
                                    },
                                    "progress": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Step progress from 0 to 100"
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "Step state"
                                    },
                                    "step_name": {
                                      "type": "string",
                                      "description": "Step name"
                                    },
                                    "duration": {
                                      "type": [
                                        "number",
                                        "null"
                                      ],
                                      "format": "float",
                                      "description": "Step duration in seconds"
                                    },
                                    "warning": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "Step warning message"
                                    }
                                  }
                                }
                              },
                              "start_time": {
                                "description": "Start time of the job",
                                "minLength": 0,
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "end_time": {
                                "description": "End time of the job",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "format": "date-time"
                              },
                              "state": {
                                "type": "string",
                                "description": "The state of the job"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "export_dataset"
                                ],
                                "description": "Type of the job."
                              },
                              "metadata": {
                                "title": "Metadata of `export_dataset` job",
                                "type": "object",
                                "description": "Information about the exported dataset",
                                "properties": {
                                  "project": {
                                    "description": "Information about the project to export",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the project"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the project"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Type name of the project",
                                        "enum": [
                                          "classification",
                                          "classification_hierarchical",
                                          "detection",
                                          "segmentation",
                                          "instance_segmentation",
                                          "anomaly",
                                          "detection_oriented",
                                          "detection_classification",
                                          "detection_segmentation",
                                          "keypoint_detection"
                                        ]
                                      }
                                    }
                                  },
                                  "dataset": {
                                    "description": "Thd dataset information to be exported",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the dataset storage"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the dataset storage"
                                      }
                                    }
                                  },
                                  "export_format": {
                                    "type": "string",
                                    "description": "Format of the dataset to be exported",
                                    "enum": [
                                      "voc",
                                      "coco",
                                      "yolo",
                                      "datumaro"
                                    ]
                                  },
                                  "download_url": {
                                    "type": "string",
                                    "description": "URL to download the prepared dataset"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "jobs_count": {
                      "type": "object",
                      "description": "Jobs count information for each job state",
                      "properties": {
                        "n_scheduled_jobs": {
                          "type": "integer",
                          "description": "Number of scheduled jobs"
                        },
                        "n_running_jobs": {
                          "type": "integer",
                          "description": "Number of running jobs"
                        },
                        "n_finished_jobs": {
                          "type": "integer",
                          "description": "Number of finished jobs"
                        },
                        "n_failed_jobs": {
                          "type": "integer",
                          "description": "Number of failed jobs"
                        },
                        "n_cancelled_jobs": {
                          "type": "integer",
                          "description": "Number of cancelled jobs"
                        }
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "URL to the next jobs page"
                    }
                  }
                },
                "examples": {
                  "Multiple jobs response": {
                    "value": {
                      "jobs": [
                        {
                          "id": "64944c10b45e0dbb68efabb0",
                          "type": "train",
                          "creation_time": "2023-06-22T13:26:40.802000+00:00",
                          "start_time": "2023-06-22T13:26:49.568000+00:00",
                          "end_time": "2023-06-22T13:33:02.317000+00:00",
                          "name": "Training",
                          "author": "fdd733a6-a55f-473f-9dc7-e34fe40a3242",
                          "state": "finished",
                          "steps": [
                            {
                              "message": "Train data retrieved",
                              "index": 1,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Retrieve train data",
                              "duration": 11.2
                            },
                            {
                              "message": "Train dataset is created",
                              "index": 2,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Create train dataset",
                              "duration": 20.12
                            },
                            {
                              "message": "Training from sharded dataset is disabled",
                              "index": 3,
                              "progress": -1,
                              "state": "skipped",
                              "step_name": "Shard dataset"
                            },
                            {
                              "message": "Training from sharded dataset is disabled",
                              "index": 4,
                              "progress": -1,
                              "state": "skipped",
                              "step_name": "Create and upload dataset shards"
                            },
                            {
                              "message": "Training from sharded dataset is disabled",
                              "index": 5,
                              "progress": -1,
                              "state": "skipped",
                              "step_name": "Create and save compiled dataset shard entity"
                            },
                            {
                              "message": "No previous model found for the project. Skipping pre-evaluation.",
                              "index": 6,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Pre-evaluate model if exists",
                              "duration": 1.52
                            },
                            {
                              "message": "Model is trained",
                              "index": 7,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Model training",
                              "duration": 42.52
                            },
                            {
                              "message": "Model improvement is checked",
                              "index": 8,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Trained model evaluation",
                              "duration": 15.52
                            },
                            {
                              "message": "Trained model is activated, inference server is initialized",
                              "index": 9,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Activate trained model",
                              "duration": 0.52
                            },
                            {
                              "message": "Inference on unannotated dataset is finished",
                              "index": 10,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Infer on unannotated dataset for task",
                              "duration": 22.52
                            },
                            {
                              "message": "Only one trainable task for project, skipping the pipeline inference",
                              "index": 11,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Inference on unannotated dataset with all models chained",
                              "duration": 10.52
                            }
                          ],
                          "cancellation_info": {
                            "is_cancelled": false,
                            "user_uid": null,
                            "cancel_time": null
                          },
                          "metadata": {
                            "project": {
                              "id": "64944b9a874d7d4da2719de2",
                              "name": "Project"
                            },
                            "task": {
                              "task_id": "64944b9d874d7d4da2719de6",
                              "name": "Classification task",
                              "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                              "model_architecture": "EfficientNet-B0",
                              "dataset_storage_id": "64944b9d874d7d4da2719dee"
                            }
                          }
                        },
                        {
                          "id": "6499548fb45e0dbb68efabbe",
                          "type": "optimize",
                          "creation_time": "2023-06-26T09:04:15.184000+00:00",
                          "start_time": "2023-06-26T09:04:22.998000+00:00",
                          "end_time": null,
                          "name": "Optimization",
                          "author": "fdd733a6-a55f-473f-9dc7-e34fe40a3242",
                          "state": "running",
                          "steps": [
                            {
                              "message": "Model optimized",
                              "index": 1,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Optimizing model",
                              "duration": 39.52
                            },
                            {
                              "message": null,
                              "index": 2,
                              "progress": -1,
                              "state": "waiting",
                              "step_name": "Evaluating optimized model"
                            }
                          ],
                          "cancellation_info": {
                            "is_cancelled": false,
                            "user_uid": null,
                            "cancel_time": null
                          },
                          "metadata": {
                            "project": {
                              "id": "64958de6874d7d4da271a079",
                              "name": "Project - 500Mb - (500m - 1)"
                            },
                            "task": {
                              "task_id": "64958de6874d7d4da271a07d",
                              "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                              "model_architecture": "EfficientNet-B0"
                            },
                            "model_storage_id": "64958de6874d7d4da271a07e",
                            "base_model_id": "64994a079ba742adb3adbbfe",
                            "optimization_type": "POT"
                          }
                        },
                        {
                          "id": "649954adb45e0dbb68efabbf",
                          "type": "test",
                          "creation_time": "2023-06-26T09:04:45.059000+00:00",
                          "start_time": "2023-06-26T09:04:50.309000+00:00",
                          "end_time": null,
                          "name": "Model testing",
                          "author": "fdd733a6-a55f-473f-9dc7-e34fe40a3242",
                          "state": "running",
                          "steps": [
                            {
                              "message": "Testing dataset created",
                              "index": 1,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Creating testing dataset",
                              "duration": 13.52
                            },
                            {
                              "message": "Inferring on testing dataset completed",
                              "index": 2,
                              "progress": 100,
                              "state": "finished",
                              "step_name": "Inferring on testing dataset",
                              "duration": 20.52
                            },
                            {
                              "message": null,
                              "index": 3,
                              "progress": -1,
                              "state": "running",
                              "step_name": "Evaluating results"
                            }
                          ],
                          "cancellation_info": {
                            "is_cancelled": false,
                            "user_uid": null,
                            "cancel_time": null
                          },
                          "metadata": {
                            "project": {
                              "id": "64958de6874d7d4da271a079",
                              "name": "Project - 500Mb - (500m - 1)"
                            },
                            "task": {
                              "task_id": "64958de6874d7d4da271a07d"
                            },
                            "test": {
                              "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                              "model_architecture": "EfficientNet-B0",
                              "model": {
                                "architecture": "EfficientNet-B0",
                                "template_id": "Custom_Image_Classification_EfficinetNet-B0",
                                "id": "6602a850708b66c5b03376b3",
                                "optimization_type": "MO",
                                "precision": [
                                  "FP16"
                                ],
                                "has_xai_head": false
                              },
                              "datasets": [
                                {
                                  "id": "64958de6874d7d4da271a082",
                                  "name": "Dataset"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "jobs_count": {
                        "n_scheduled_jobs": 0,
                        "n_running_jobs": 2,
                        "n_finished_jobs": 2,
                        "n_failed_jobs": 0,
                        "n_cancelled_jobs": 0
                      }
                    }
                  },
                  "No jobs response": {
                    "value": {
                      "jobs": [],
                      "count": 0
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/jobs/{job_id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get info on a job",
        "description": "Get information on a running or completed job.",
        "operationId": "GetJob",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "job_id",
            "style": "simple",
            "description": "The ID of the job of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Information successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "train job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "train"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of train job",
                          "type": "object",
                          "description": "Additional information associated with the train job",
                          "properties": {
                            "task": {
                              "type": "object",
                              "description": "Information about the task associated with the job, if any",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the task"
                                },
                                "model_template_id": {
                                  "type": "string",
                                  "description": "Identifier of the model template used by the task"
                                },
                                "model_architecture": {
                                  "type": "string",
                                  "description": "Neural network architecture used for the model"
                                },
                                "dataset_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "task_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                }
                              }
                            },
                            "project": {
                              "type": "object",
                              "description": "Information about the project associated with the job",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                }
                              }
                            },
                            "trained_model": {
                              "type": "object",
                              "description": "Information about the trained model",
                              "properties": {
                                "model_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "model_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "model_activated": {
                                  "type": "boolean",
                                  "description": "Whether the model became the active one after training"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "optimize job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "optimize"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of optimize job",
                          "type": "object",
                          "description": "Additional information associated with the optimize job",
                          "properties": {
                            "task": {
                              "type": "object",
                              "description": "Information about the task associated with the job, if any",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the task"
                                },
                                "model_template_id": {
                                  "type": "string",
                                  "description": "Identifier of the model template used by the task"
                                },
                                "model_architecture": {
                                  "type": "string",
                                  "description": "Neural network architecture used for the model"
                                },
                                "dataset_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "task_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                }
                              }
                            },
                            "project": {
                              "type": "object",
                              "description": "Information about the project associated with the job",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                }
                              }
                            },
                            "model_storage_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "optimization_type": {
                              "type": "string",
                              "description": "Type of optimization",
                              "enum": [
                                "POT"
                              ]
                            },
                            "base_model_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "optimized_model_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "test job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "test"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of train/optimize/test job",
                          "type": "object",
                          "description": "Additional information associated with the train/optimize/test job",
                          "properties": {
                            "task": {
                              "type": "object",
                              "description": "Information about the task associated with the job, if any",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the task"
                                },
                                "model_template_id": {
                                  "type": "string",
                                  "description": "Identifier of the model template used by the task"
                                },
                                "model_architecture": {
                                  "type": "string",
                                  "description": "Neural network architecture used for the model"
                                },
                                "dataset_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "task_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                }
                              }
                            },
                            "test": {
                              "type": "object",
                              "description": "Information about the test associated with the job, if any",
                              "properties": {
                                "model_template_id": {
                                  "type": "string",
                                  "description": "Identifier of the model template used by the task"
                                },
                                "model_architecture": {
                                  "type": "string",
                                  "description": "Neural network architecture used for the model"
                                },
                                "model": {
                                  "id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "template_id": {
                                    "type": "string",
                                    "description": "Identifier of the model template used by the task"
                                  },
                                  "architecture": {
                                    "type": "string",
                                    "description": "Neural network architecture of the model"
                                  },
                                  "precision": {
                                    "type": "array",
                                    "description": "Precision of the model",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "optimization_type": {
                                    "type": "string",
                                    "description": "Type of optimization used for the model"
                                  },
                                  "has_xai_head": {
                                    "type": "boolean",
                                    "description": "Whether the model has an XAI head to generate saliency maps"
                                  }
                                },
                                "datasets": {
                                  "type": "array",
                                  "description": "Array of datasets",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "is_deleted": {
                                        "type": "boolean",
                                        "description": "boolean showing whether the dataset is deleted"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the dataset"
                                      },
                                      "n_images": {
                                        "type": "number",
                                        "format": "int32",
                                        "description": "Number of images in the dataset"
                                      },
                                      "n_frames": {
                                        "type": "number",
                                        "format": "int32",
                                        "description": "Number of frames in the dataset"
                                      },
                                      "n_samples": {
                                        "type": "number",
                                        "format": "int32",
                                        "description": "Number of samples in the dataset"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "project": {
                              "type": "object",
                              "description": "Information about the project associated with the job",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "export_dataset job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "export_dataset"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `export_dataset` job",
                          "type": "object",
                          "description": "Information about the exported dataset",
                          "properties": {
                            "project": {
                              "description": "Information about the project to export",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the project"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Type name of the project",
                                  "enum": [
                                    "classification",
                                    "classification_hierarchical",
                                    "detection",
                                    "segmentation",
                                    "instance_segmentation",
                                    "anomaly",
                                    "detection_oriented",
                                    "detection_classification",
                                    "detection_segmentation",
                                    "keypoint_detection"
                                  ]
                                }
                              }
                            },
                            "dataset": {
                              "description": "Thd dataset information to be exported",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the dataset storage"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset storage"
                                }
                              }
                            },
                            "export_format": {
                              "type": "string",
                              "description": "Format of the dataset to be exported",
                              "enum": [
                                "voc",
                                "coco",
                                "yolo",
                                "datumaro"
                              ]
                            },
                            "download_url": {
                              "type": "string",
                              "description": "URL to download the prepared dataset"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "prepare_import_to_new_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "prepare_import_to_new_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `prepare_import_to_new_project` job",
                          "type": "object",
                          "description": "Supported project types and warnings",
                          "properties": {
                            "file_id": {
                              "type": "string",
                              "description": "ID of the uploaded dataset file to be imported"
                            },
                            "warnings": {
                              "type": "array",
                              "description": "Warnings to import dataset to specific domain",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Type of the warning",
                                    "enum": [
                                      "error",
                                      "warning"
                                    ]
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the warning",
                                    "example": "Missing expected annotation type for classification domain"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Detailed description of the warning"
                                  },
                                  "resolve_strategy": {
                                    "type": "string",
                                    "description": "How to handle the warning"
                                  },
                                  "affected_images": {
                                    "type": "number",
                                    "format": "int32",
                                    "description": "Number of affected images"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "description"
                                ]
                              }
                            },
                            "supported_project_types": {
                              "type": "array",
                              "description": "Supported project types and corresponding labels",
                              "items": {
                                "type": "object",
                                "required": [
                                  "project_type",
                                  "pipeline"
                                ],
                                "properties": {
                                  "project_type": {
                                    "type": "string",
                                    "description": "Project type name",
                                    "enum": [
                                      "classification",
                                      "classification_hierarchical",
                                      "detection",
                                      "segmentation",
                                      "instance_segmentation",
                                      "anomaly",
                                      "detection_oriented",
                                      "detection_classification",
                                      "detection_segmentation",
                                      "keypoint_detection"
                                    ]
                                  },
                                  "pipeline": {
                                    "type": "object",
                                    "required": [
                                      "connections",
                                      "tasks"
                                    ],
                                    "properties": {
                                      "connections": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "from",
                                            "to"
                                          ],
                                          "properties": {
                                            "from": {
                                              "type": "string",
                                              "description": "Source task name"
                                            },
                                            "to": {
                                              "type": "string",
                                              "description": "Target task name"
                                            }
                                          }
                                        }
                                      },
                                      "tasks": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "title",
                                            "task_type",
                                            "labels"
                                          ],
                                          "properties": {
                                            "title": {
                                              "type": "string",
                                              "description": "Task name"
                                            },
                                            "task_type": {
                                              "type": "string",
                                              "description": "OTX Task type name in lowercase",
                                              "enum": [
                                                "dataset",
                                                "classification",
                                                "segmentation",
                                                "detection",
                                                "crop",
                                                "instance_segmentation",
                                                "keypoint_detection",
                                                "anomaly",
                                                "rotated_detection"
                                              ]
                                            },
                                            "labels": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Label name"
                                                  },
                                                  "group": {
                                                    "type": "string",
                                                    "description": "Label group name"
                                                  },
                                                  "parent": {
                                                    "type": "string",
                                                    "description": "Label parent name"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "perform_import_to_new_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "perform_import_to_new_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `perform_import_to_new_project` job",
                          "type": "object",
                          "description": "Created project ID",
                          "properties": {
                            "file_id": {
                              "type": "string",
                              "description": "ID of the uploaded dataset file to be imported"
                            },
                            "project": {
                              "description": "Information about the project to create",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            },
                            "project_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "prepare_import_to_existing_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "prepare_import_to_existing_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `prepare_import_to_existing_project` job",
                          "type": "object",
                          "description": "Labels in the dataset and warnings",
                          "properties": {
                            "file_id": {
                              "type": "string",
                              "description": "ID of the uploaded dataset file to be imported"
                            },
                            "project": {
                              "description": "Information about the project where the dataset is imported",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the project"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Type name of the project",
                                  "enum": [
                                    "classification",
                                    "classification_hierarchical",
                                    "detection",
                                    "segmentation",
                                    "instance_segmentation",
                                    "anomaly",
                                    "detection_oriented",
                                    "detection_classification",
                                    "detection_segmentation",
                                    "keypoint_detection"
                                  ]
                                }
                              }
                            },
                            "warnings": {
                              "type": "array",
                              "description": "Warnings to import dataset to specific domain",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Type of the warning",
                                    "enum": [
                                      "error",
                                      "warning"
                                    ]
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the warning",
                                    "example": "Missing expected annotation type for classification domain"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Detailed description of the warning"
                                  },
                                  "resolve_strategy": {
                                    "type": "string",
                                    "description": "How to handle the warning"
                                  },
                                  "affected_images": {
                                    "type": "number",
                                    "format": "int32",
                                    "description": "Number of affected images"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "description"
                                ]
                              }
                            },
                            "labels": {
                              "type": "array",
                              "description": "Label names in the dataset",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "perform_import_to_existing_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "perform_import_to_existing_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `perform_import_to_existing_project` job",
                          "type": "object",
                          "description": "Imported dataset information",
                          "properties": {
                            "file_id": {
                              "type": "string",
                              "description": "ID of the uploaded dataset file to be imported"
                            },
                            "project": {
                              "description": "Information about the project where the dataset is imported",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the project"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Type name of the project",
                                  "enum": [
                                    "classification",
                                    "classification_hierarchical",
                                    "detection",
                                    "segmentation",
                                    "instance_segmentation",
                                    "anomaly",
                                    "detection_oriented",
                                    "detection_classification",
                                    "detection_segmentation",
                                    "keypoint_detection"
                                  ]
                                }
                              }
                            },
                            "dataset": {
                              "type": "object",
                              "description": "The dataset information for importing the uploaded dataset file",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset storage"
                                },
                                "use_for_training": {
                                  "type": "boolean",
                                  "description": "Whether the dataset will be used for training or not"
                                },
                                "creation_time": {
                                  "type": "string",
                                  "description": "The time at which the dataset was created",
                                  "example": "2024-03-05T06:34:32.332000+00:00"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "export_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "export_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `export_project` job",
                          "type": "object",
                          "description": "Information about the project export operation",
                          "properties": {
                            "project": {
                              "description": "Information about the project being export",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the project"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                }
                              }
                            },
                            "download_url": {
                              "type": "string",
                              "description": "URL to download the exported project archive"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "import_project job",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the job"
                        },
                        "creation_time": {
                          "type": "string",
                          "description": "The time at which the job was created"
                        },
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "author": {
                          "type": "string",
                          "description": "Identifier of the user who submitted the job"
                        },
                        "cancellation_info": {
                          "type": "object",
                          "description": "Information detailing the cancellation status of the job",
                          "properties": {
                            "cancellable": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job can be cancelled after startup"
                            },
                            "is_cancelled": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "description": "whether the job is cancelled"
                            },
                            "user_uid": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "description": "The user UID who requested the cancellation"
                            },
                            "cancel_time": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "description": "The time of cancellation"
                            }
                          }
                        },
                        "steps": {
                          "type": "array",
                          "description": "Progress details for each step of the job",
                          "items": {
                            "type": "object",
                            "description": "Progress for the step",
                            "properties": {
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Status message"
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the step within the job"
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Step progress from 0 to 100"
                              },
                              "state": {
                                "type": "string",
                                "description": "Step state"
                              },
                              "step_name": {
                                "type": "string",
                                "description": "Step name"
                              },
                              "duration": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "format": "float",
                                "description": "Step duration in seconds"
                              },
                              "warning": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Step warning message"
                              }
                            }
                          }
                        },
                        "start_time": {
                          "description": "Start time of the job",
                          "minLength": 0,
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "end_time": {
                          "description": "End time of the job",
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time"
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of the job"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "import_project"
                          ],
                          "description": "Type of the job."
                        },
                        "metadata": {
                          "title": "Metadata of `import_project` job",
                          "type": "object",
                          "description": "Information about the project import operation",
                          "properties": {
                            "project": {
                              "description": "Information about the imported project",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the project"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the project"
                                }
                              }
                            },
                            "parameters": {
                              "description": "Parameters of the import request",
                              "title": "Import project parameters",
                              "type": "object",
                              "properties": {
                                "file_id": {
                                  "description": "ID of the uploaded project zip archive",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Train (scheduled)": {
                    "value": {
                      "id": "66056f0193ae9dd902d2bc75",
                      "type": "train",
                      "creation_time": "2024-03-28T13:22:09.300000+00:00",
                      "start_time": null,
                      "end_time": null,
                      "name": "Training",
                      "author": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                      "state": "scheduled",
                      "steps": [],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "project": {
                          "id": "660287b420d4f3a4595c3133",
                          "name": "MyProject"
                        },
                        "task": {
                          "task_id": "660287bb20d4f3a4595c3137",
                          "name": "Classification",
                          "model_template_id": "Custom_Image_Classification_EfficinetNet-B0",
                          "model_architecture": "EfficientNet-B0",
                          "dataset_storage_id": "660287bc20d4f3a4595c313b"
                        }
                      }
                    }
                  },
                  "Train (in progress)": {
                    "value": {
                      "id": "60ed88029e7651b7da565005",
                      "creation_time": "2022-07-04T12:19:58.836000+00:00",
                      "name": "Train job",
                      "type": "train",
                      "start_time": "2022-07-04T12:20:58.836000+00:00",
                      "end_time": null,
                      "author": "fdd733a6-a55f-473f-9dc7-e34fe40a3242",
                      "state": "running",
                      "steps": [
                        {
                          "message": "Finished",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "First task",
                          "duration": 42.52
                        },
                        {
                          "message": "Running",
                          "index": 2,
                          "progress": 64.46280991735537,
                          "state": "running",
                          "step_name": "Second task",
                          "warning": "Step warning message."
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "task": {
                          "name": "Training task",
                          "task_id": "60ed89589e7651b7da5654ed",
                          "model_template_id": "Custom_Semantic_Segmentation_Lite-HRNet-18-mod2_OCR",
                          "model_architecture": "Custom Semantic Segmentation Lite-HRNet-18-mod2 OCR",
                          "dataset_storage_id": "60ec6bbfb98caeb87e3821b4"
                        },
                        "project": {
                          "id": "60ec6bbfb98caeb87e34306e",
                          "name": "Example project"
                        }
                      }
                    }
                  },
                  "Train (finished)": {
                    "value": {
                      "id": "60ed89589e7651b7da5654ec",
                      "creation_time": "2023-04-24T13:48:48.125000+00:00",
                      "name": "Train job",
                      "type": "train",
                      "start_time": "2023-04-24T13:49:48.125000+00:00",
                      "end_time": "2023-04-24T13:50:48.125000+00:00",
                      "author": "fdd733a6-a55f-473f-9dc7-e34fe40a3242",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Finished",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "First task",
                          "duration": 42.52
                        },
                        {
                          "message": "Finished",
                          "index": 2,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Second task",
                          "duration": 11.2,
                          "warning": "Step warning message."
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "task": {
                          "task_id": "60ed89589e7651b7da5654ed",
                          "name": "Training task",
                          "model_template_id": "Custom_Semantic_Segmentation_Lite-HRNet-18-mod2_OCR",
                          "model_architecture": "Custom Semantic Segmentation Lite-HRNet-18-mod2 OCR",
                          "dataset_storage_id": "60ec6bbfb98caeb87e3821b4"
                        },
                        "project": {
                          "id": "60ec6bbfb98caeb87e34306e",
                          "name": "Example project"
                        },
                        "scores": {
                          "task_id": "60ed89589e7651b7da5654ed",
                          "score": 0.87
                        }
                      }
                    }
                  },
                  "Train (cancelled)": {
                    "value": {
                      "id": "66056d9b93ae9dd902d2bc72",
                      "type": "train",
                      "creation_time": "2024-03-28T13:16:11.164000+00:00",
                      "start_time": "2024-03-28T13:16:17.155000+00:00",
                      "end_time": null,
                      "name": "Training",
                      "author": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                      "state": "cancelled",
                      "steps": [
                        {
                          "message": "Training data prepared",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Prepare training data",
                          "duration": 63.183
                        },
                        {
                          "message": "Training - Initialization",
                          "index": 2,
                          "progress": -1,
                          "state": "cancelled",
                          "step_name": "Model training",
                          "duration": 41.455
                        },
                        {
                          "message": null,
                          "index": 3,
                          "progress": -1,
                          "state": "cancelled",
                          "step_name": "Model evaluation and inference"
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": true,
                        "user_uid": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                        "cancel_time": "2024-03-28T13:18:22.733000+00:00"
                      },
                      "metadata": {
                        "project": {
                          "id": "660287b420d4f3a4595c3133",
                          "name": "MyProject"
                        },
                        "task": {
                          "task_id": "660287bb20d4f3a4595c3137",
                          "name": "Classification",
                          "model_template_id": "Custom_Image_Classification_EfficientNet-V2-S",
                          "model_architecture": "EfficientNet-V2-S",
                          "dataset_storage_id": "660287bc20d4f3a4595c313b"
                        },
                        "trained_model": {
                          "model_storage_id": "66056d9b190ccd857230f47d",
                          "model_id": "66056e0d78427dce8a7f3386",
                          "model_activated": false
                        }
                      }
                    }
                  },
                  "Export dataset": {
                    "value": {
                      "id": "65e6c11ab4cf636589777700",
                      "type": "export_dataset",
                      "creation_time": "2024-03-05T06:52:10.257000+00:00",
                      "start_time": "2024-03-05T06:52:16.473000+00:00",
                      "end_time": "2024-03-05T06:52:30.860000+00:00",
                      "name": "Dataset Export",
                      "author": "f18674a7-a206-4166-9564-0888d5a3236e",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Export dataset is created",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Create export dataset",
                          "duration": 8.024
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "project": {
                          "id": "65e6bcf4c6ada55c64630357",
                          "name": "Project",
                          "type": "detection"
                        },
                        "dataset": {
                          "id": "65e6bcf8c6ada55c6463035f",
                          "name": "Dataset"
                        },
                        "export_format": "datumaro",
                        "download_url": "api/v1/organizations/181fc31b-1ed7-41fe-afe1-936439541357/workspaces/f322799c-f376-4917-9618-df1109fa8268/projects/65e6bcf4c6ada55c64630357/datasets/65e6bcf8c6ada55c6463035f/exports/65e6c128464a3a1ab34b8472/download",
                        "size": 986988
                      }
                    }
                  },
                  "Prepare dataset for import as a new project": {
                    "value": {
                      "id": "65de8164bbd1fcc07d6f1802",
                      "type": "prepare_import_to_new_project",
                      "creation_time": "2024-02-28T00:42:12.845000+00:00",
                      "start_time": "2024-02-28T00:42:20.152000+00:00",
                      "end_time": "2024-02-28T00:42:34.776000+00:00",
                      "name": "Prepare Import to New Project",
                      "author": "1fc46c32-ccb0-4fa6-94c3-3987a70c0ddc",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Dataset is parsed successfully",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Prepare dataset import to new project",
                          "duration": 8.016
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "file_id": "65e6bcf4c6ada55c64630357",
                        "warnings": [
                          {
                            "type": "warning",
                            "name": "Missing expected annotation type for detection domain",
                            "description": "Image contains no bounding boxes",
                            "affected_images": 1
                          },
                          {
                            "type": "warning",
                            "name": "Missing expected annotation type for segmentation domain",
                            "description": "Image contains no polygons",
                            "affected_images": 1
                          }
                        ],
                        "supported_project_types": [
                          {
                            "project_type": "segmentation",
                            "pipeline": {
                              "connections": [
                                {
                                  "from": "Dataset",
                                  "to": "Segmentation"
                                }
                              ],
                              "tasks": [
                                {
                                  "title": "Dataset",
                                  "task_type": "dataset",
                                  "labels": []
                                },
                                {
                                  "title": "Segmentation",
                                  "task_type": "segmentation",
                                  "labels": [
                                    {
                                      "name": "car",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "truck",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "bus",
                                      "group": "default - Segmentation"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "project_type": "detection",
                            "pipeline": {
                              "connections": [
                                {
                                  "from": "Dataset",
                                  "to": "Detection"
                                }
                              ],
                              "tasks": [
                                {
                                  "title": "Dataset",
                                  "task_type": "dataset",
                                  "labels": []
                                },
                                {
                                  "title": "Detection",
                                  "task_type": "detection",
                                  "labels": [
                                    {
                                      "name": "car",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "truck",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "bus",
                                      "group": "default - Segmentation"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "project_type": "instance_segmentation",
                            "pipeline": {
                              "connections": [
                                {
                                  "from": "Dataset",
                                  "to": "Instance Segmentation"
                                }
                              ],
                              "tasks": [
                                {
                                  "title": "Dataset",
                                  "task_type": "dataset",
                                  "labels": []
                                },
                                {
                                  "title": "Instance Segmentation",
                                  "task_type": "instance_segmentation",
                                  "labels": [
                                    {
                                      "name": "car",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "truck",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "bus",
                                      "group": "default - Segmentation"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "project_type": "detection_segmentation",
                            "pipeline": {
                              "connections": [
                                {
                                  "from": "Dataset",
                                  "to": "Detection"
                                },
                                {
                                  "from": "Detection",
                                  "to": "Crop"
                                },
                                {
                                  "from": "Crop",
                                  "to": "Segmentation"
                                }
                              ],
                              "tasks": [
                                {
                                  "title": "Dataset",
                                  "task_type": "dataset",
                                  "labels": []
                                },
                                {
                                  "title": "Detection",
                                  "task_type": "detection",
                                  "labels": [
                                    {
                                      "name": "default_detection_label",
                                      "group": "default - Detection"
                                    }
                                  ]
                                },
                                {
                                  "title": "Crop",
                                  "task_type": "crop",
                                  "labels": []
                                },
                                {
                                  "title": "Segmentation",
                                  "task_type": "segmentation",
                                  "labels": [
                                    {
                                      "name": "car",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "truck",
                                      "group": "default - Segmentation"
                                    },
                                    {
                                      "name": "bus",
                                      "group": "default - Segmentation"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  },
                  "Import dataset as a new project": {
                    "value": {
                      "id": "65e6c003b4cf6365897776fd",
                      "type": "perform_import_to_new_project",
                      "creation_time": "2024-03-05T06:47:31.354000+00:00",
                      "start_time": "2024-03-05T06:47:36.909000+00:00",
                      "end_time": "2024-03-05T06:48:02.799000+00:00",
                      "name": "Create Project from Dataset",
                      "author": "f18674a7-a206-4166-9564-0888d5a3236e",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Project created and populated successfully",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Create project from import dataset",
                          "duration": 18.007
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "file_id": "65e6bcf4c6ada55c64630357",
                        "project": {
                          "name": "person car detection",
                          "type": "detection"
                        },
                        "project_id": "65e6c01185ff89c56c11c5dc"
                      }
                    }
                  },
                  "Prepare dataset for import into an existing project": {
                    "value": {
                      "id": "65e6b9c86c95f8c683685d6c",
                      "type": "prepare_import_to_existing_project",
                      "creation_time": "2024-03-05T06:20:56.733000+00:00",
                      "start_time": "2024-03-05T06:21:02.840000+00:00",
                      "end_time": "2024-03-05T06:21:14.634000+00:00",
                      "name": "Prepare Import to Existing Project",
                      "author": "3bc89128-bf30-40c2-a3ad-dcd46e5c5ddf",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Dataset is parsed successfully",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Prepare dataset import to existing project",
                          "duration": 6.022
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "file_id": "65e6bcf4c6ada55c64630357",
                        "project": {
                          "id": "65e6c01185ff89c56c11c5dc",
                          "name": "cat dog segmentation",
                          "type": "segmentation"
                        },
                        "labels": [
                          "dog",
                          "cat"
                        ],
                        "warnings": []
                      }
                    }
                  },
                  "Import dataset into existing project": {
                    "value": {
                      "id": "65e6c0afb4cf6365897776ff",
                      "type": "perform_import_to_existing_project",
                      "creation_time": "2024-03-05T06:50:23.213000+00:00",
                      "start_time": "2024-03-05T06:50:29.923000+00:00",
                      "end_time": "2024-03-05T06:50:42.821000+00:00",
                      "name": "Import Dataset to Existing Project",
                      "author": "f18674a7-a206-4166-9564-0888d5a3236e",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Project populated successfully",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Import dataset to project",
                          "duration": 6
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "file_id": "65e6bcf4c6ada55c64630357",
                        "project": {
                          "id": "65e6c01185ff89c56c11c5dc",
                          "name": "cat dog segmentation",
                          "type": "segmentation"
                        },
                        "dataset": {
                          "id": "65e6bcf8c6ada55c6463035f",
                          "name": "Dataset",
                          "use_for_training": true,
                          "creation_time": "2024-03-05T06:34:32.332000+00:00"
                        }
                      }
                    }
                  },
                  "Export project": {
                    "value": {
                      "id": "6604440a93ae9dd902d2bc6c",
                      "type": "export_project",
                      "creation_time": "2024-03-27T16:06:34.087000+00:00",
                      "start_time": "2024-03-27T16:06:41.444000+00:00",
                      "end_time": "2024-03-27T16:08:11.303000+00:00",
                      "name": "Project Export",
                      "author": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Project export complete",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Exporting project",
                          "duration": 27.997
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "project": {
                          "id": "66042c987b4bd079335e9f8e",
                          "name": "MyProject"
                        },
                        "download_url": "api/v1/organizations/421867ab-c380-48d0-b3ca-5cdb605f3c60/workspaces/6c029d4a-b93f-4114-93bd-78e534b98f04/projects/66042c987b4bd079335e9f8e/exports/6604445ad378a62f4bac6c84/download",
                        "size": 123456789
                      }
                    }
                  },
                  "Import project (finished)": {
                    "value": {
                      "id": "66042c7b93ae9dd902d2bc6a",
                      "type": "import_project",
                      "creation_time": "2024-03-27T14:26:03.565000+00:00",
                      "start_time": "2024-03-27T14:26:11.162000+00:00",
                      "end_time": "2024-03-27T14:26:55.735000+00:00",
                      "name": "Project Import",
                      "author": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                      "state": "finished",
                      "steps": [
                        {
                          "message": "Project import complete",
                          "index": 1,
                          "progress": 100,
                          "state": "finished",
                          "step_name": "Importing project",
                          "duration": 29.827
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "parameters": {
                          "file_id": "66042c3a446e356aedce4cd3"
                        },
                        "project": {
                          "id": "66042c987b4bd079335e9f8e",
                          "name": "MyProject"
                        }
                      }
                    }
                  },
                  "Import project (failed)": {
                    "value": {
                      "id": "66056cb293ae9dd902d2bc70",
                      "type": "import_project",
                      "creation_time": "2024-03-28T13:12:18.152000+00:00",
                      "start_time": "2024-03-28T13:12:24.398000+00:00",
                      "end_time": "2024-03-28T13:12:40.640000+00:00",
                      "name": "Project Import",
                      "author": "bcc5fa82-7b94-4b1b-9c71-0526b793c3e0",
                      "state": "failed",
                      "steps": [
                        {
                          "message": "Failed to import project.",
                          "index": 1,
                          "progress": 5,
                          "state": "failed",
                          "step_name": "Importing project",
                          "duration": 6.006
                        }
                      ],
                      "cancellation_info": {
                        "is_cancelled": false,
                        "user_uid": null,
                        "cancel_time": null
                      },
                      "metadata": {
                        "parameters": {
                          "file_id": "66056cad446e356aedce4cd7"
                        },
                        "project": {
                          "name": "MyProject"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Job not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Job with ID 123 is not found",
                      "error_code": "job_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Delete a job",
        "description": "Mark a job as cancelled with a deletion flag",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "job_id",
            "style": "simple",
            "description": "The ID of the job of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Job marked as cancelled with a deletion flag",
            "content": {
              "application/json": {
                "examples": {
                  "Successful deletion response": {
                    "value": "Job with ID `60eda62eb49fdceefb757802` marked as cancelled with deletion flag."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Job not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Job with ID 123 is not found",
                      "error_code": "job_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/jobs/{job_id}:cancel": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancel a job",
        "operationId": "CancelJob",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "job_id",
            "style": "simple",
            "description": "The ID of the job of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Job marked as cancelled",
            "content": {
              "application/json": {
                "examples": {
                  "Successful cancellation response": {
                    "value": "Job with ID `60eda62eb49fdceefb757802` marked as cancelled."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Job not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Job with ID 123 is not found",
                      "error_code": "job_not_found"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Job cannot be cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Job cannot be cancelled": {
                    "value": {
                      "http_status": 412,
                      "message": "Job cannot be cancelled.",
                      "error_code": "job_cannot_be_cancelled"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get server status",
        "description": "Get the server status. Contains running jobs count, free disk space and used disk space in bytes.",
        "operationId": "GetServerStatus",
        "responses": {
          "200": {
            "description": "The server status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "n_running_jobs": {
                      "type": "integer",
                      "description": "Number of running jobs"
                    },
                    "warning": {
                      "type": "string",
                      "description": "Displays a warning message if the server is running low on memory"
                    },
                    "storage": {
                      "type": "object",
                      "properties": {
                        "total_space": {
                          "type": "number",
                          "description": "Total disk space in bytes"
                        },
                        "free_space": {
                          "type": "number",
                          "description": "Total disk space in bytes"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Server status response": {
                    "value": {
                      "n_running_jobs": 1,
                      "warning": "Free space is running low - only 5 GB left of which 20 GB is reserved for the system. ",
                      "storage": {
                        "free_space": 5,
                        "total_space": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get project status",
        "description": "Get the status of a project. Includes project score, number of required annotations and current state, for the project and on a per-task basis.",
        "operationId": "GetProjectStatus",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The current status of the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_training": {
                      "type": "boolean",
                      "description": "Boolean that indicates whether a model is currently training"
                    },
                    "n_required_annotations": {
                      "type": "integer",
                      "description": "Required number of annotations before training is allowed"
                    },
                    "n_new_annotations": {
                      "type": "integer",
                      "description": "Number of new annotations that have been added after the last training round"
                    },
                    "n_running_jobs": {
                      "type": "integer",
                      "description": "Number of running jobs across whole system"
                    },
                    "n_running_jobs_project": {
                      "type": "integer",
                      "description": "Number of running jobs for given project"
                    },
                    "project_performance": {
                      "type": "object",
                      "properties": {
                        "score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "format": "float",
                          "description": "Average score of task scores of a project, null if no model is trained."
                        },
                        "task_performances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "task_id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "score": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Value of the score."
                                      },
                                      "metric_type": {
                                        "type": "string",
                                        "description": "Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc."
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "metric_type"
                                    ]
                                  }
                                ],
                                "description": "Model score for the task, null if no model is trained."
                              }
                            },
                            "required": [
                              "score",
                              "task_id"
                            ]
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "number",
                          "format": "float",
                          "description": "Training progress, if a model is being trained"
                        }
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "description": "Array that contains the status of every task",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "is_training": {
                            "type": "boolean",
                            "description": "Boolean that indicates whether the task is currently training"
                          },
                          "n_new_annotations": {
                            "type": "integer",
                            "description": "Number of new annotations for the task that have been added after the last training round"
                          },
                          "ready_to_train": {
                            "type": "boolean",
                            "description": "Boolean indicating whether the project is ready to be manually trained."
                          },
                          "required_annotations": {
                            "type": "object",
                            "properties": {
                              "details": {
                                "type": "array",
                                "description": "Required annotations per label",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "label_name": {
                                      "type": "string",
                                      "description": "Name of the label"
                                    },
                                    "label_color": {
                                      "type": "string",
                                      "description": "Color of the label"
                                    },
                                    "value": {
                                      "type": "integer",
                                      "description": "Number of required annotations for this label"
                                    }
                                  }
                                }
                              },
                              "value": {
                                "type": "integer",
                                "description": "Total number of required annotations"
                              }
                            }
                          },
                          "status": {
                            "type": "object",
                            "properties": {
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "description": "Current progress of the task"
                              }
                            }
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the task"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Running torch segmentation": {
                    "value": {
                      "is_training": true,
                      "n_required_annotations": 0,
                      "n_new_annotations": 0,
                      "project_performance": {
                        "score": null,
                        "task_performances": [
                          {
                            "task_id": "60e829a2436a044be4109593",
                            "score": null
                          }
                        ]
                      },
                      "status": {
                        "progress": 4.132231404958678
                      },
                      "tasks": [
                        {
                          "id": "60e829a2436a044be4109593",
                          "is_training": true,
                          "required_annotations": {
                            "details": [],
                            "value": 0
                          },
                          "status": {
                            "progress": 4.132231404958678
                          },
                          "ready_to_train": false,
                          "title": "torch_segmentation",
                          "n_new_annotations": 0
                        }
                      ]
                    }
                  },
                  "Waiting for classification annotations": {
                    "value": {
                      "is_training": false,
                      "n_required_annotations": 8,
                      "n_new_annotations": 0,
                      "project_performance": {
                        "score": 0.6,
                        "task_performances": [
                          {
                            "task_id": "60e710798cc17243dd2c2af4",
                            "score": {
                              "value": 0.6,
                              "metric_type": "accuracy"
                            }
                          }
                        ]
                      },
                      "status": {
                        "progress": -1
                      },
                      "tasks": [
                        {
                          "id": "60e710798cc17243dd2c2af4",
                          "is_training": false,
                          "ready_to_train": false,
                          "required_annotations": {
                            "details": [
                              {
                                "id": "60e710798cc17243dd2c2af7",
                                "label_name": "rectangle",
                                "label_color": "#ff007bff",
                                "value": 4
                              },
                              {
                                "id": "60e710798cc17243dd2c2af8",
                                "label_name": "circle",
                                "label_color": "#2a2b2eff",
                                "value": 4
                              }
                            ],
                            "value": 8
                          },
                          "status": {
                            "progress": -1
                          },
                          "title": "classification",
                          "n_new_annotations": 0
                        }
                      ]
                    }
                  },
                  "Awaiting resource allocation": {
                    "value": {
                      "is_training": true,
                      "n_required_annotations": 0,
                      "n_new_annotations": 0,
                      "project_performance": {
                        "score": 0.55,
                        "local_score": null,
                        "global_score": 0.55,
                        "task_performances": [
                          {
                            "task_id": "60e829a2436a044be4109593",
                            "score": {
                              "value": 0.55,
                              "metric_type": "accuracy"
                            },
                            "global_score": {
                              "value": 0.55,
                              "metric_type": "accuracy"
                            },
                            "local_score": null
                          }
                        ]
                      },
                      "status": {
                        "progress": 4.132231404958678
                      },
                      "tasks": [
                        {
                          "id": "60e829a2436a044be4109593",
                          "is_training": true,
                          "ready_to_train": true,
                          "required_annotations": {
                            "details": [],
                            "value": 0
                          },
                          "status": {
                            "progress": 4.132231404958678
                          },
                          "title": "torch_segmentation",
                          "n_new_annotations": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/incremental_learning_status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get incremental learning status",
        "description": "Get the incremental learning status of a project. This contains information on the number of annotations that need to be added before training will be started, on a per-label and per-task basis.",
        "operationId": "GetIncrementalLearningStatus",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The current incremental learning status of the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "n_required_annotations": {
                      "type": "integer",
                      "description": "Required number of annotations before training is allowed"
                    },
                    "n_new_annotations": {
                      "type": "integer",
                      "description": "Number of new annotations that have been added after the last training round"
                    },
                    "status_per_task": {
                      "type": "array",
                      "description": "Array that contains the status of every task",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "n_new_annotations": {
                            "type": "integer",
                            "description": "Number of new annotations for the task that have been added after the last training round"
                          },
                          "ready_to_train": {
                            "type": "boolean",
                            "description": "Boolean indicating whether the project is ready to be manually trained."
                          },
                          "required_total": {
                            "type": "integer",
                            "description": "Total number of annotations required for this task before training can be started"
                          },
                          "required_per_label": {
                            "type": "array",
                            "description": "Required annotations per label",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "label_name": {
                                  "type": "string",
                                  "description": "Name of the label"
                                },
                                "label_color": {
                                  "type": "string",
                                  "description": "Color of the label"
                                },
                                "value": {
                                  "type": "integer",
                                  "description": "Number of required annotations for this label"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Incremental learning status response": {
                    "value": {
                      "n_required_annotations": 8,
                      "n_new_annotations": 0,
                      "status_per_task": [
                        {
                          "task_id": "60e710798cc17243dd2c2af4",
                          "required_per_label": [
                            {
                              "id": "60e710798cc17243dd2c2af7",
                              "label_name": "rectangle",
                              "label_color": "#ff007bff",
                              "value": 4
                            },
                            {
                              "id": "60e710798cc17243dd2c2af8",
                              "label_name": "circle",
                              "label_color": "#2a2b2eff",
                              "value": 4
                            }
                          ],
                          "required_total": 8,
                          "n_new_annotations": 0,
                          "ready_to_train": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get server status for organization",
        "description": "Get the server status for a given organization. Contains running jobs count, free disk space and used disk space in bytes.",
        "operationId": "GetOrganizationStatus",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The server status for organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "n_running_jobs": {
                      "type": "integer",
                      "description": "Number of running jobs"
                    },
                    "warning": {
                      "type": "string",
                      "description": "Displays a warning message if the server is running low on memory"
                    },
                    "storage": {
                      "type": "object",
                      "properties": {
                        "total_space": {
                          "type": "number",
                          "description": "Total disk space in bytes"
                        },
                        "free_space": {
                          "type": "number",
                          "description": "Total disk space in bytes"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Server status response": {
                    "value": {
                      "n_running_jobs": 1,
                      "warning": "Free space is running low - only 5 GB left of which 20 GB is reserved for the system. ",
                      "storage": {
                        "free_space": 5,
                        "total_space": 500
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the current configuration for all components in the project.",
        "description": "This endpoint gets the configuration for all components in the project, as well as the current algorithms used in the task chain. The configuration is subdivided into components. Examples of configuration components are the deep learning parameters, postprocessing parameters or subset-related parameters. Some components are further divided into parameter groups.",
        "operationId": "GetFullConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get full configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "global": {
                      "type": "array",
                      "description": "Array of configurable parameter objects for the different global (i.e. project-wide) components in the project",
                      "items": {
                        "type": "object",
                        "title": "Component parameters",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                            "enum": [
                              "CONFIGURABLE_PARAMETERS",
                              "PARAMETER_GROUP"
                            ]
                          },
                          "entity_identifier": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Component entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "project_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "task_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "component": {
                                    "type": "string",
                                    "description": "Describes the component to which the configurable parameters apply"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                    "enum": [
                                      "COMPONENT_PARAMETERS"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Model entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "model_storage_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                    "enum": [
                                      "HYPER_PARAMETERS"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Hyper parameter group entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "model_storage_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "group_name": {
                                    "type": "string",
                                    "description": "Name of the hyper parameter group"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                    "enum": [
                                      "HYPER_PARAMETER_GROUP"
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "header": {
                            "type": "string",
                            "description": "Name of the configuration",
                            "example": "Subset splitting"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the configuration, indicating which part of the system it controls.",
                            "example": "These parameters control the splitting of the dataset into training, validation and test set."
                          },
                          "groups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "header": {
                                  "type": "string",
                                  "example": "Learning Parameters",
                                  "description": "Defines the parameter group"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of the parameter group",
                                  "example": "Configuration to control training behaviour"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "PARAMETER_GROUP"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the parameter group"
                                },
                                "parameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "title": "Configurable parameter",
                                    "properties": {
                                      "header": {
                                        "type": "string",
                                        "description": "User friendly title for the parameter."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "User friendly description for what the parameter does."
                                      },
                                      "warning": {
                                        "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                      },
                                      "value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "number"
                                          },
                                          {
                                            "type": "boolean"
                                          }
                                        ],
                                        "description": "Value that this parameter currently takes."
                                      },
                                      "default_value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "number"
                                          },
                                          {
                                            "type": "boolean"
                                          }
                                        ],
                                        "description": "Default value that should be set for this parameter."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name to identify the parameter by in the system."
                                      },
                                      "template_type": {
                                        "type": "string",
                                        "enum": [
                                          "selectable",
                                          "input"
                                        ],
                                        "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                      },
                                      "data_type": {
                                        "type": "string",
                                        "enum": [
                                          "float",
                                          "integer",
                                          "boolean",
                                          "string"
                                        ],
                                        "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                      },
                                      "options": {
                                        "type": "array",
                                        "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                        "items": {
                                          "oneOf": [
                                            {
                                              "type": "number"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ]
                                        }
                                      },
                                      "min_value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                      },
                                      "max_value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                      },
                                      "ui_rules": {
                                        "type": "object",
                                        "description": "Not implemented at this moment"
                                      },
                                      "editable": {
                                        "type": "boolean",
                                        "description": "Not implemented at this moment."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "type": "array",
                            "description": "Array of configurable parameters",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "title": "Configurable boolean",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the configurable boolean."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the boolean does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "boolean",
                                      "description": "Value that this boolean currently takes."
                                    },
                                    "default_value": {
                                      "type": "boolean",
                                      "description": "Default value that should be set for this boolean."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable boolean by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "boolean"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Configurable float",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the float."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the float does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Value that this configurable float currently takes."
                                    },
                                    "default_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Default value that should be set for this float."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable float by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "float"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                    },
                                    "min_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "max_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Configurable integer",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the integer."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the integer does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "integer",
                                      "description": "Value that this configurable integer currently takes."
                                    },
                                    "default_value": {
                                      "type": "integer",
                                      "description": "Default value that should be set for this integer."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable integer by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "integer"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                    },
                                    "min_value": {
                                      "type": "integer",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "max_value": {
                                      "type": "integer",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Selectable string",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the selectable string."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the selectable string parameter does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Value that this selectable string currently takes."
                                    },
                                    "default_value": {
                                      "type": "string",
                                      "description": "Default value that should be set for this selectable string."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the selectable string parameter by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "selectable"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "string"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                    },
                                    "options": {
                                      "type": "array",
                                      "description": "List of values that this selectable string can take.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Selectable float",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the selectable."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the selectable parameter does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Value that this selectable currently takes."
                                    },
                                    "default_value": {
                                      "type": "string",
                                      "description": "Default value that should be set for this selectable."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the selectable parameter by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "selectable"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "float"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                    },
                                    "options": {
                                      "type": "array",
                                      "description": "List of values that this float selectable can take.",
                                      "items": {
                                        "type": "number",
                                        "format": "float"
                                      }
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "task_chain": {
                      "type": "array",
                      "description": "Array of task configurations",
                      "items": {
                        "type": "object",
                        "properties": {
                          "components": {
                            "type": "array",
                            "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "title": "Hyper parameter group",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the hyper parameter group"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 26,
                                      "maxLength": 27,
                                      "example": "60d31793d5f1fb7e6e3c1a4c-1",
                                      "description": "ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group."
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "The name of the hyper parameter group",
                                      "example": "Learning parameters"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the hyper parameter group.",
                                      "example": "A set of parameters that control the training process."
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Component parameters",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "Name of the configuration",
                                      "example": "Subset splitting"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the configuration, indicating which part of the system it controls.",
                                      "example": "These parameters control the splitting of the dataset into training, validation and test set."
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Hyper parameters",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "The name of the configuration",
                                      "example": "Hyper parameters for a segmentation task"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of model to which this configuration belongs",
                                      "example": "Hyper parameters for a segmentation task"
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "task_title": {
                            "type": "string",
                            "description": "Title of the task the configuration is connected to"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Full configuration": {
                    "value": {
                      "global": [
                        {
                          "description": "Specify the project-level configuration for active learning.",
                          "entity_identifier": {
                            "component": "PROJECT_ACTIVE_LEARNING",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Active Learning",
                          "id": "62b2d940f54b4b5f9e4dcb36",
                          "parameters": [
                            {
                              "data_type": "string",
                              "default_value": "mean",
                              "description": "Function to aggregate the active scores of a media across the tasks",
                              "editable": true,
                              "enum_name": "ActiveScoreReductionFunction",
                              "header": "Inter-task scores reduction function",
                              "name": "inter_task_reduce_fn",
                              "options": [
                                "min",
                                "mean",
                                "max"
                              ],
                              "template_type": "selectable",
                              "ui_rules": {},
                              "value": "mean",
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 500,
                              "description": "Number of images analysed after training for active learning",
                              "editable": true,
                              "header": "Number of images analysed after training for active learning",
                              "max_value": 10000,
                              "min_value": 10,
                              "name": "max_unseen_media",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 500,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        },
                        {
                          "description": "Specify parameters to control how datasets are managed in the system.",
                          "entity_identifier": {
                            "component": "PIPELINE_DATASET_MANAGER",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Dataset management",
                          "id": "62b2d940f54b4b5f9e4dcb39",
                          "parameters": [
                            {
                              "data_type": "boolean",
                              "default_value": false,
                              "description": "Enabling NDR will help to prevent annotating very similar images. Note that this does not remove any data from the project,it is only used in selecting images for active learning.",
                              "editable": true,
                              "header": "Use Near Duplicate Removal (NDR) for active learning",
                              "name": "use_ndr",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": false,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        }
                      ],
                      "task_chain": [
                        {
                          "components": [
                            {
                              "description": "Learning Parameters",
                              "entity_identifier": {
                                "group_name": "learning_parameters",
                                "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                                "type": "HYPER_PARAMETER_GROUP",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "Learning Parameters",
                              "id": "62b2d9478fd8d1af66e5af12-0",
                              "name": "learning_parameters",
                              "parameters": [
                                {
                                  "data_type": "integer",
                                  "default_value": 32,
                                  "description": "The number of training samples seen in each iteration of training. Increasing this value improves training time and may make the training more stable. A larger batch size has higher memory requirements.",
                                  "editable": true,
                                  "header": "Batch size",
                                  "max_value": 512,
                                  "min_value": 1,
                                  "name": "batch_size",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 32,
                                  "warning": "Increasing this value may cause the system to use more memory than available, potentially causing out of memory errors, please update with caution."
                                },
                                {
                                  "data_type": "boolean",
                                  "default_value": false,
                                  "description": "Learning rate parameter value will be ignored if enabled.",
                                  "editable": true,
                                  "header": "Enable automatic learing rate estimation",
                                  "name": "enable_lr_finder",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": false,
                                  "warning": null
                                },
                                {
                                  "data_type": "float",
                                  "default_value": 0.007,
                                  "description": "Increasing this value will speed up training convergence but might make it unstable.",
                                  "editable": true,
                                  "header": "Learning rate",
                                  "max_value": 0.1,
                                  "min_value": 1e-7,
                                  "name": "learning_rate",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 0.007,
                                  "warning": null
                                },
                                {
                                  "data_type": "integer",
                                  "default_value": 200,
                                  "description": "Increasing this value causes the results to be more robust but training time will be longer.",
                                  "editable": true,
                                  "header": "Maximum number of training epochs",
                                  "max_value": 1000,
                                  "min_value": 1,
                                  "name": "max_num_epochs",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 200,
                                  "warning": null
                                }
                              ],
                              "type": "PARAMETER_GROUP"
                            },
                            {
                              "description": "Specify the distribution of annotated samples over the training, validation and test sets.",
                              "entity_identifier": {
                                "component": "SUBSET_MANAGER",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "groups": [
                                {
                                  "description": "Specify the distributions of annotated samples over training, validation and test set.",
                                  "header": "Subset distribution",
                                  "name": "subset_parameters",
                                  "parameters": [
                                    {
                                      "data_type": "float",
                                      "default_value": 0.3,
                                      "description": "Fraction of annotated data that will be assigned to the test set",
                                      "editable": true,
                                      "header": "Test set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "test_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.3,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "float",
                                      "default_value": 0.5,
                                      "description": "Fraction of annotated data that will be assigned to the training set",
                                      "editable": true,
                                      "header": "Training set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "train_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.5,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "float",
                                      "default_value": 0.2,
                                      "description": "Fraction of annotated data that will be assigned to the validation set",
                                      "editable": true,
                                      "header": "Validation set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "validation_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.2,
                                      "warning": null
                                    }
                                  ],
                                  "type": "PARAMETER_GROUP"
                                }
                              ],
                              "header": "Subset splitting",
                              "id": "62b2d940f54b4b5f9e4dcb34",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "If this setting is enabled, the system will automatically determine the most optimal distribution of the annotated samples over training, validation and test set. Disable this setting to manually specify the proportions.",
                                  "editable": true,
                                  "header": "Automatically determine subset proportions",
                                  "name": "auto_subset_fractions",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "Specify the number of required annotations for a task",
                              "entity_identifier": {
                                "component": "DATASET_COUNTER",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "Annotation requirements",
                              "id": "62b2d940f54b4b5f9e4dcb35",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "If this is ON, the first training will only be triggered when each label is present in N images, while N is number of required images for the first training. Otherwise, first training will be triggered when N images have been annotated. If first training has been triggered, this parameter will not take effect.",
                                  "editable": true,
                                  "header": "Label constraint for the first training",
                                  "name": "label_constraint_first_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                },
                                {
                                  "data_type": "integer",
                                  "default_value": 6,
                                  "description": "The minimum number of new annotations required before auto-train is triggered. Auto-training will start every time that this number of annotations is created.",
                                  "editable": true,
                                  "header": "Number of images required for auto-training",
                                  "max_value": 10000,
                                  "min_value": 3,
                                  "name": "required_images_auto_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 6,
                                  "warning": null
                                },
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "Only applicable if auto-training is on. Set this parameter on to let the system dynamically compute the number of required annotations between training rounds based on model performance and training dataset size.",
                                  "editable": true,
                                  "header": "Dynamic required annotations",
                                  "name": "use_dynamic_required_annotations",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": false,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "Specify the task-level configuration for active learning.",
                              "entity_identifier": {
                                "component": "TASK_ACTIVE_LEARNING",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "groups": [
                                {
                                  "description": "Score extractors",
                                  "header": "Score extractors",
                                  "name": "preprocessing",
                                  "parameters": [
                                    {
                                      "data_type": "boolean",
                                      "default_value": true,
                                      "description": "The feature vector score extractor outputs scores which reflect the distances between the known and unknown samples in the latent space.",
                                      "editable": true,
                                      "header": "Enable feature vector score extractor",
                                      "name": "feature_vector_extractor",
                                      "template_type": "input",
                                      "ui_rules": {},
                                      "value": true,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "boolean",
                                      "default_value": true,
                                      "description": "The uncertainty score extractor outputs scores which reflect the uncertainty of the predictions on the respective media",
                                      "editable": true,
                                      "header": "Enable uncertainty score extractor",
                                      "name": "uncertainty_extractor",
                                      "template_type": "input",
                                      "ui_rules": {},
                                      "value": true,
                                      "warning": null
                                    }
                                  ],
                                  "type": "PARAMETER_GROUP"
                                }
                              ],
                              "header": "Active Learning",
                              "id": "62b2d940f54b4b5f9e4dcb37",
                              "parameters": [
                                {
                                  "data_type": "string",
                                  "default_value": "mean",
                                  "description": "Function to aggregate the active scores of a media within a task",
                                  "editable": true,
                                  "enum_name": "ActiveScoreReductionFunction",
                                  "header": "Intra-task scores reduction function",
                                  "name": "intra_task_reduce_fn",
                                  "options": [
                                    "min",
                                    "mean",
                                    "max"
                                  ],
                                  "template_type": "selectable",
                                  "ui_rules": {},
                                  "value": "mean",
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "General settings for a task.",
                              "entity_identifier": {
                                "component": "TASK_NODE",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "General",
                              "id": "62b2d940f54b4b5f9e4dcb38",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "Enable to allow the task to start training automatically when it is ready to train.",
                                  "editable": true,
                                  "header": "Auto-training",
                                  "name": "auto_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            }
                          ],
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "task_title": "Classification task"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Set the full configuration for the project.",
        "description": "This endpoint sets the configuration for all components in the project, as well as the current algorithms used in the task chain. The configuration is subdivided into components, and every component is divided into parameter groups.",
        "operationId": "SetFullConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "global",
                  "task_chain"
                ],
                "properties": {
                  "global": {
                    "type": "array",
                    "description": "Array of configurable parameter objects for the different global (i.e. project-wide) components in the project",
                    "items": {
                      "required": [
                        "entity_identifier"
                      ],
                      "type": "object",
                      "title": "Component parameters",
                      "description": "The new values for the component parameters to set",
                      "properties": {
                        "entity_identifier": {
                          "required": [
                            "type",
                            "component"
                          ],
                          "type": "object",
                          "title": "Component entity identifier",
                          "properties": {
                            "workspace_id": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                {
                                  "type": "string",
                                  "minLength": 36,
                                  "maxLength": 36,
                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                  "description": "UUID of the object"
                                }
                              ]
                            },
                            "project_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "task_id": {
                              "type": "string",
                              "minLength": 0,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the task"
                            },
                            "component": {
                              "type": "string",
                              "description": "If the configuration is a component configuration, describes the component.",
                              "enum": [
                                "NULL_COMPONENT",
                                "SUBSET_MANAGER",
                                "DATASET_COUNTER",
                                "PROJECT_ACTIVE_LEARNING",
                                "TASK_ACTIVE_LEARNING",
                                "TASK_NODE",
                                "PIPELINE_DATASET_MANAGER"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                              "enum": [
                                "COMPONENT_PARAMETERS"
                              ]
                            }
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "required": [
                              "parameters",
                              "name"
                            ],
                            "type": "object",
                            "title": "Parameter group",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the parameter group"
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of parameters",
                                "items": {
                                  "required": [
                                    "value",
                                    "name"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "Value to set the parameter to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the parameter by in the system."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "parameters": {
                          "type": "array",
                          "items": {
                            "required": [
                              "value",
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ],
                                "description": "Value to set the parameter to."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name to identify the parameter by in the system."
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "task_chain": {
                    "type": "array",
                    "description": "Array of task configurations",
                    "items": {
                      "required": [
                        "components"
                      ],
                      "type": "object",
                      "properties": {
                        "components": {
                          "type": "array",
                          "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                          "items": {
                            "required": [
                              "entity_identifier"
                            ],
                            "type": "object",
                            "title": "Configurable parameters object",
                            "description": "The new values for the component parameters, hyper parameters or hyper parameter group to set",
                            "properties": {
                              "entity_identifier": {
                                "oneOf": [
                                  {
                                    "required": [
                                      "type",
                                      "component"
                                    ],
                                    "type": "object",
                                    "title": "Component entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "project_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 0,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the task"
                                      },
                                      "component": {
                                        "type": "string",
                                        "description": "If the configuration is a component configuration, describes the component.",
                                        "enum": [
                                          "NULL_COMPONENT",
                                          "SUBSET_MANAGER",
                                          "DATASET_COUNTER",
                                          "PROJECT_ACTIVE_LEARNING",
                                          "TASK_ACTIVE_LEARNING",
                                          "TASK_NODE",
                                          "PIPELINE_DATASET_MANAGER"
                                        ]
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                        "enum": [
                                          "COMPONENT_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "type",
                                      "model_storage_id"
                                    ],
                                    "type": "object",
                                    "title": "Model entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                        "enum": [
                                          "HYPER_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "type",
                                      "model_storage_id",
                                      "group_name"
                                    ],
                                    "type": "object",
                                    "title": "Hyper parameter group entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "group_name": {
                                        "type": "string",
                                        "description": "The name of the hyper parameter group"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                        "enum": [
                                          "HYPER_PARAMETER_GROUP"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "groups": {
                                "type": "array",
                                "items": {
                                  "required": [
                                    "parameters",
                                    "name"
                                  ],
                                  "type": "object",
                                  "title": "Parameter group",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the parameter group"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of parameters",
                                      "items": {
                                        "required": [
                                          "value",
                                          "name"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Value to set the parameter to."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name to identify the parameter by in the system."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": {
                                "type": "array",
                                "items": {
                                  "required": [
                                    "value",
                                    "name"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "Value to set the parameter to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the parameter by in the system."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Full configuration": {
                  "value": {
                    "global": [
                      {
                        "type": "CONFIGURABLE_PARAMETERS",
                        "parameters": [
                          {
                            "value": "mean",
                            "name": "inter_task_reduce_fn"
                          },
                          {
                            "value": 500,
                            "name": "max_unseen_media"
                          }
                        ],
                        "entity_identifier": {
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "PROJECT_ACTIVE_LEARNING"
                        }
                      },
                      {
                        "type": "CONFIGURABLE_PARAMETERS",
                        "parameters": [
                          {
                            "value": true,
                            "name": "use_ndr"
                          }
                        ],
                        "entity_identifier": {
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "PIPELINE_DATASET_MANAGER"
                        }
                      }
                    ],
                    "task_chain": [
                      {
                        "components": [
                          {
                            "entity_identifier": {
                              "type": "HYPER_PARAMETER_GROUP",
                              "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "group_name": "learning_parameters"
                            },
                            "parameters": [
                              {
                                "value": 32,
                                "name": "batch_size"
                              },
                              {
                                "value": false,
                                "name": "enable_lr_finder"
                              },
                              {
                                "value": 0.007,
                                "name": "learning_rate"
                              },
                              {
                                "value": 200,
                                "name": "max_num_epochs"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "SUBSET_MANAGER"
                            },
                            "groups": [
                              {
                                "type": "PARAMETER_GROUP",
                                "name": "subset_parameters",
                                "parameters": [
                                  {
                                    "value": 0.3,
                                    "name": "test_proportion"
                                  },
                                  {
                                    "value": 0.5,
                                    "name": "train_proportion"
                                  },
                                  {
                                    "value": 0.2,
                                    "name": "validation_proportion"
                                  }
                                ]
                              }
                            ],
                            "parameters": [
                              {
                                "value": true,
                                "name": "auto_subset_fractions"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "DATASET_COUNTER"
                            },
                            "parameters": [
                              {
                                "value": true,
                                "name": "label_constraint_first_training"
                              },
                              {
                                "value": 6,
                                "name": "required_images_auto_training"
                              },
                              {
                                "value": true,
                                "name": "use_dynamic_required_annotations"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "TASK_ACTIVE_LEARNING"
                            },
                            "groups": [
                              {
                                "type": "PARAMETER_GROUP",
                                "name": "preprocessing",
                                "parameters": [
                                  {
                                    "value": true,
                                    "name": "feature_vector_extractor"
                                  },
                                  {
                                    "value": true,
                                    "name": "uncertainty_extractor"
                                  }
                                ]
                              }
                            ],
                            "parameters": [
                              {
                                "value": "mean",
                                "name": "intra_task_reduce_fn"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "TASK_NODE"
                            },
                            "parameters": [
                              {
                                "value": true,
                                "name": "auto_training"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "examples": {
                  "Succesfully updated response": {
                    "value": "success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Configuration cannot be saved to the server",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unable to save configuration": {
                    "value": {
                      "http_status": 500,
                      "message": "Unable to save configuration",
                      "error_code": "cannot_set_configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/global": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the current configuration for all components in the project.",
        "description": "This endpoint gets the configuration for all components in the project that are acting project-wide. The configuration is subdivided into components. Examples of configuration components are the active learning parameters or dataset management related parameters. Some components are further divided into parameter groups.",
        "operationId": "GetGlobalConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get global configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "global": {
                      "type": "array",
                      "description": "Array of configurable parameter objects for the different global (i.e. project-wide) components in the project",
                      "items": {
                        "type": "object",
                        "title": "Component parameters",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                            "enum": [
                              "CONFIGURABLE_PARAMETERS",
                              "PARAMETER_GROUP"
                            ]
                          },
                          "entity_identifier": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Component entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "project_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "task_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "component": {
                                    "type": "string",
                                    "description": "Describes the component to which the configurable parameters apply"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                    "enum": [
                                      "COMPONENT_PARAMETERS"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Model entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "model_storage_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                    "enum": [
                                      "HYPER_PARAMETERS"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Hyper parameter group entity identifier",
                                "properties": {
                                  "workspace_id": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      {
                                        "type": "string",
                                        "minLength": 36,
                                        "maxLength": 36,
                                        "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                        "description": "UUID of the object"
                                      }
                                    ]
                                  },
                                  "model_storage_id": {
                                    "type": "string",
                                    "minLength": 24,
                                    "maxLength": 24,
                                    "example": "60d31793d5f1fb7e6e3c1a4c",
                                    "description": "Mongo ID of the object"
                                  },
                                  "group_name": {
                                    "type": "string",
                                    "description": "Name of the hyper parameter group"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                    "enum": [
                                      "HYPER_PARAMETER_GROUP"
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "header": {
                            "type": "string",
                            "description": "Name of the configuration",
                            "example": "Subset splitting"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the configuration, indicating which part of the system it controls.",
                            "example": "These parameters control the splitting of the dataset into training, validation and test set."
                          },
                          "groups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "header": {
                                  "type": "string",
                                  "example": "Learning Parameters",
                                  "description": "Defines the parameter group"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of the parameter group",
                                  "example": "Configuration to control training behaviour"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "PARAMETER_GROUP"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the parameter group"
                                },
                                "parameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "title": "Configurable parameter",
                                    "properties": {
                                      "header": {
                                        "type": "string",
                                        "description": "User friendly title for the parameter."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "User friendly description for what the parameter does."
                                      },
                                      "warning": {
                                        "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                      },
                                      "value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "number"
                                          },
                                          {
                                            "type": "boolean"
                                          }
                                        ],
                                        "description": "Value that this parameter currently takes."
                                      },
                                      "default_value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "number"
                                          },
                                          {
                                            "type": "boolean"
                                          }
                                        ],
                                        "description": "Default value that should be set for this parameter."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name to identify the parameter by in the system."
                                      },
                                      "template_type": {
                                        "type": "string",
                                        "enum": [
                                          "selectable",
                                          "input"
                                        ],
                                        "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                      },
                                      "data_type": {
                                        "type": "string",
                                        "enum": [
                                          "float",
                                          "integer",
                                          "boolean",
                                          "string"
                                        ],
                                        "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                      },
                                      "options": {
                                        "type": "array",
                                        "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                        "items": {
                                          "oneOf": [
                                            {
                                              "type": "number"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ]
                                        }
                                      },
                                      "min_value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                      },
                                      "max_value": {
                                        "type": "number",
                                        "format": "float",
                                        "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                      },
                                      "ui_rules": {
                                        "type": "object",
                                        "description": "Not implemented at this moment"
                                      },
                                      "editable": {
                                        "type": "boolean",
                                        "description": "Not implemented at this moment."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "type": "array",
                            "description": "Array of configurable parameters",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "title": "Configurable boolean",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the configurable boolean."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the boolean does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "boolean",
                                      "description": "Value that this boolean currently takes."
                                    },
                                    "default_value": {
                                      "type": "boolean",
                                      "description": "Default value that should be set for this boolean."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable boolean by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "boolean"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Configurable float",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the float."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the float does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Value that this configurable float currently takes."
                                    },
                                    "default_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Default value that should be set for this float."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable float by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "float"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                    },
                                    "min_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "max_value": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Configurable integer",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the integer."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the integer does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "integer",
                                      "description": "Value that this configurable integer currently takes."
                                    },
                                    "default_value": {
                                      "type": "integer",
                                      "description": "Default value that should be set for this integer."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the configurable integer by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "input"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "integer"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                    },
                                    "min_value": {
                                      "type": "integer",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "max_value": {
                                      "type": "integer",
                                      "description": "Minimum value that can be set for this parameter."
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Selectable string",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the selectable string."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the selectable string parameter does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Value that this selectable string currently takes."
                                    },
                                    "default_value": {
                                      "type": "string",
                                      "description": "Default value that should be set for this selectable string."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the selectable string parameter by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "selectable"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "string"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                    },
                                    "options": {
                                      "type": "array",
                                      "description": "List of values that this selectable string can take.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Selectable float",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "description": "User friendly title for the selectable."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "User friendly description for what the selectable parameter does."
                                    },
                                    "warning": {
                                      "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Value that this selectable currently takes."
                                    },
                                    "default_value": {
                                      "type": "string",
                                      "description": "Default value that should be set for this selectable."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the selectable parameter by in the system."
                                    },
                                    "template_type": {
                                      "type": "string",
                                      "enum": [
                                        "selectable"
                                      ],
                                      "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                    },
                                    "data_type": {
                                      "type": "string",
                                      "enum": [
                                        "float"
                                      ],
                                      "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                    },
                                    "options": {
                                      "type": "array",
                                      "description": "List of values that this float selectable can take.",
                                      "items": {
                                        "type": "number",
                                        "format": "float"
                                      }
                                    },
                                    "ui_rules": {
                                      "type": "object",
                                      "description": "Not implemented at this moment"
                                    },
                                    "editable": {
                                      "type": "boolean",
                                      "description": "Not implemented at this moment."
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Global configuration": {
                    "value": {
                      "global": [
                        {
                          "description": "Specify the project-level configuration for active learning.",
                          "entity_identifier": {
                            "component": "PROJECT_ACTIVE_LEARNING",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Active Learning",
                          "id": "62b2d940f54b4b5f9e4dcb36",
                          "parameters": [
                            {
                              "data_type": "string",
                              "default_value": "mean",
                              "description": "Function to aggregate the active scores of a media across the tasks",
                              "editable": true,
                              "enum_name": "ActiveScoreReductionFunction",
                              "header": "Inter-task scores reduction function",
                              "name": "inter_task_reduce_fn",
                              "options": [
                                "min",
                                "mean",
                                "max"
                              ],
                              "template_type": "selectable",
                              "ui_rules": {},
                              "value": "mean",
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 500,
                              "description": "Number of images analysed after training for active learning",
                              "editable": true,
                              "header": "Number of images analysed after training for active learning",
                              "max_value": 10000,
                              "min_value": 10,
                              "name": "max_unseen_media",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 500,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        },
                        {
                          "description": "Specify parameters to control how datasets are managed in the system.",
                          "entity_identifier": {
                            "component": "PIPELINE_DATASET_MANAGER",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Dataset management",
                          "id": "62b2d940f54b4b5f9e4dcb39",
                          "parameters": [
                            {
                              "data_type": "boolean",
                              "default_value": false,
                              "description": "Enabling NDR will help to prevent annotating very similar images. Note that this does not remove any data from the project,it is only used in selecting images for active learning.",
                              "editable": true,
                              "header": "Use Near Duplicate Removal (NDR) for active learning",
                              "name": "use_ndr",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": false,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Set the configuration for all components in the project.",
        "description": "This endpoint sets the configuration for all components in the project that are acting globally, i.e. project-wide. The configuration is subdivided into components, and every component is divided into parameter groups.",
        "operationId": "SetGlobalConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "global"
                ],
                "properties": {
                  "global": {
                    "type": "array",
                    "description": "Array of configurable parameter objects for the different global (i.e. project-wide) components in the project",
                    "items": {
                      "required": [
                        "entity_identifier"
                      ],
                      "type": "object",
                      "title": "Component parameters",
                      "description": "The new values for the component parameters to set",
                      "properties": {
                        "entity_identifier": {
                          "required": [
                            "type",
                            "component"
                          ],
                          "type": "object",
                          "title": "Component entity identifier",
                          "properties": {
                            "workspace_id": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                {
                                  "type": "string",
                                  "minLength": 36,
                                  "maxLength": 36,
                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                  "description": "UUID of the object"
                                }
                              ]
                            },
                            "project_id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the object"
                            },
                            "task_id": {
                              "type": "string",
                              "minLength": 0,
                              "maxLength": 24,
                              "example": "60d31793d5f1fb7e6e3c1a4c",
                              "description": "Mongo ID of the task"
                            },
                            "component": {
                              "type": "string",
                              "description": "If the configuration is a component configuration, describes the component.",
                              "enum": [
                                "NULL_COMPONENT",
                                "SUBSET_MANAGER",
                                "DATASET_COUNTER",
                                "PROJECT_ACTIVE_LEARNING",
                                "TASK_ACTIVE_LEARNING",
                                "TASK_NODE",
                                "PIPELINE_DATASET_MANAGER"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                              "enum": [
                                "COMPONENT_PARAMETERS"
                              ]
                            }
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "required": [
                              "parameters",
                              "name"
                            ],
                            "type": "object",
                            "title": "Parameter group",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the parameter group"
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of parameters",
                                "items": {
                                  "required": [
                                    "value",
                                    "name"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "Value to set the parameter to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the parameter by in the system."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "parameters": {
                          "type": "array",
                          "items": {
                            "required": [
                              "value",
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ],
                                "description": "Value to set the parameter to."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name to identify the parameter by in the system."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Global configuration": {
                  "value": {
                    "global": [
                      {
                        "type": "CONFIGURABLE_PARAMETERS",
                        "parameters": [
                          {
                            "value": "mean",
                            "name": "inter_task_reduce_fn"
                          },
                          {
                            "value": 500,
                            "name": "max_unseen_media"
                          }
                        ],
                        "entity_identifier": {
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "PROJECT_ACTIVE_LEARNING"
                        }
                      },
                      {
                        "type": "CONFIGURABLE_PARAMETERS",
                        "parameters": [
                          {
                            "value": true,
                            "name": "use_ndr"
                          }
                        ],
                        "entity_identifier": {
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "PIPELINE_DATASET_MANAGER"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "examples": {
                  "Succesfully updated response": {
                    "value": "success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Configuration cannot be saved to the server",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unable to save configuration": {
                    "value": {
                      "http_status": 500,
                      "message": "Unable to save configuration",
                      "error_code": "cannot_set_configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/task_chain": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the current configuration for all tasks in the project's task chain.",
        "description": "This endpoint pulls the configuration for all tasks in the project. For every task in the project, the configuration is subdivided into components. Examples of configuration components are the deep learning parameters, postprocessing parameters or subset-related parameters. Some components are further divided into parameter groups.",
        "operationId": "GetTaskChainConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_chain": {
                      "type": "array",
                      "description": "Array of task configurations",
                      "items": {
                        "type": "object",
                        "properties": {
                          "components": {
                            "type": "array",
                            "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "title": "Hyper parameter group",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the hyper parameter group"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 26,
                                      "maxLength": 27,
                                      "example": "60d31793d5f1fb7e6e3c1a4c-1",
                                      "description": "ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group."
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "The name of the hyper parameter group",
                                      "example": "Learning parameters"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the hyper parameter group.",
                                      "example": "A set of parameters that control the training process."
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Component parameters",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "Name of the configuration",
                                      "example": "Subset splitting"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the configuration, indicating which part of the system it controls.",
                                      "example": "These parameters control the splitting of the dataset into training, validation and test set."
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Hyper parameters",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    "entity_identifier": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Component entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "project_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "task_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "component": {
                                              "type": "string",
                                              "description": "Describes the component to which the configurable parameters apply"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                              "enum": [
                                                "COMPONENT_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Model entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                              "enum": [
                                                "HYPER_PARAMETERS"
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "title": "Hyper parameter group entity identifier",
                                          "properties": {
                                            "workspace_id": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "minLength": 24,
                                                  "maxLength": 24,
                                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                                  "description": "Mongo ID of the object"
                                                },
                                                {
                                                  "type": "string",
                                                  "minLength": 36,
                                                  "maxLength": 36,
                                                  "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                                  "description": "UUID of the object"
                                                }
                                              ]
                                            },
                                            "model_storage_id": {
                                              "type": "string",
                                              "minLength": 24,
                                              "maxLength": 24,
                                              "example": "60d31793d5f1fb7e6e3c1a4c",
                                              "description": "Mongo ID of the object"
                                            },
                                            "group_name": {
                                              "type": "string",
                                              "description": "Name of the hyper parameter group"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                              "enum": [
                                                "HYPER_PARAMETER_GROUP"
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                      "enum": [
                                        "CONFIGURABLE_PARAMETERS",
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "header": {
                                      "type": "string",
                                      "description": "The name of the configuration",
                                      "example": "Hyper parameters for a segmentation task"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of model to which this configuration belongs",
                                      "example": "Hyper parameters for a segmentation task"
                                    },
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "example": "Learning Parameters",
                                            "description": "Defines the parameter group"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "Description of the parameter group",
                                            "example": "Configuration to control training behaviour"
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "PARAMETER_GROUP"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the parameter group"
                                          },
                                          "parameters": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "title": "Configurable parameter",
                                              "properties": {
                                                "header": {
                                                  "type": "string",
                                                  "description": "User friendly title for the parameter."
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "User friendly description for what the parameter does."
                                                },
                                                "warning": {
                                                  "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                                },
                                                "value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Value that this parameter currently takes."
                                                },
                                                "default_value": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ],
                                                  "description": "Default value that should be set for this parameter."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name to identify the parameter by in the system."
                                                },
                                                "template_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "selectable",
                                                    "input"
                                                  ],
                                                  "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                                },
                                                "data_type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "float",
                                                    "integer",
                                                    "boolean",
                                                    "string"
                                                  ],
                                                  "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "min_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "max_value": {
                                                  "type": "number",
                                                  "format": "float",
                                                  "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                                },
                                                "ui_rules": {
                                                  "type": "object",
                                                  "description": "Not implemented at this moment"
                                                },
                                                "editable": {
                                                  "type": "boolean",
                                                  "description": "Not implemented at this moment."
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of configurable parameters",
                                      "items": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "title": "Configurable boolean",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the configurable boolean."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the boolean does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "boolean",
                                                "description": "Value that this boolean currently takes."
                                              },
                                              "default_value": {
                                                "type": "boolean",
                                                "description": "Default value that should be set for this boolean."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable boolean by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "boolean"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the float."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the float does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Value that this configurable float currently takes."
                                              },
                                              "default_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Default value that should be set for this float."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable float by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                              },
                                              "min_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Configurable integer",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the integer."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the integer does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "integer",
                                                "description": "Value that this configurable integer currently takes."
                                              },
                                              "default_value": {
                                                "type": "integer",
                                                "description": "Default value that should be set for this integer."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the configurable integer by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "input"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "integer"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                              },
                                              "min_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "max_value": {
                                                "type": "integer",
                                                "description": "Minimum value that can be set for this parameter."
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable string",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable string."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable string parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable string currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable string."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable string parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this selectable string can take.",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "title": "Selectable float",
                                            "properties": {
                                              "header": {
                                                "type": "string",
                                                "description": "User friendly title for the selectable."
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "User friendly description for what the selectable parameter does."
                                              },
                                              "warning": {
                                                "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value that this selectable currently takes."
                                              },
                                              "default_value": {
                                                "type": "string",
                                                "description": "Default value that should be set for this selectable."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name to identify the selectable parameter by in the system."
                                              },
                                              "template_type": {
                                                "type": "string",
                                                "enum": [
                                                  "selectable"
                                                ],
                                                "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                              },
                                              "data_type": {
                                                "type": "string",
                                                "enum": [
                                                  "float"
                                                ],
                                                "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "List of values that this float selectable can take.",
                                                "items": {
                                                  "type": "number",
                                                  "format": "float"
                                                }
                                              },
                                              "ui_rules": {
                                                "type": "object",
                                                "description": "Not implemented at this moment"
                                              },
                                              "editable": {
                                                "type": "boolean",
                                                "description": "Not implemented at this moment."
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "task_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "task_title": {
                            "type": "string",
                            "description": "Title of the task the configuration is connected to"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Task chain configuration": {
                    "value": {
                      "task_chain": [
                        {
                          "components": [
                            {
                              "description": "Learning Parameters",
                              "entity_identifier": {
                                "group_name": "learning_parameters",
                                "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                                "type": "HYPER_PARAMETER_GROUP",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "Learning Parameters",
                              "id": "62b2d9478fd8d1af66e5af12-0",
                              "name": "learning_parameters",
                              "parameters": [
                                {
                                  "data_type": "integer",
                                  "default_value": 32,
                                  "description": "The number of training samples seen in each iteration of training. Increasing this value improves training time and may make the training more stable. A larger batch size has higher memory requirements.",
                                  "editable": true,
                                  "header": "Batch size",
                                  "max_value": 512,
                                  "min_value": 1,
                                  "name": "batch_size",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 32,
                                  "warning": "Increasing this value may cause the system to use more memory than available, potentially causing out of memory errors, please update with caution."
                                },
                                {
                                  "data_type": "boolean",
                                  "default_value": false,
                                  "description": "Learning rate parameter value will be ignored if enabled.",
                                  "editable": true,
                                  "header": "Enable automatic learing rate estimation",
                                  "name": "enable_lr_finder",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": false,
                                  "warning": null
                                },
                                {
                                  "data_type": "float",
                                  "default_value": 0.007,
                                  "description": "Increasing this value will speed up training convergence but might make it unstable.",
                                  "editable": true,
                                  "header": "Learning rate",
                                  "max_value": 0.1,
                                  "min_value": 1e-7,
                                  "name": "learning_rate",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 0.007,
                                  "warning": null
                                },
                                {
                                  "data_type": "integer",
                                  "default_value": 200,
                                  "description": "Increasing this value causes the results to be more robust but training time will be longer.",
                                  "editable": true,
                                  "header": "Maximum number of training epochs",
                                  "max_value": 1000,
                                  "min_value": 1,
                                  "name": "max_num_epochs",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 200,
                                  "warning": null
                                }
                              ],
                              "type": "PARAMETER_GROUP"
                            },
                            {
                              "description": "Specify the distribution of annotated samples over the training, validation and test sets.",
                              "entity_identifier": {
                                "component": "SUBSET_MANAGER",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "groups": [
                                {
                                  "description": "Specify the distributions of annotated samples over training, validation and test set.",
                                  "header": "Subset distribution",
                                  "name": "subset_parameters",
                                  "parameters": [
                                    {
                                      "data_type": "float",
                                      "default_value": 0.3,
                                      "description": "Fraction of annotated data that will be assigned to the test set",
                                      "editable": true,
                                      "header": "Test set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "test_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.3,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "float",
                                      "default_value": 0.5,
                                      "description": "Fraction of annotated data that will be assigned to the training set",
                                      "editable": true,
                                      "header": "Training set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "train_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.5,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "float",
                                      "default_value": 0.2,
                                      "description": "Fraction of annotated data that will be assigned to the validation set",
                                      "editable": true,
                                      "header": "Validation set proportion",
                                      "max_value": 1,
                                      "min_value": 0.1,
                                      "name": "validation_proportion",
                                      "template_type": "input",
                                      "ui_rules": {
                                        "action": "SHOW",
                                        "operator": "AND",
                                        "rules": [
                                          {
                                            "operator": "EQUAL_TO",
                                            "parameter": [
                                              "auto_subset_fractions"
                                            ],
                                            "type": "RULE",
                                            "value": false
                                          }
                                        ],
                                        "type": "UI_RULES"
                                      },
                                      "value": 0.2,
                                      "warning": null
                                    }
                                  ],
                                  "type": "PARAMETER_GROUP"
                                }
                              ],
                              "header": "Subset splitting",
                              "id": "62b2d940f54b4b5f9e4dcb34",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "If this setting is enabled, the system will automatically determine the most optimal distribution of the annotated samples over training, validation and test set. Disable this setting to manually specify the proportions.",
                                  "editable": true,
                                  "header": "Automatically determine subset proportions",
                                  "name": "auto_subset_fractions",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "Specify the number of required annotations for a task",
                              "entity_identifier": {
                                "component": "DATASET_COUNTER",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "Annotation requirements",
                              "id": "62b2d940f54b4b5f9e4dcb35",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "If this is ON, the first training will only be triggered when each label is present in N images, while N is number of required images for the first training. Otherwise, first training will be triggered when N images have been annotated. If first training has been triggered, this parameter will not take effect.",
                                  "editable": true,
                                  "header": "Label constraint for the first training",
                                  "name": "label_constraint_first_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                },
                                {
                                  "data_type": "integer",
                                  "default_value": 6,
                                  "description": "The minimum number of new annotations required before auto-train is triggered. Auto-training will start every time that this number of annotations is created.",
                                  "editable": true,
                                  "header": "Number of images required for auto-training",
                                  "max_value": 10000,
                                  "min_value": 3,
                                  "name": "required_images_auto_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": 6,
                                  "warning": null
                                },
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "Only applicable if auto-training is on. Set this parameter on to let the system dynamically compute the number of required annotations between training rounds based on model performance and training dataset size.",
                                  "editable": true,
                                  "header": "Dynamic required annotations",
                                  "name": "use_dynamic_required_annotations",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": false,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "Specify the task-level configuration for active learning.",
                              "entity_identifier": {
                                "component": "TASK_ACTIVE_LEARNING",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "groups": [
                                {
                                  "description": "Score extractors",
                                  "header": "Score extractors",
                                  "name": "preprocessing",
                                  "parameters": [
                                    {
                                      "data_type": "boolean",
                                      "default_value": true,
                                      "description": "The feature vector score extractor outputs scores which reflect the distances between the known and unknown samples in the latent space.",
                                      "editable": true,
                                      "header": "Enable feature vector score extractor",
                                      "name": "feature_vector_extractor",
                                      "template_type": "input",
                                      "ui_rules": {},
                                      "value": true,
                                      "warning": null
                                    },
                                    {
                                      "data_type": "boolean",
                                      "default_value": true,
                                      "description": "The uncertainty score extractor outputs scores which reflect the uncertainty of the predictions on the respective media",
                                      "editable": true,
                                      "header": "Enable uncertainty score extractor",
                                      "name": "uncertainty_extractor",
                                      "template_type": "input",
                                      "ui_rules": {},
                                      "value": true,
                                      "warning": null
                                    }
                                  ],
                                  "type": "PARAMETER_GROUP"
                                }
                              ],
                              "header": "Active Learning",
                              "id": "62b2d940f54b4b5f9e4dcb37",
                              "parameters": [
                                {
                                  "data_type": "string",
                                  "default_value": "mean",
                                  "description": "Function to aggregate the active scores of a media within a task",
                                  "editable": true,
                                  "enum_name": "ActiveScoreReductionFunction",
                                  "header": "Intra-task scores reduction function",
                                  "name": "intra_task_reduce_fn",
                                  "options": [
                                    "min",
                                    "mean",
                                    "max"
                                  ],
                                  "template_type": "selectable",
                                  "ui_rules": {},
                                  "value": "mean",
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            },
                            {
                              "description": "General settings for a task.",
                              "entity_identifier": {
                                "component": "TASK_NODE",
                                "project_id": "62b2d9408fd8d1af66e5af07",
                                "task_id": "62b2d9408fd8d1af66e5af06",
                                "type": "COMPONENT_PARAMETERS",
                                "workspace_id": "62a9d380e287f1fcd1eed0ab"
                              },
                              "header": "General",
                              "id": "62b2d940f54b4b5f9e4dcb38",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "Enable to allow the task to start training automatically when it is ready to train.",
                                  "editable": true,
                                  "header": "Auto-training",
                                  "name": "auto_training",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                }
                              ],
                              "type": "CONFIGURABLE_PARAMETERS"
                            }
                          ],
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "task_title": "Classification task"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Set the configuration for all tasks in the projects' task chain.",
        "description": "This endpoint sets the configuration for the entire task chain. For every task in the chain, the configuration is subdivided into components, and every component is divided into parameter groups.",
        "operationId": "SetTaskChainConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "task_chain"
                ],
                "properties": {
                  "task_chain": {
                    "type": "array",
                    "description": "Array of task configurations",
                    "items": {
                      "required": [
                        "components"
                      ],
                      "type": "object",
                      "properties": {
                        "components": {
                          "type": "array",
                          "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                          "items": {
                            "required": [
                              "entity_identifier"
                            ],
                            "type": "object",
                            "title": "Configurable parameters object",
                            "description": "The new values for the component parameters, hyper parameters or hyper parameter group to set",
                            "properties": {
                              "entity_identifier": {
                                "oneOf": [
                                  {
                                    "required": [
                                      "type",
                                      "component"
                                    ],
                                    "type": "object",
                                    "title": "Component entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "project_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 0,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the task"
                                      },
                                      "component": {
                                        "type": "string",
                                        "description": "If the configuration is a component configuration, describes the component.",
                                        "enum": [
                                          "NULL_COMPONENT",
                                          "SUBSET_MANAGER",
                                          "DATASET_COUNTER",
                                          "PROJECT_ACTIVE_LEARNING",
                                          "TASK_ACTIVE_LEARNING",
                                          "TASK_NODE",
                                          "PIPELINE_DATASET_MANAGER"
                                        ]
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                        "enum": [
                                          "COMPONENT_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "type",
                                      "model_storage_id"
                                    ],
                                    "type": "object",
                                    "title": "Model entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                        "enum": [
                                          "HYPER_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "type",
                                      "model_storage_id",
                                      "group_name"
                                    ],
                                    "type": "object",
                                    "title": "Hyper parameter group entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "group_name": {
                                        "type": "string",
                                        "description": "The name of the hyper parameter group"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                        "enum": [
                                          "HYPER_PARAMETER_GROUP"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "groups": {
                                "type": "array",
                                "items": {
                                  "required": [
                                    "parameters",
                                    "name"
                                  ],
                                  "type": "object",
                                  "title": "Parameter group",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the parameter group"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "description": "Array of parameters",
                                      "items": {
                                        "required": [
                                          "value",
                                          "name"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Value to set the parameter to."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name to identify the parameter by in the system."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": {
                                "type": "array",
                                "items": {
                                  "required": [
                                    "value",
                                    "name"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "Value to set the parameter to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the parameter by in the system."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Task configuration": {
                  "value": {
                    "task_chain": [
                      {
                        "components": [
                          {
                            "entity_identifier": {
                              "type": "HYPER_PARAMETER_GROUP",
                              "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "group_name": "learning_parameters"
                            },
                            "parameters": [
                              {
                                "value": 32,
                                "name": "batch_size"
                              },
                              {
                                "value": false,
                                "name": "enable_lr_finder"
                              },
                              {
                                "value": 0.007,
                                "name": "learning_rate"
                              },
                              {
                                "value": 200,
                                "name": "max_num_epochs"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "SUBSET_MANAGER"
                            },
                            "groups": [
                              {
                                "type": "PARAMETER_GROUP",
                                "name": "subset_parameters",
                                "parameters": [
                                  {
                                    "value": 0.3,
                                    "name": "test_proportion"
                                  },
                                  {
                                    "value": 0.5,
                                    "name": "train_proportion"
                                  },
                                  {
                                    "value": 0.2,
                                    "name": "validation_proportion"
                                  }
                                ]
                              }
                            ],
                            "parameters": [
                              {
                                "value": true,
                                "name": "auto_subset_fractions"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "DATASET_COUNTER"
                            },
                            "parameters": [
                              {
                                "value": true,
                                "name": "label_constraint_first_training"
                              },
                              {
                                "value": 6,
                                "name": "required_images_auto_training"
                              },
                              {
                                "value": true,
                                "name": "use_dynamic_required_annotations"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "TASK_ACTIVE_LEARNING"
                            },
                            "groups": [
                              {
                                "type": "PARAMETER_GROUP",
                                "name": "preprocessing",
                                "parameters": [
                                  {
                                    "value": true,
                                    "name": "feature_vector_extractor"
                                  },
                                  {
                                    "value": true,
                                    "name": "uncertainty_extractor"
                                  }
                                ]
                              }
                            ],
                            "parameters": [
                              {
                                "value": "mean",
                                "name": "intra_task_reduce_fn"
                              }
                            ]
                          },
                          {
                            "entity_identifier": {
                              "task_id": "62b2d9408fd8d1af66e5af06",
                              "type": "COMPONENT_PARAMETERS",
                              "project_id": "62b2d9408fd8d1af66e5af07",
                              "workspace_id": "62a9d380e287f1fcd1eed0ab",
                              "component": "TASK_NODE"
                            },
                            "parameters": [
                              {
                                "value": true,
                                "name": "auto_training"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "examples": {
                  "Succesfully updated response": {
                    "value": "success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Configuration cannot be saved to the server",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unable to save configuration": {
                    "value": {
                      "http_status": 500,
                      "message": "Unable to save configuration",
                      "error_code": "cannot_set_configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/task_chain/{task_id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the current configuration for a specific task",
        "description": "This endpoint pulls the configuration for a specific task. The configuration is subdivided into components, and every component is divided into parameter groups. This endpoint can also be used to pull the configurable parameters related to a single model or an algorithm, from a trainable task.",
        "operationId": "GetTaskConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "task_id",
            "style": "simple",
            "description": "The ID of the task of interest.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "model_id",
            "description": "The ID of the model of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          },
          {
            "in": "query",
            "name": "algorithm_name",
            "description": "The name of the algorithm for which we want to pull the configurable parameters",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "components": {
                      "type": "array",
                      "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "title": "Hyper parameter group",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the hyper parameter group"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 26,
                                "maxLength": 27,
                                "example": "60d31793d5f1fb7e6e3c1a4c-1",
                                "description": "ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group."
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.",
                                "enum": [
                                  "CONFIGURABLE_PARAMETERS",
                                  "PARAMETER_GROUP"
                                ]
                              },
                              "entity_identifier": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "title": "Component entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "project_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "component": {
                                        "type": "string",
                                        "description": "Describes the component to which the configurable parameters apply"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                        "enum": [
                                          "COMPONENT_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Model entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                        "enum": [
                                          "HYPER_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Hyper parameter group entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "group_name": {
                                        "type": "string",
                                        "description": "Name of the hyper parameter group"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                        "enum": [
                                          "HYPER_PARAMETER_GROUP"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "header": {
                                "type": "string",
                                "description": "The name of the hyper parameter group",
                                "example": "Learning parameters"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the hyper parameter group.",
                                "example": "A set of parameters that control the training process."
                              },
                              "groups": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "example": "Learning Parameters",
                                      "description": "Defines the parameter group"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the parameter group",
                                      "example": "Configuration to control training behaviour"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the parameter group"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "title": "Configurable parameter",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "description": "User friendly title for the parameter."
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "User friendly description for what the parameter does."
                                          },
                                          "warning": {
                                            "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                          },
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Value that this parameter currently takes."
                                          },
                                          "default_value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Default value that should be set for this parameter."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name to identify the parameter by in the system."
                                          },
                                          "template_type": {
                                            "type": "string",
                                            "enum": [
                                              "selectable",
                                              "input"
                                            ],
                                            "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                          },
                                          "data_type": {
                                            "type": "string",
                                            "enum": [
                                              "float",
                                              "integer",
                                              "boolean",
                                              "string"
                                            ],
                                            "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                          },
                                          "options": {
                                            "type": "array",
                                            "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "type": "number"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            }
                                          },
                                          "min_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "max_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "ui_rules": {
                                            "type": "object",
                                            "description": "Not implemented at this moment"
                                          },
                                          "editable": {
                                            "type": "boolean",
                                            "description": "Not implemented at this moment."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of configurable parameters",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "Configurable boolean",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the configurable boolean."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the boolean does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "boolean",
                                          "description": "Value that this boolean currently takes."
                                        },
                                        "default_value": {
                                          "type": "boolean",
                                          "description": "Default value that should be set for this boolean."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable boolean by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "boolean"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the float."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the float does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Value that this configurable float currently takes."
                                        },
                                        "default_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Default value that should be set for this float."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable float by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                        },
                                        "min_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable integer",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the integer."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the integer does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "integer",
                                          "description": "Value that this configurable integer currently takes."
                                        },
                                        "default_value": {
                                          "type": "integer",
                                          "description": "Default value that should be set for this integer."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable integer by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "integer"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                        },
                                        "min_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable string",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable string."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable string parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable string currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable string."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable string parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this selectable string can take.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this float selectable can take.",
                                          "items": {
                                            "type": "number",
                                            "format": "float"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "title": "Component parameters",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                "enum": [
                                  "CONFIGURABLE_PARAMETERS",
                                  "PARAMETER_GROUP"
                                ]
                              },
                              "entity_identifier": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "title": "Component entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "project_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "component": {
                                        "type": "string",
                                        "description": "Describes the component to which the configurable parameters apply"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                        "enum": [
                                          "COMPONENT_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Model entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                        "enum": [
                                          "HYPER_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Hyper parameter group entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "group_name": {
                                        "type": "string",
                                        "description": "Name of the hyper parameter group"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                        "enum": [
                                          "HYPER_PARAMETER_GROUP"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "header": {
                                "type": "string",
                                "description": "Name of the configuration",
                                "example": "Subset splitting"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the configuration, indicating which part of the system it controls.",
                                "example": "These parameters control the splitting of the dataset into training, validation and test set."
                              },
                              "groups": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "example": "Learning Parameters",
                                      "description": "Defines the parameter group"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the parameter group",
                                      "example": "Configuration to control training behaviour"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the parameter group"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "title": "Configurable parameter",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "description": "User friendly title for the parameter."
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "User friendly description for what the parameter does."
                                          },
                                          "warning": {
                                            "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                          },
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Value that this parameter currently takes."
                                          },
                                          "default_value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Default value that should be set for this parameter."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name to identify the parameter by in the system."
                                          },
                                          "template_type": {
                                            "type": "string",
                                            "enum": [
                                              "selectable",
                                              "input"
                                            ],
                                            "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                          },
                                          "data_type": {
                                            "type": "string",
                                            "enum": [
                                              "float",
                                              "integer",
                                              "boolean",
                                              "string"
                                            ],
                                            "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                          },
                                          "options": {
                                            "type": "array",
                                            "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "type": "number"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            }
                                          },
                                          "min_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "max_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "ui_rules": {
                                            "type": "object",
                                            "description": "Not implemented at this moment"
                                          },
                                          "editable": {
                                            "type": "boolean",
                                            "description": "Not implemented at this moment."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of configurable parameters",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "Configurable boolean",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the configurable boolean."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the boolean does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "boolean",
                                          "description": "Value that this boolean currently takes."
                                        },
                                        "default_value": {
                                          "type": "boolean",
                                          "description": "Default value that should be set for this boolean."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable boolean by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "boolean"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the float."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the float does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Value that this configurable float currently takes."
                                        },
                                        "default_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Default value that should be set for this float."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable float by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                        },
                                        "min_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable integer",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the integer."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the integer does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "integer",
                                          "description": "Value that this configurable integer currently takes."
                                        },
                                        "default_value": {
                                          "type": "integer",
                                          "description": "Default value that should be set for this integer."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable integer by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "integer"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                        },
                                        "min_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable string",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable string."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable string parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable string currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable string."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable string parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this selectable string can take.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this float selectable can take.",
                                          "items": {
                                            "type": "number",
                                            "format": "float"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "title": "Hyper parameters",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24,
                                "example": "60d31793d5f1fb7e6e3c1a4c",
                                "description": "Mongo ID of the object"
                              },
                              "entity_identifier": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "title": "Component entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "project_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "task_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "component": {
                                        "type": "string",
                                        "description": "Describes the component to which the configurable parameters apply"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                        "enum": [
                                          "COMPONENT_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Model entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                        "enum": [
                                          "HYPER_PARAMETERS"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "title": "Hyper parameter group entity identifier",
                                    "properties": {
                                      "workspace_id": {
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "minLength": 24,
                                            "maxLength": 24,
                                            "example": "60d31793d5f1fb7e6e3c1a4c",
                                            "description": "Mongo ID of the object"
                                          },
                                          {
                                            "type": "string",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                            "description": "UUID of the object"
                                          }
                                        ]
                                      },
                                      "model_storage_id": {
                                        "type": "string",
                                        "minLength": 24,
                                        "maxLength": 24,
                                        "example": "60d31793d5f1fb7e6e3c1a4c",
                                        "description": "Mongo ID of the object"
                                      },
                                      "group_name": {
                                        "type": "string",
                                        "description": "Name of the hyper parameter group"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                        "enum": [
                                          "HYPER_PARAMETER_GROUP"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.",
                                "enum": [
                                  "CONFIGURABLE_PARAMETERS",
                                  "PARAMETER_GROUP"
                                ]
                              },
                              "header": {
                                "type": "string",
                                "description": "The name of the configuration",
                                "example": "Hyper parameters for a segmentation task"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of model to which this configuration belongs",
                                "example": "Hyper parameters for a segmentation task"
                              },
                              "groups": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "string",
                                      "example": "Learning Parameters",
                                      "description": "Defines the parameter group"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the parameter group",
                                      "example": "Configuration to control training behaviour"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "PARAMETER_GROUP"
                                      ]
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the parameter group"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "title": "Configurable parameter",
                                        "properties": {
                                          "header": {
                                            "type": "string",
                                            "description": "User friendly title for the parameter."
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "User friendly description for what the parameter does."
                                          },
                                          "warning": {
                                            "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                          },
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Value that this parameter currently takes."
                                          },
                                          "default_value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ],
                                            "description": "Default value that should be set for this parameter."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Name to identify the parameter by in the system."
                                          },
                                          "template_type": {
                                            "type": "string",
                                            "enum": [
                                              "selectable",
                                              "input"
                                            ],
                                            "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range."
                                          },
                                          "data_type": {
                                            "type": "string",
                                            "enum": [
                                              "float",
                                              "integer",
                                              "boolean",
                                              "string"
                                            ],
                                            "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string."
                                          },
                                          "options": {
                                            "type": "array",
                                            "description": "List of values that this parameter can take. Only used for selectable string and selectable float parameters",
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "type": "number"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            }
                                          },
                                          "min_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "max_value": {
                                            "type": "number",
                                            "format": "float",
                                            "description": "Minimum value that can be set for this parameter. Only used for numeric parameters."
                                          },
                                          "ui_rules": {
                                            "type": "object",
                                            "description": "Not implemented at this moment"
                                          },
                                          "editable": {
                                            "type": "boolean",
                                            "description": "Not implemented at this moment."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of configurable parameters",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "Configurable boolean",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the configurable boolean."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the boolean does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "boolean",
                                          "description": "Value that this boolean currently takes."
                                        },
                                        "default_value": {
                                          "type": "boolean",
                                          "description": "Default value that should be set for this boolean."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable boolean by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "boolean"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the float."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the float does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Value that this configurable float currently takes."
                                        },
                                        "default_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Default value that should be set for this float."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable float by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float."
                                        },
                                        "min_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "number",
                                          "format": "float",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Configurable integer",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the integer."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the integer does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "integer",
                                          "description": "Value that this configurable integer currently takes."
                                        },
                                        "default_value": {
                                          "type": "integer",
                                          "description": "Default value that should be set for this integer."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the configurable integer by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "integer"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer."
                                        },
                                        "min_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "max_value": {
                                          "type": "integer",
                                          "description": "Minimum value that can be set for this parameter."
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable string",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable string."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable string parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable string currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable string."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable string parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this selectable string can take.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Selectable float",
                                      "properties": {
                                        "header": {
                                          "type": "string",
                                          "description": "User friendly title for the selectable."
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "User friendly description for what the selectable parameter does."
                                        },
                                        "warning": {
                                          "description": "Warning message (if any) that explains the user to use caution when changing this parameter, and why."
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "Value that this selectable currently takes."
                                        },
                                        "default_value": {
                                          "type": "string",
                                          "description": "Default value that should be set for this selectable."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name to identify the selectable parameter by in the system."
                                        },
                                        "template_type": {
                                          "type": "string",
                                          "enum": [
                                            "selectable"
                                          ],
                                          "description": "Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter."
                                        },
                                        "data_type": {
                                          "type": "string",
                                          "enum": [
                                            "float"
                                          ],
                                          "description": "Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float."
                                        },
                                        "options": {
                                          "type": "array",
                                          "description": "List of values that this float selectable can take.",
                                          "items": {
                                            "type": "number",
                                            "format": "float"
                                          }
                                        },
                                        "ui_rules": {
                                          "type": "object",
                                          "description": "Not implemented at this moment"
                                        },
                                        "editable": {
                                          "type": "boolean",
                                          "description": "Not implemented at this moment."
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "task_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "task_title": {
                      "type": "string",
                      "description": "Title of the task the configuration is connected to"
                    }
                  }
                },
                "examples": {
                  "Task configuration": {
                    "value": {
                      "components": [
                        {
                          "description": "Learning Parameters",
                          "entity_identifier": {
                            "group_name": "learning_parameters",
                            "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Learning Parameters",
                          "id": "62b2d9478fd8d1af66e5af12-0",
                          "name": "learning_parameters",
                          "parameters": [
                            {
                              "data_type": "integer",
                              "default_value": 32,
                              "description": "The number of training samples seen in each iteration of training. Increasing this value improves training time and may make the training more stable. A larger batch size has higher memory requirements.",
                              "editable": true,
                              "header": "Batch size",
                              "max_value": 512,
                              "min_value": 1,
                              "name": "batch_size",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 32,
                              "warning": "Increasing this value may cause the system to use more memory than available, potentially causing out of memory errors, please update with caution."
                            },
                            {
                              "data_type": "boolean",
                              "default_value": false,
                              "description": "Learning rate parameter value will be ignored if enabled.",
                              "editable": true,
                              "header": "Enable automatic learing rate estimation",
                              "name": "enable_lr_finder",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": false,
                              "warning": null
                            },
                            {
                              "data_type": "float",
                              "default_value": 0.007,
                              "description": "Increasing this value will speed up training convergence but might make it unstable.",
                              "editable": true,
                              "header": "Learning rate",
                              "max_value": 0.1,
                              "min_value": 1e-7,
                              "name": "learning_rate",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 0.007,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 200,
                              "description": "Increasing this value causes the results to be more robust but training time will be longer.",
                              "editable": true,
                              "header": "Maximum number of training epochs",
                              "max_value": 1000,
                              "min_value": 1,
                              "name": "max_num_epochs",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 200,
                              "warning": null
                            }
                          ],
                          "type": "PARAMETER_GROUP"
                        },
                        {
                          "description": "Specify the distribution of annotated samples over the training, validation and test sets.",
                          "entity_identifier": {
                            "component": "SUBSET_MANAGER",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "task_id": "62b2d9408fd8d1af66e5af06",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "groups": [
                            {
                              "description": "Specify the distributions of annotated samples over training, validation and test set.",
                              "header": "Subset distribution",
                              "name": "subset_parameters",
                              "parameters": [
                                {
                                  "data_type": "float",
                                  "default_value": 0.3,
                                  "description": "Fraction of annotated data that will be assigned to the test set",
                                  "editable": true,
                                  "header": "Test set proportion",
                                  "max_value": 1,
                                  "min_value": 0.1,
                                  "name": "test_proportion",
                                  "template_type": "input",
                                  "ui_rules": {
                                    "action": "SHOW",
                                    "operator": "AND",
                                    "rules": [
                                      {
                                        "operator": "EQUAL_TO",
                                        "parameter": [
                                          "auto_subset_fractions"
                                        ],
                                        "type": "RULE",
                                        "value": false
                                      }
                                    ],
                                    "type": "UI_RULES"
                                  },
                                  "value": 0.3,
                                  "warning": null
                                },
                                {
                                  "data_type": "float",
                                  "default_value": 0.5,
                                  "description": "Fraction of annotated data that will be assigned to the training set",
                                  "editable": true,
                                  "header": "Training set proportion",
                                  "max_value": 1,
                                  "min_value": 0.1,
                                  "name": "train_proportion",
                                  "template_type": "input",
                                  "ui_rules": {
                                    "action": "SHOW",
                                    "operator": "AND",
                                    "rules": [
                                      {
                                        "operator": "EQUAL_TO",
                                        "parameter": [
                                          "auto_subset_fractions"
                                        ],
                                        "type": "RULE",
                                        "value": false
                                      }
                                    ],
                                    "type": "UI_RULES"
                                  },
                                  "value": 0.5,
                                  "warning": null
                                },
                                {
                                  "data_type": "float",
                                  "default_value": 0.2,
                                  "description": "Fraction of annotated data that will be assigned to the validation set",
                                  "editable": true,
                                  "header": "Validation set proportion",
                                  "max_value": 1,
                                  "min_value": 0.1,
                                  "name": "validation_proportion",
                                  "template_type": "input",
                                  "ui_rules": {
                                    "action": "SHOW",
                                    "operator": "AND",
                                    "rules": [
                                      {
                                        "operator": "EQUAL_TO",
                                        "parameter": [
                                          "auto_subset_fractions"
                                        ],
                                        "type": "RULE",
                                        "value": false
                                      }
                                    ],
                                    "type": "UI_RULES"
                                  },
                                  "value": 0.2,
                                  "warning": null
                                }
                              ],
                              "type": "PARAMETER_GROUP"
                            }
                          ],
                          "header": "Subset splitting",
                          "id": "62b2d940f54b4b5f9e4dcb34",
                          "parameters": [
                            {
                              "data_type": "boolean",
                              "default_value": true,
                              "description": "If this setting is enabled, the system will automatically determine the most optimal distribution of the annotated samples over training, validation and test set. Disable this setting to manually specify the proportions.",
                              "editable": true,
                              "header": "Automatically determine subset proportions",
                              "name": "auto_subset_fractions",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": true,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        },
                        {
                          "description": "Specify the number of required annotations for a task",
                          "entity_identifier": {
                            "component": "DATASET_COUNTER",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "task_id": "62b2d9408fd8d1af66e5af06",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "Annotation requirements",
                          "id": "62b2d940f54b4b5f9e4dcb35",
                          "parameters": [
                            {
                              "data_type": "boolean",
                              "default_value": true,
                              "description": "If this is ON, the first training will only be triggered when each label is present in N images, while N is number of required images for the first training. Otherwise, first training will be triggered when N images have been annotated. If first training has been triggered, this parameter will not take effect.",
                              "editable": true,
                              "header": "Label constraint for the first training",
                              "name": "label_constraint_first_training",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": true,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 6,
                              "description": "The minimum number of new annotations required before auto-train is triggered. Auto-training will start every time that this number of annotations is created.",
                              "editable": true,
                              "header": "Number of images required for auto-training",
                              "max_value": 10000,
                              "min_value": 3,
                              "name": "required_images_auto_training",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 6,
                              "warning": null
                            },
                            {
                              "data_type": "boolean",
                              "default_value": true,
                              "description": "Only applicable if auto-training is on. Set this parameter on to let the system dynamically compute the number of required annotations between training rounds based on model performance and training dataset size.",
                              "editable": true,
                              "header": "Dynamic required annotations",
                              "name": "use_dynamic_required_annotations",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": false,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        },
                        {
                          "description": "Specify the task-level configuration for active learning.",
                          "entity_identifier": {
                            "component": "TASK_ACTIVE_LEARNING",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "task_id": "62b2d9408fd8d1af66e5af06",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "groups": [
                            {
                              "description": "Score extractors",
                              "header": "Score extractors",
                              "name": "preprocessing",
                              "parameters": [
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "The feature vector score extractor outputs scores which reflect the distances between the known and unknown samples in the latent space.",
                                  "editable": true,
                                  "header": "Enable feature vector score extractor",
                                  "name": "feature_vector_extractor",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                },
                                {
                                  "data_type": "boolean",
                                  "default_value": true,
                                  "description": "The uncertainty score extractor outputs scores which reflect the uncertainty of the predictions on the respective media",
                                  "editable": true,
                                  "header": "Enable uncertainty score extractor",
                                  "name": "uncertainty_extractor",
                                  "template_type": "input",
                                  "ui_rules": {},
                                  "value": true,
                                  "warning": null
                                }
                              ],
                              "type": "PARAMETER_GROUP"
                            }
                          ],
                          "header": "Active Learning",
                          "id": "62b2d940f54b4b5f9e4dcb37",
                          "parameters": [
                            {
                              "data_type": "string",
                              "default_value": "mean",
                              "description": "Function to aggregate the active scores of a media within a task",
                              "editable": true,
                              "enum_name": "ActiveScoreReductionFunction",
                              "header": "Intra-task scores reduction function",
                              "name": "intra_task_reduce_fn",
                              "options": [
                                "min",
                                "mean",
                                "max"
                              ],
                              "template_type": "selectable",
                              "ui_rules": {},
                              "value": "mean",
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        },
                        {
                          "description": "General settings for a task.",
                          "entity_identifier": {
                            "component": "TASK_NODE",
                            "project_id": "62b2d9408fd8d1af66e5af07",
                            "task_id": "62b2d9408fd8d1af66e5af06",
                            "type": "COMPONENT_PARAMETERS",
                            "workspace_id": "62a9d380e287f1fcd1eed0ab"
                          },
                          "header": "General",
                          "id": "62b2d940f54b4b5f9e4dcb38",
                          "parameters": [
                            {
                              "data_type": "boolean",
                              "default_value": true,
                              "description": "Enable to allow the task to start training automatically when it is ready to train.",
                              "editable": true,
                              "header": "Auto-training",
                              "name": "auto_training",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": true,
                              "warning": null
                            }
                          ],
                          "type": "CONFIGURABLE_PARAMETERS"
                        }
                      ],
                      "task_id": "62b2d9408fd8d1af66e5af06",
                      "task_title": "Classification task"
                    }
                  },
                  "Model configuration": {
                    "value": {
                      "components": [
                        {
                          "description": "Learning Parameters",
                          "entity_identifier": {
                            "group_name": "learning_parameters",
                            "model_storage_id": "6193c24ed1f15d80895d99b2",
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "61938a645055d2dc122f5720"
                          },
                          "header": "Learning Parameters",
                          "id": "6193c256d1f15d80895d99b5-0",
                          "name": "learning_parameters",
                          "parameters": [
                            {
                              "data_type": "integer",
                              "default_value": 8,
                              "description": "The number of training samples seen in each iteration of training. Increasing this value improves training time and may make the training more stable. A larger batch size has higher memory requirements.",
                              "editable": true,
                              "header": "Batch size",
                              "max_value": 64,
                              "min_value": 1,
                              "name": "batch_size",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 8,
                              "warning": "Increasing this value may cause the system to use more memory than available, potentially causing out of memory errors, please update with caution."
                            },
                            {
                              "data_type": "float",
                              "default_value": 0.001,
                              "description": "Increasing this value will speed up training convergence but might make it unstable.",
                              "editable": true,
                              "header": "Learning rate",
                              "max_value": 0.1,
                              "min_value": 1e-7,
                              "name": "learning_rate",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 0.001,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 50,
                              "description": "Number of iterations for fixed learning rate",
                              "editable": true,
                              "header": "Number of iterations for fixed learning rate",
                              "max_value": 5000,
                              "min_value": 0,
                              "name": "learning_rate_fixed_iters",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 50,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 100,
                              "description": "Number of iterations for learning rate warmup",
                              "editable": true,
                              "header": "Number of iterations for learning rate warmup",
                              "max_value": 5000,
                              "min_value": 0,
                              "name": "learning_rate_warmup_iters",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 100,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 5,
                              "description": "Number of checkpoints that is done during the single training round",
                              "editable": true,
                              "header": "Number of checkpoints that is done during the single training round",
                              "max_value": 100,
                              "min_value": 1,
                              "name": "num_checkpoints",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 5,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 1000,
                              "description": "Increasing this value causes the results to be more robust but training time will be longer.",
                              "editable": true,
                              "header": "Number of training iterations",
                              "max_value": 100000,
                              "min_value": 1,
                              "name": "num_iters",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 1000,
                              "warning": null
                            },
                            {
                              "data_type": "integer",
                              "default_value": 0,
                              "description": "Increasing this value might improve training speed however it might cause out of memory errors. If the number of workers is set to zero, data loading will happen in the main training thread.",
                              "editable": true,
                              "header": "Number of cpu threads to use during batch generation",
                              "max_value": 8,
                              "min_value": 0,
                              "name": "num_workers",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 0,
                              "warning": null
                            }
                          ],
                          "type": "PARAMETER_GROUP"
                        },
                        {
                          "description": "Postprocessing",
                          "entity_identifier": {
                            "group_name": "postprocessing",
                            "model_storage_id": "6193c24ed1f15d80895d99b2",
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "61938a645055d2dc122f5720"
                          },
                          "header": "Postprocessing",
                          "id": "6193c256d1f15d80895d99b5-1",
                          "name": "postprocessing",
                          "parameters": [
                            {
                              "data_type": "float",
                              "default_value": 1,
                              "description": "With a higher value, the segmentation output will be smoother, but less accurate.",
                              "editable": true,
                              "header": "Blur strength",
                              "max_value": 25,
                              "min_value": 1,
                              "name": "blur_strength",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 1,
                              "warning": null
                            },
                            {
                              "data_type": "float",
                              "default_value": 0.5,
                              "description": "The threshold to apply to the probability output of the model, for each pixel. A higher value means a stricter segmentation prediction.",
                              "editable": true,
                              "header": "Soft threshold",
                              "max_value": 1,
                              "min_value": 0,
                              "name": "soft_threshold",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 0.5,
                              "warning": null
                            }
                          ],
                          "type": "PARAMETER_GROUP"
                        },
                        {
                          "description": "POT Parameters",
                          "entity_identifier": {
                            "group_name": "pot_parameters",
                            "model_storage_id": "6193c24ed1f15d80895d99b2",
                            "type": "HYPER_PARAMETER_GROUP",
                            "workspace_id": "61938a645055d2dc122f5720"
                          },
                          "header": "POT Parameters",
                          "id": "6193c256d1f15d80895d99b5-2",
                          "name": "pot_parameters",
                          "parameters": [
                            {
                              "data_type": "integer",
                              "default_value": 300,
                              "description": "Number of data samples used for post-training optimization",
                              "editable": true,
                              "header": "Number of data samples",
                              "max_value": 9223372036854776000,
                              "min_value": 1,
                              "name": "stat_subset_size",
                              "template_type": "input",
                              "ui_rules": {},
                              "value": 300,
                              "warning": null
                            }
                          ],
                          "type": "PARAMETER_GROUP"
                        }
                      ],
                      "task_id": "6193c24ed1f15d80895d99b4",
                      "task_title": "Sample segmentation task"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Task not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find task with id `123`",
                      "error_code": "task_not_found"
                    }
                  },
                  "Model not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find model with id 60ec6bbfb98caeb87e34309f",
                      "error_code": "model_not_found"
                    }
                  },
                  "Algorithm not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Unable to start training: Algorithm with name 'abc' was not found for task Sample detection task of type detection. Algorithms that are available to this task are: ['ote_anomaly_detection_stfpm', 'ote_anomaly_detection_padim'].",
                      "error_code": "algorithm_not_found"
                    }
                  },
                  "Configuration not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "No configurations were found for task with id 60dc38807c9ed62cf35b9255.",
                      "error_code": "configuration_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Set the configuration for a specific task.",
        "description": "This endpoint sets the configuration for a specific task. The configuration is subdivided into components, and every component is divided into parameter groups.",
        "operationId": "SetTaskConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "task_id",
            "style": "simple",
            "description": "The ID of the task of interest.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "components"
                ],
                "type": "object",
                "properties": {
                  "components": {
                    "type": "array",
                    "description": "Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task",
                    "items": {
                      "required": [
                        "entity_identifier"
                      ],
                      "type": "object",
                      "title": "Configurable parameters object",
                      "description": "The new values for the component parameters, hyper parameters or hyper parameter group to set",
                      "properties": {
                        "entity_identifier": {
                          "oneOf": [
                            {
                              "required": [
                                "type",
                                "component"
                              ],
                              "type": "object",
                              "title": "Component entity identifier",
                              "properties": {
                                "workspace_id": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    {
                                      "type": "string",
                                      "minLength": 36,
                                      "maxLength": 36,
                                      "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                      "description": "UUID of the object"
                                    }
                                  ]
                                },
                                "project_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "task_id": {
                                  "type": "string",
                                  "minLength": 0,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the task"
                                },
                                "component": {
                                  "type": "string",
                                  "description": "If the configuration is a component configuration, describes the component.",
                                  "enum": [
                                    "NULL_COMPONENT",
                                    "SUBSET_MANAGER",
                                    "DATASET_COUNTER",
                                    "PROJECT_ACTIVE_LEARNING",
                                    "TASK_ACTIVE_LEARNING",
                                    "TASK_NODE",
                                    "PIPELINE_DATASET_MANAGER"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.",
                                  "enum": [
                                    "COMPONENT_PARAMETERS"
                                  ]
                                }
                              }
                            },
                            {
                              "required": [
                                "type",
                                "model_storage_id"
                              ],
                              "type": "object",
                              "title": "Model entity identifier",
                              "properties": {
                                "workspace_id": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    {
                                      "type": "string",
                                      "minLength": 36,
                                      "maxLength": 36,
                                      "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                      "description": "UUID of the object"
                                    }
                                  ]
                                },
                                "model_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.",
                                  "enum": [
                                    "HYPER_PARAMETERS"
                                  ]
                                }
                              }
                            },
                            {
                              "required": [
                                "type",
                                "model_storage_id",
                                "group_name"
                              ],
                              "type": "object",
                              "title": "Hyper parameter group entity identifier",
                              "properties": {
                                "workspace_id": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24,
                                      "example": "60d31793d5f1fb7e6e3c1a4c",
                                      "description": "Mongo ID of the object"
                                    },
                                    {
                                      "type": "string",
                                      "minLength": 36,
                                      "maxLength": 36,
                                      "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
                                      "description": "UUID of the object"
                                    }
                                  ]
                                },
                                "model_storage_id": {
                                  "type": "string",
                                  "minLength": 24,
                                  "maxLength": 24,
                                  "example": "60d31793d5f1fb7e6e3c1a4c",
                                  "description": "Mongo ID of the object"
                                },
                                "group_name": {
                                  "type": "string",
                                  "description": "The name of the hyper parameter group"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP",
                                  "enum": [
                                    "HYPER_PARAMETER_GROUP"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "required": [
                              "parameters",
                              "name"
                            ],
                            "type": "object",
                            "title": "Parameter group",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the parameter group"
                              },
                              "parameters": {
                                "type": "array",
                                "description": "Array of parameters",
                                "items": {
                                  "required": [
                                    "value",
                                    "name"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "Value to set the parameter to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name to identify the parameter by in the system."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "parameters": {
                          "type": "array",
                          "items": {
                            "required": [
                              "value",
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ],
                                "description": "Value to set the parameter to."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name to identify the parameter by in the system."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Task configuration": {
                  "value": {
                    "components": [
                      {
                        "entity_identifier": {
                          "type": "HYPER_PARAMETER_GROUP",
                          "model_storage_id": "62b2d9408fd8d1af66e5af0b",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "group_name": "learning_parameters"
                        },
                        "parameters": [
                          {
                            "value": 32,
                            "name": "batch_size"
                          },
                          {
                            "value": false,
                            "name": "enable_lr_finder"
                          },
                          {
                            "value": 0.007,
                            "name": "learning_rate"
                          },
                          {
                            "value": 200,
                            "name": "max_num_epochs"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "SUBSET_MANAGER"
                        },
                        "groups": [
                          {
                            "type": "PARAMETER_GROUP",
                            "name": "subset_parameters",
                            "parameters": [
                              {
                                "value": 0.3,
                                "name": "test_proportion"
                              },
                              {
                                "value": 0.5,
                                "name": "train_proportion"
                              },
                              {
                                "value": 0.2,
                                "name": "validation_proportion"
                              }
                            ]
                          }
                        ],
                        "parameters": [
                          {
                            "value": true,
                            "name": "auto_subset_fractions"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "DATASET_COUNTER"
                        },
                        "parameters": [
                          {
                            "value": true,
                            "name": "label_constraint_first_training"
                          },
                          {
                            "value": 6,
                            "name": "required_images_auto_training"
                          },
                          {
                            "value": true,
                            "name": "use_dynamic_required_annotations"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "TASK_ACTIVE_LEARNING"
                        },
                        "groups": [
                          {
                            "type": "PARAMETER_GROUP",
                            "name": "preprocessing",
                            "parameters": [
                              {
                                "value": true,
                                "name": "feature_vector_extractor"
                              },
                              {
                                "value": true,
                                "name": "uncertainty_extractor"
                              }
                            ]
                          }
                        ],
                        "parameters": [
                          {
                            "value": "mean",
                            "name": "intra_task_reduce_fn"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "task_id": "62b2d9408fd8d1af66e5af06",
                          "type": "COMPONENT_PARAMETERS",
                          "project_id": "62b2d9408fd8d1af66e5af07",
                          "workspace_id": "62a9d380e287f1fcd1eed0ab",
                          "component": "TASK_NODE"
                        },
                        "parameters": [
                          {
                            "value": true,
                            "name": "auto_training"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Task configuration with hyper parameter groups": {
                  "value": {
                    "components": [
                      {
                        "entity_identifier": {
                          "model_storage_id": "60e7f858191ae547c0a701e3",
                          "type": "HYPER_PARAMETER_GROUP",
                          "group_name": "learning_parameters"
                        },
                        "parameters": [
                          {
                            "value": 5,
                            "name": "batch_size"
                          },
                          {
                            "value": 30,
                            "name": "early_stopping_patience"
                          },
                          {
                            "value": 0.001,
                            "name": "learning_rate"
                          },
                          {
                            "value": 0,
                            "name": "max_train_size"
                          },
                          {
                            "value": 40,
                            "name": "num_epochs"
                          },
                          {
                            "value": 0,
                            "name": "num_workers"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "model_storage_id": "60e7f858191ae547c0a701e3",
                          "type": "HYPER_PARAMETER_GROUP",
                          "group_name": "data_augmentation"
                        },
                        "parameters": [
                          {
                            "value": "None",
                            "name": "auto_augment"
                          },
                          {
                            "value": 90,
                            "name": "rotation_range"
                          },
                          {
                            "value": 0.2,
                            "name": "scaling_range"
                          }
                        ]
                      },
                      {
                        "entity_identifier": {
                          "model_storage_id": "60e7f858191ae547c0a701e3",
                          "type": "HYPER_PARAMETER_GROUP",
                          "group_name": "postprocessing"
                        },
                        "parameters": [
                          {
                            "value": 5,
                            "name": "blur_strength"
                          },
                          {
                            "value": true,
                            "name": "full_size_predictions"
                          },
                          {
                            "value": 0.5,
                            "name": "soft_threshold"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "examples": {
                  "Succesfully updated response": {
                    "value": "success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Task not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find task with id `123`",
                      "error_code": "task_not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Configuration cannot be saved to the server",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unable to save configuration": {
                    "value": {
                      "http_status": 500,
                      "message": "Unable to save configuration",
                      "error_code": "cannot_set_configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user_settings": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the users' settings for a project or for the entire system",
        "description": "Get the users' settings for a project or the entire system. If project_id query parameter is not specified, the settings for the entire system are returned.",
        "operationId": "GetSettings",
        "parameters": [
          {
            "in": "query",
            "name": "project_id",
            "style": "form",
            "description": "Select only items related to the given project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The settings for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "settings": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "User settings response": {
                    "value": {
                      "settings": {
                        "setting_1": "value_1",
                        "setting_2": "etc"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No settings found for user.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "No settings found response": {
                    "value": {
                      "http_status": 204,
                      "message": "No user settings were found.",
                      "error_code": "user_settings_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Set the users' settings for a project or for the entire system.",
        "description": "Set the users' settings for a project or for the entire system. If project_id query parameter is not specified, the settings for the entire system are set.",
        "operationId": "SetSettings",
        "parameters": [
          {
            "in": "query",
            "name": "project_id",
            "style": "form",
            "description": "Select only items related to the given project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string"
                  }
                },
                "required": [
                  "settings"
                ]
              },
              "examples": {
                "User settings": {
                  "value": {
                    "settings": {
                      "setting_1": "value_1",
                      "setting_2": "etc"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Settings were successfully set.",
            "content": {
              "application/json": {
                "examples": {
                  "Succesfully set response": {
                    "value": "success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Posted settings exceed the maximum settings length.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Settings exceed maximum length response": {
                    "value": {
                      "http_status": 400,
                      "message": "Settings provided for user exceed 3000 characters.",
                      "error_code": "settings_too_long"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/settings/annotation_templates": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Create an Annotation Template",
        "description": "Create an annotation template.",
        "operationId": "CreateAnnotationTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the annotation template"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the annotation template"
                  }
                }
              },
              "examples": {
                "Creating an annotation template": {
                  "value": {
                    "name": "standing",
                    "value": "FORMAT IS TBD"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Annotation template successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the annotation template"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the annotation template"
                    }
                  }
                },
                "examples": {
                  "Annotation template creation response": {
                    "value": {
                      "annotation_templates": [
                        {
                          "id": "62387685df33ae8280c63b33",
                          "name": "running",
                          "value": "FORMAT IS TBD"
                        },
                        {
                          "id": "62387685df33ae8280c63b36",
                          "name": "standing",
                          "value": "FORMAT IS TBD"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The provided information is invalid to create an annotation template.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid name provided response": {
                    "value": {
                      "http_status": 400,
                      "message": "The annotation template name cannot be empty.",
                      "error_code": "bad_request"
                    }
                  },
                  "Invalid value provided response": {
                    "value": {
                      "http_status": 400,
                      "message": "The provided annotation template value is not valid.",
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get all annotation templates of a project",
        "description": "Get a complete list of annotation templates which belong to the project.",
        "operationId": "GetAnnotationTemplates",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of annotation templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the annotation template"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the annotation template"
                    }
                  }
                },
                "example": {
                  "annotation_templates": [
                    {
                      "id": "62387685df33ae8280c63b33",
                      "name": "running",
                      "value": "FORMAT IS TBD"
                    },
                    {
                      "id": "62387685df33ae8280c63b36",
                      "name": "standing",
                      "value": "FORMAT IS TBD"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "No annotation template in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    }
                  }
                },
                "examples": {
                  "Annotation template not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Annotation template with id 60ec6bbfb98caeb87e343ab4 not found",
                      "error_code": "annotation_template_not_found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product_info": {
      "get": {
        "tags": [
          "Product Info"
        ],
        "summary": "Get information about the product",
        "description": "Get information regarding product version.",
        "operationId": "GetProductInfo",
        "responses": {
          "200": {
            "description": "Product Information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product-version": {
                      "type": "string",
                      "description": "Version number of installed product."
                    }
                  }
                },
                "example": {
                  "product-version": "1.0.0"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Upload a dataset archive",
        "description": "Upload a dataset archive to the server.\n\nThis endpoint allows clients to upload a dataset archive directly to the server without using the TUS protocol.",
        "operationId": "DatasetImportUploadFile",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "title": "File",
                    "type": "string",
                    "format": "binary",
                    "description": "The dataset file to be uploaded."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "examples": {
                  "Successful upload": {
                    "value": {
                      "file_id": "624433fe8a489284aabd71ba"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Could not upload a file with zero size": {
                    "value": {
                      "http_status": 400,
                      "message": "Could not upload a file with a size of 0 bytes."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "content": {
              "application/json": {
                "examples": {
                  "Too large to upload": {
                    "value": {
                      "http_status": 413,
                      "message": "Request too large: exceeding 10240 MB is not allowed."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads/resumable": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Start uploading a dataset archive using TUS",
        "description": "Initiate a new TUS session to upload a dataset archive.\n\nThis endpoint creates a new upload resource on the server according to the TUS protocol (https://tus.io/protocols/resumable-upload.html).\nThe client provides metadata such as file size and name in the request headers, and the server responds with a location URL for the newly created resource.\nThis URL is used for subsequent upload operations (e.g., PATCH, HEAD).",
        "operationId": "CreateTusDatasetUpload",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Upload-Length",
              "type": "integer"
            },
            "name": "upload-length",
            "description": "size in bytes of the file to be created",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created TUS upload",
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL for data upload"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Could not upload a file with zero size": {
                    "value": {
                      "http_status": 400,
                      "message": "Could not upload a file with a size of 0 bytes."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "content": {
              "application/json": {
                "examples": {
                  "Too large to upload": {
                    "value": {
                      "http_status": 413,
                      "message": "Request too large: exceeding 10240 MB is not allowed."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Retrieve server capabilities for TUS uploads",
        "description": "Get information about the TUS protocol versions and extensions supported by the server.\nThis endpoint allows clients to dynamically adapt their behavior based on server capabilities.",
        "operationId": "TusDatasetUploadOptions",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "tus-resumable": {
                "schema": {
                  "type": "string"
                },
                "description": "version of TUS used by the server"
              },
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              },
              "tus-extension": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS extensions"
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads/resumable/{file_id}": {
      "head": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Get the status of a dataset archive TUS upload",
        "description": "Retrieve the current status of the TUS upload of a dataset archive.\n\nThis endpoint provides information such as the current offset of uploaded data through the `Upload-Offset` header,\nallowing the client to resume uploads from the correct position.\nIt is useful for verifying progress or ensuring consistency before appending further data.",
        "operationId": "TusDatasetUploadHead",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "file_id",
            "style": "simple",
            "description": "The ID of the file uploaded using the TUS protocol.\nThis can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload).",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "upload-length": {
                "schema": {
                  "type": "integer"
                },
                "description": "total size in bytes of the file"
              },
              "upload-offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "size in bytes of data uploaded so far"
              }
            }
          },
          "400": {
            "description": "Bad Request. File ID is in wrong format.",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "File not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No upload file found with the given id"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Append data to a running TUS upload of a dataset archive",
        "description": "Upload a chunk of the dataset archive data to the server, appending it to the TUS upload at the specified offset.\n\nThis endpoint allows the client to resume uploading data with TUS by sending the remaining data from the last known offset.\nIt is recommended to choose a large chunk size (based on server limitations) to speed up the overall upload operation.",
        "operationId": "TusDatasetUploadPatch",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "file_id",
            "style": "simple",
            "description": "The ID of the file uploaded using the TUS protocol.\nThis can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload).",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Content-Type",
              "type": "string"
            },
            "name": "content-type",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Upload-Offset",
              "type": "integer"
            },
            "name": "upload-offset",
            "description": "size in bytes of data uploaded so far",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/offset+octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "upload-offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "size in bytes of data uploaded so far"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "Could not upload a file with zero size": {
                    "value": {
                      "http_status": 400,
                      "message": "Could not upload a file with a size of 0 bytes."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "File not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No upload file found with the given id"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type"
          }
        }
      },
      "delete": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Cancel a TUS upload of a dataset archive",
        "description": "Cancel the TUS upload of a dataset archive, removing the uploaded data from the server.\n\nThis endpoint allows the client to cancel the upload operation and remove the uploaded data from the server.\nIt is useful for cleaning up incomplete uploads.",
        "operationId": "TusDatasetUploadDelete",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "file_id",
            "style": "simple",
            "description": "The ID of the file uploaded using the TUS protocol.\nThis can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload).",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "File not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No upload file found with the given id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/datasets:prepare-for-import": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Prepare a dataset to be imported as a new project",
        "description": "Analyze an uploaded dataset archive file and prepare it to be imported as a new project.\n\nThis endpoint submits a job to prepare the dataset for import. Specifically, the job scans the dataset \nto determine the compatible task types and to identify potential issues in the data.\nThe status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nonce the job is finished, the list of compatible task types, labels and warnings can be found in the job metadata.",
        "operationId": "PrepareDatasetForImport",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "file_id",
            "style": "form",
            "description": "The ID of the uploaded file",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "An export dataset is used to import": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with id 62668c837d029ec2aa65aa60 is an export dataset and cannot be used to import to project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Dataset file not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No dataset file or folder found with given id"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "Max projects reached": {
                    "value": {
                      "http_status": 409,
                      "message": "You have hit the limit of number of projects in your organization (1000). Please delete some projects before making new ones."
                    }
                  },
                  "Max labels reached": {
                    "value": {
                      "http_status": 409,
                      "message": "A project can only have a maximum of 1000 labels. Please try with fewer labels"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "content": {
              "application/json": {
                "examples": {
                  "File not fully uploaded": {
                    "value": {
                      "http_status": 412,
                      "message": "File with given id is not fully uploaded to the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects:import-from-dataset": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Create a new project from a prepared dataset",
        "description": "Finalize the creation of a new project from an imported dataset, that has been previously uploaded and prepared.\n\nThis endpoint submits a job to create a new project with a given project name, task type and labels, that will also\ncontain all the media and annotations from the imported dataset.\nThe status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nonce the job is finished, the id of the created project can be found in the job metadata.",
        "operationId": "ImportProjectFromDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Import project body",
                "required": [
                  "file_id",
                  "project_name",
                  "task_type",
                  "labels"
                ],
                "type": "object",
                "properties": {
                  "file_id": {
                    "title": "File Id",
                    "type": "string",
                    "example": "60d31793d5f1fb7e6e3c1a4c"
                  },
                  "project_name": {
                    "title": "Project Name",
                    "type": "string",
                    "example": "Pet Classification"
                  },
                  "task_type": {
                    "title": "Task Type",
                    "type": "string",
                    "enum": [
                      "classification",
                      "classification_hierarchical",
                      "detection",
                      "segmentation",
                      "instance_segmentation",
                      "anomaly",
                      "detection_oriented",
                      "detection_classification",
                      "detection_segmentation",
                      "keypoint_detection"
                    ]
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "color": {
                          "type": "string",
                          "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8})$"
                        }
                      }
                    },
                    "example": [
                      {
                        "name": "cat",
                        "color": "#0014ffff"
                      },
                      {
                        "name": "dog",
                        "color": "#0015ffff"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "An export dataset is used to import": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with id 62668c837d029ec2aa65aa60 is an export dataset and cannot be used to import to project"
                    }
                  },
                  "Unknown task_type": {
                    "value": {
                      "http_status": 400,
                      "message": "Given task_type is not a supported task type: task_type: unknown"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Dataset file not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No dataset file or folder found with given id"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "Max projects reached": {
                    "value": {
                      "http_status": 409,
                      "message": "You have hit the limit of number of projects in your organization (1000). Please delete some projects before making new ones."
                    }
                  },
                  "Max labels reached": {
                    "value": {
                      "http_status": 409,
                      "message": "A project can only have a maximum of 1000 labels. Please try with fewer labels"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "content": {
              "application/json": {
                "examples": {
                  "File not fully uploaded": {
                    "value": {
                      "http_status": 412,
                      "message": "File with given id is not fully uploaded to the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets:prepare-for-import": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Prepare a dataset to be imported into an already existing project",
        "description": "Analyze an uploaded dataset archive file and prepare it to be imported into an existing project.\n\nThis endpoint submits a job to prepare the dataset for import. Specifically, the job scans the dataset\nto assess the compatibility with the target project and to identify potential issues in the data.\nThe status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nonce the job is finished, the list of parsed labels and warnings can be found in the job metadata.",
        "operationId": "PrepareDatasetForImportToProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "file_id",
            "style": "form",
            "description": "The ID of the uploaded file",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "An export dataset is used to import": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with id 62668c837d029ec2aa65aa60 is an export dataset and cannot be used to import to project"
                    }
                  },
                  "Project ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'project_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Dataset file not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No dataset file or folder found with given id"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested project could not be found. Project ID: `6290a8f9003ddb3967f14385`."
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "content": {
              "application/json": {
                "examples": {
                  "File not fully uploaded": {
                    "value": {
                      "http_status": 412,
                      "message": "File with given id is not fully uploaded to the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:import-from-dataset": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Import a prepared dataset into an existing project",
        "description": "Finalize the import of an already prepared dataset into an existing project.\n\nThis endpoint submits a job to import the dataset, including all its media and annotations from the imported dataset.\nThe status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nonce the job is finished, the id of the created project can be found in the job metadata.\n\nWithin the project, the data may be imported into an existing dataset or a new dataset, depending on the request body:\n- If one specifies a `dataset_id`, then the target will be that dataset\n- If one specifies a `dataset_name`, then a new dataset will be created with that name\n\nThe `labels_map` allows the user to map the labels found in the prepared dataset to the labels of the target project.",
        "operationId": "ImportDatasetToProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Import to project - existing dataset body",
                    "required": [
                      "file_id",
                      "labels_map",
                      "dataset_id",
                      "dataset_name"
                    ],
                    "type": "object",
                    "properties": {
                      "file_id": {
                        "title": "File Id",
                        "type": "string",
                        "example": "60d31793d5f1fb7e6e3c1a4c"
                      },
                      "dataset_id": {
                        "title": "Dataset Id",
                        "type": "string",
                        "example": "60d31793d5f1fb7e6e3c1a4d"
                      },
                      "dataset_name": {
                        "title": "Dataset name",
                        "type": "string",
                        "enum": [
                          ""
                        ],
                        "example": ""
                      },
                      "labels_map": {
                        "title": "Map of dataset label names to project label ids",
                        "type": "object",
                        "example": {
                          "person": "627d0c97bc34fab51b383f23",
                          "bicycle": "627d0c97bc34fab51b383f23",
                          "car": "627d0c97bc34fab51b383f22"
                        }
                      }
                    }
                  },
                  {
                    "title": "Import to project - new dataset body",
                    "required": [
                      "file_id",
                      "labels_map",
                      "dataset_id",
                      "dataset_name"
                    ],
                    "type": "object",
                    "properties": {
                      "file_id": {
                        "title": "File Id",
                        "type": "string",
                        "example": "60d31793d5f1fb7e6e3c1a4c"
                      },
                      "dataset_id": {
                        "title": "Dataset Id",
                        "type": "string",
                        "enum": [
                          ""
                        ],
                        "example": ""
                      },
                      "dataset_name": {
                        "title": "Dataset name",
                        "type": "string",
                        "example": "New dataset name"
                      },
                      "labels_map": {
                        "title": "Map of dataset label names to project label ids",
                        "type": "object",
                        "example": {
                          "person": "627d0c97bc34fab51b383f23",
                          "bicycle": "627d0c97bc34fab51b383f23",
                          "car": "627d0c97bc34fab51b383f22"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "File ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'file_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "An export dataset is used to import": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with id 62668c837d029ec2aa65aa60 is an export dataset and cannot be used to import to project"
                    }
                  },
                  "Project ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'project_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "Unsupported task type": {
                    "value": {
                      "http_status": 400,
                      "message": "The project doesn't have a trainable task."
                    }
                  },
                  "Import attempted into different project from preparation": {
                    "value": {
                      "http_status": 400,
                      "message": "Dataset with given id prepared for import into a project, but import attempted into different project"
                    }
                  },
                  "Invalid label_map": {
                    "value": {
                      "http_status": 400,
                      "message": "Given label ID in the labels_map is invalid."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "examples": {
                  "Dataset file not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No dataset file or folder found with given id"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested project could not be found. Project ID: `6290a8f9003ddb3967f14385`."
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "content": {
              "application/json": {
                "examples": {
                  "File not fully uploaded": {
                    "value": {
                      "http_status": 412,
                      "message": "File with given id is not fully uploaded to the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}:prepare-for-export": {
      "post": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Export a dataset as an archive",
        "description": "Export a dataset as a zip archive file, including all the media and the respective annotations.\n\nThis endpoint submits a job to export the dataset.\nThe status of the export operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nafter it completes, the URL to download the exported zip archive can be found in the job metadata.\n\nThe downloaded dataset archive can be later imported as a new project, or merged into an existing dataset of compatible type.",
        "operationId": "TriggerDatasetExport",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "export_format",
            "description": "The format to which to export the dataset",
            "schema": {
              "type": "string",
              "enum": [
                "coco",
                "yolo",
                "voc",
                "datumaro"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_unannotated_media",
            "description": "Boolean that indicates if unannotated media should be included in the export dataset.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "save_video_as_images",
            "description": "If true, videos will be exported as a set of images, one for each annotated frame. If the specified dataset format cannot natively represent videos (e.g., VOC, COCO, ...), this parameter is overridden to true by the server. Conversely, if the format is Datumaro and this option is false, videos will be exported fully.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Export job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Export format not supported": {
                    "value": {
                      "http_status": 400,
                      "message": "Export format not supported. Supported formats are ['coco', 'yolo', 'voc', 'datumaro']"
                    }
                  },
                  "Project ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'project_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "Dataset Storage ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'dataset_storage_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not Found",
            "content": {
              "application/json": {
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested project could not be found. Project ID: `6290a8f9003ddb3967f14385`."
                    }
                  },
                  "Dataset Storage not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested dataset could not be found. Dataset Storage ID: `6290a8f9003ddb3967f14385`."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/exports/{export_dataset_id}/download": {
      "get": {
        "tags": [
          "Dataset Import/Export"
        ],
        "summary": "Download an exported dataset archive",
        "description": "Download a dataset exported as a zip file.",
        "operationId": "DownloadExportedDataset",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "dataset_id",
            "style": "simple",
            "description": "The ID of the dataset in the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "export_dataset_id",
            "style": "simple",
            "description": "The ID of the export dataset of interest",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "307": {
            "description": "Redirect to the pre-signed URL for downloading the exported dataset archive",
            "headers": {
              "Content-Type": {
                "description": "The MIME type of the returned content",
                "schema": {
                  "type": "string",
                  "example": "application/zip"
                }
              },
              "Accept-Ranges": {
                "description": "Indicates that the server supports range requests",
                "schema": {
                  "type": "string",
                  "example": "bytes"
                }
              },
              "Location": {
                "description": "The URL to which the client is redirected",
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://example.com/api/v1/fileservice/download?token=abc123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "examples": {
                  "Project ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'project_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "Dataset Storage ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'dataset_storage_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  },
                  "Export Dataset ID in wrong format": {
                    "value": {
                      "http_status": 400,
                      "message": "Invalid request parameters: 'export_dataset_id'. The provided string is not a valid ID: 'invalid_id'."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not Found",
            "content": {
              "application/json": {
                "examples": {
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested project could not be found. Project ID: `6290a8f9003ddb3967f14385`."
                    }
                  },
                  "Dataset Storage not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested dataset could not be found. Dataset Storage ID: `6290a8f9003ddb3967f14385`."
                    }
                  },
                  "Export Dataset not found": {
                    "value": {
                      "http_status": 404,
                      "message": "The requested export dataset could not be found. Export Dataset ID: `6290a8f9003ddb3967f14385`."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/uploads/resumable": {
      "post": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Start uploading a project archive using TUS",
        "description": "Initiate a new TUS session to upload a project archive.\n\nThis endpoint creates a new upload resource on the server according to the TUS protocol (https://tus.io/protocols/resumable-upload.html).\nThe client provides metadata such as file size and name in the request headers, and the server responds with a location URL for the newly created resource.\nThis URL is used for subsequent upload operations (e.g., PATCH, HEAD).",
        "operationId": "CreateTusProjectUpload",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Upload-Length",
              "type": "integer"
            },
            "name": "upload-length",
            "description": "size in bytes of the file to upload",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created TUS upload",
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL for data upload"
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "content": {
              "application/json": {
                "examples": {
                  "Too large to upload": {
                    "value": {
                      "http_status": 413,
                      "message": "Request too large: exceeding 10240 MB is not allowed."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Retrieve server capabilities for TUS uploads",
        "description": "Get information about the TUS protocol versions and extensions supported by the server.\nThis endpoint allows clients to dynamically adapt their behavior based on server capabilities.",
        "operationId": "TusProjectUploadOptions",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "tus-resumable": {
                "schema": {
                  "type": "string"
                },
                "description": "version of TUS used by the server"
              },
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              },
              "tus-extension": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS extensions"
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/uploads/resumable/{file_id}": {
      "head": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Get the status of a project archive TUS upload",
        "description": "Retrieve the current status of the TUS upload of a project archive.\n\nThis endpoint provides information such as the current offset of uploaded data through the `Upload-Offset` header,\nallowing the client to resume uploads from the correct position.\nIt is useful for verifying progress or ensuring consistency before appending further data.",
        "operationId": "TusProjectUploadHead",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "file_id",
            "style": "simple",
            "description": "The ID of the file uploaded using the TUS protocol.\nThis can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload).",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "upload-length": {
                "schema": {
                  "type": "integer"
                },
                "description": "total size in bytes of the file"
              },
              "upload-offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "size in bytes of data uploaded so far"
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "File not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No upload file found with the given id"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Append data to a running TUS upload of a project archive",
        "description": "Upload a chunk of the project archive data to the server, appending it to the TUS upload at the specified offset.\n\nThis endpoint allows the client to resume uploading data with TUS by sending the remaining data from the last known offset.\nIt is recommended to choose a large chunk size (based on server limitations) to speed up the overall upload operation.",
        "operationId": "TusProjectUploadPatch",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "file_id",
            "style": "simple",
            "description": "The ID of the file uploaded using the TUS protocol.\nThis can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload).",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "required": false,
            "schema": {
              "title": "Tus-Resumable",
              "type": "string"
            },
            "name": "tus-resumable",
            "description": "version of TUS used by the client",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Content-Type",
              "type": "string"
            },
            "name": "content-type",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Upload-Offset",
              "type": "integer"
            },
            "name": "upload-offset",
            "description": "size in bytes of data uploaded so far",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/offset+octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "upload-offset": {
                "schema": {
                  "type": "integer"
                },
                "description": "size in bytes of data uploaded so far"
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "File not found": {
                    "value": {
                      "http_status": 404,
                      "message": "No upload file found with the given id"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "Unsupported TUS version",
            "headers": {
              "tus-version": {
                "schema": {
                  "type": "string"
                },
                "description": "list of supported TUS versions"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Unsupported TUS version": {
                    "value": {
                      "http_status": 412,
                      "message": "Version of tus used by client: '2.0' is not in the list of versions supported by server: '1.0'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:export": {
      "post": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Export a project as an archive",
        "description": "Export a project as a zip archive file, containing all the project data (including datasets and models).\n\nThis endpoint submits a job to export a project.\nThe status of the export operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob); \nafter it completes, the URL to download the exported zip archive can be found in the job metadata.\n\nThe downloaded project archive can be later imported using the [import project endpoint](#Project%20Import%2FExport/ImportProject).",
        "operationId": "TriggerProjectExport",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Export job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/exports/{export_operation_id}/download": {
      "get": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Download an exported project archive",
        "description": "Download a project archive exported as a zip file.",
        "operationId": "DownloadExportedProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "export_operation_id",
            "style": "simple",
            "description": "Identifier of the project export operation",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "responses": {
          "307": {
            "description": "Redirect to the pre-signed URL for downloading the exported project archive",
            "headers": {
              "Content-Type": {
                "description": "The MIME type of the returned content",
                "schema": {
                  "type": "string",
                  "example": "application/zip"
                }
              },
              "Accept-Ranges": {
                "description": "Indicates that the server supports range requests",
                "schema": {
                  "type": "string",
                  "example": "bytes"
                }
              },
              "Location": {
                "description": "The URL to which the client is redirected",
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://example.com/api/v1/fileservice/download?token=abc123"
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects:import": {
      "post": {
        "tags": [
          "Project Import/Export"
        ],
        "summary": "Import a project from an uploaded archive",
        "description": "Create a project by importing a project archive file.\n\nThe project archive file must be first uploaded using the TUS protocol,\nby means of the [TUS upload endpoints](#Project%20Import%2FExport/CreateTusProjectUpload).\n\nThis endpoint submits a job to import a project from the uploaded archive.\nThe status of the import operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);\nafter it completes, the id of the imported project can be found in the job metadata.",
        "operationId": "ImportProject",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "file_id"
                ],
                "properties": {
                  "file_id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24,
                    "example": "60d31793d5f1fb7e6e3c1a4c",
                    "description": "Mongo ID of the object"
                  },
                  "project_name": {
                    "description": "The name to assign to the imported project",
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "Importing a project with custom name": {
                  "value": {
                    "file_id": "6630a9a83a2e1a7b08f6fc66",
                    "project_name": "Vehicle detection"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    }
                  }
                },
                "examples": {
                  "Import job submitted successfully": {
                    "value": {
                      "job_id": "636d72a236330201c0ee43cd"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Too many projects",
            "content": {
              "application/json": {
                "examples": {
                  "Max projects reached": {
                    "value": {
                      "http_status": 409,
                      "message": "You have hit the limit of number of projects in your organization (1000). Please delete some projects before making new ones."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments:prepare": {
      "post": {
        "tags": [
          "Code Deployment"
        ],
        "summary": "Prepare code deployment for project",
        "description": "This endpoint triggers preparation for code deployment for a specific project. For single-task projects (Detection, Segmentation, etc), it will export the only model used. For task-chain projects, it will export all the models. Only models in OpenVINO IR format are supported.\nThis endpoint is deprecated. Use the [deployment package endpoint](../deployment_package/download_deployment_package_endpoint.yaml) to prepare and download code deployment.",
        "operationId": "PrepareCodeDeployment",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "models"
                ],
                "properties": {
                  "models": {
                    "type": "array",
                    "description": "Array of model identifiers",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "model_id",
                        "model_group_id"
                      ],
                      "properties": {
                        "model_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "model_group_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Request code deployment for a task chain": {
                  "value": {
                    "models": [
                      {
                        "model_id": "6138af293b7b11505c43f2bc",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      },
                      {
                        "model_id": "6138af293b7b11505c43f7ef",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Code deployment started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "progress": {
                      "type": "number",
                      "description": "progress of code deployment"
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the deployment",
                      "enum": [
                        "NONE",
                        "PREPARING",
                        "DONE",
                        "FAILED"
                      ]
                    },
                    "models": {
                      "description": "Identifiers of the exported models",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "model_id",
                          "model_group_id"
                        ],
                        "properties": {
                          "model_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "model_group_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        }
                      }
                    },
                    "creator_id": {
                      "description": "Id of the user who started the deployment",
                      "type": "string"
                    },
                    "creation_time": {
                      "description": "Creation time of the model",
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successfully created": {
                    "value": {
                      "id": "6138afea3b7b11505c43f2f1",
                      "progress": 1,
                      "state": "DONE",
                      "models": [
                        {
                          "model_id": "60dc38807c9ed62cf35b9255",
                          "model_group_id": "0d31793d5f1fb7e6e3c1a4f"
                        }
                      ],
                      "creator_id": "Example user",
                      "creation_time": "2021-06-30T09:25:20.472000+00:00"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid code deployment": {
                    "value": {
                      "http_status": 400,
                      "message": "The submitted code deployment is invalid, please check with the schema.",
                      "error_code": "code_deployment_invalid"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments/{deployment_id}": {
      "get": {
        "tags": [
          "Code Deployment"
        ],
        "summary": "Get details of a code deployment process",
        "description": "Get details for the code deployment process, which includes the state, the progress, models, the creator id and creation time.",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "deployment_id",
            "style": "simple",
            "description": "The ID of the deployment",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "operationId": "GetCodeDeployment",
        "responses": {
          "200": {
            "description": "Retrieved details for deployment on code level",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 24,
                      "maxLength": 24,
                      "example": "60d31793d5f1fb7e6e3c1a4c",
                      "description": "Mongo ID of the object"
                    },
                    "progress": {
                      "type": "number",
                      "description": "progress of code deployment"
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the deployment",
                      "enum": [
                        "NONE",
                        "PREPARING",
                        "DONE",
                        "FAILED"
                      ]
                    },
                    "models": {
                      "description": "Identifiers of the exported models",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "model_id",
                          "model_group_id"
                        ],
                        "properties": {
                          "model_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          },
                          "model_group_id": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "example": "60d31793d5f1fb7e6e3c1a4c",
                            "description": "Mongo ID of the object"
                          }
                        }
                      }
                    },
                    "creator_id": {
                      "description": "Id of the user who started the deployment",
                      "type": "string"
                    },
                    "creation_time": {
                      "description": "Creation time of the model",
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Details successfully retrieved": {
                    "value": {
                      "id": "6138afea3b7b11505c43f2f1",
                      "progress": 1,
                      "state": "DONE",
                      "models": [
                        {
                          "model_id": "60dc38807c9ed62cf35b9255",
                          "model_group_id": "0d31793d5f1fb7e6e3c1a4f"
                        }
                      ],
                      "creator_id": "Example user",
                      "creation_time": "2021-06-30T09:25:20.472000+00:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Code level deployment not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Cannot find code deployment with ID 60ec6bbfb98caeb87e34305d. Please trigger a new code deployment request.",
                      "error_code": "code_deployment_not_found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments/{deployment_id}/download": {
      "get": {
        "tags": [
          "Code Deployment"
        ],
        "summary": "Download the deployed code as a zip file",
        "description": "Download the deployed code as a zip file. This endpoint is deprecated. Use the [deployment package endpoint](../deployment_package/download_deployment_package_endpoint.yaml) to prepare and download code deployment.",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "deployment_id",
            "style": "simple",
            "description": "The ID of the deployment",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "operationId": "DownloadCodeDeployment",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Retrieved code deployment zipfile",
            "content": {
              "zip file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for detail.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Organization not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find organization with id 60ec6bbfb98caeb87e34306f",
                      "error_code": "organization_not_found"
                    }
                  },
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  },
                  "Code level deployment not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Cannot find code deployment with ID 60ec6bbfb98caeb87e34305d. Please trigger a new code deployment request.",
                      "error_code": "code_deployment_not_found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Deployment is not ready. See the examples for detail.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Code level deployment download is not ready": {
                    "value": {
                      "http_status": 503,
                      "message": "Code deployment with ID 60ec6bbfb98caeb87e34305d is not ready for download, it is at state: PREPARING. Please wait a few seconds for the packaging process to finish or start a new code deployment process.",
                      "error_code": "code_deployment_download_not_ready"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/deployment_package:download": {
      "post": {
        "tags": [
          "Deployment package"
        ],
        "summary": "Download the deployment package as a zip file",
        "description": "Download the deployment package as a zip file, e.g. an archive containing trained model files and graphs for deploying model on OpenVino Model Server or locally using the Geti SDK.",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "style": "simple",
            "description": "The ID of the organization.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "workspace_id",
            "style": "simple",
            "description": "The ID of the workspace.",
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "example": "2e1de607-b549-42bf-8031-fd16d87379e5",
              "description": "UUID of the object"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "style": "simple",
            "description": "The ID of the project.",
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24,
              "example": "60d31793d5f1fb7e6e3c1a4c",
              "description": "Mongo ID of the object"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "models",
                  "package_type"
                ],
                "properties": {
                  "models": {
                    "type": "array",
                    "description": "Array of model identifiers",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "model_id",
                        "model_group_id"
                      ],
                      "properties": {
                        "model_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        },
                        "model_group_id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24,
                          "example": "60d31793d5f1fb7e6e3c1a4c",
                          "description": "Mongo ID of the object"
                        }
                      }
                    }
                  },
                  "package_type": {
                    "enum": [
                      "ovms",
                      "geti_sdk"
                    ]
                  }
                }
              },
              "examples": {
                "Request OpenVino Model Server deployment package for a task chain": {
                  "value": {
                    "package_type": "ovms",
                    "models": [
                      {
                        "model_id": "6138af293b7b11505c43f2bc",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      },
                      {
                        "model_id": "6138af293b7b11505c43f7ef",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      }
                    ]
                  }
                },
                "Request Geti SDK deployment package for a task chain": {
                  "value": {
                    "package_type": "geti_sdk",
                    "models": [
                      {
                        "model_id": "6138af293b7b11505c43f2bc",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      },
                      {
                        "model_id": "6138af293b7b11505c43f7ef",
                        "model_group_id": "6138af293b7b11505c43f1dq"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "operationId": "DownloadDeploymentPackage",
        "responses": {
          "200": {
            "description": "Retrieved deployment package zipfile",
            "content": {
              "zip file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Object not found. See the examples for detail.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Workspace not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find workspace with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "workspace_not_found"
                    }
                  },
                  "Project not found response": {
                    "value": {
                      "http_status": 404,
                      "message": "Could not find project with id 60ec6bbfb98caeb87e34306e",
                      "error_code": "project_not_found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid package type",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "http_status",
                    "message",
                    "error_code"
                  ],
                  "properties": {
                    "http_status": {
                      "type": "integer",
                      "enum": [
                        400,
                        404,
                        405,
                        409,
                        412,
                        413,
                        415,
                        422,
                        423,
                        500,
                        501,
                        503
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message from server"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Error code from server"
                    }
                  }
                },
                "examples": {
                  "Invalid package type": {
                    "value": {
                      "http_status": 422,
                      "message": "Invalid package type. Supported types are: ['ovms', 'geti_sdk']",
                      "error_code": "invalid_package_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/balance": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "[SaaS] Get running credits balance",
        "description": "<i>Not available on on-premises environments.</i><br><br> The running credit balance of an organization is calculated during the current subscription cycle, and consists of 3 values:<br>\n  1) incoming - credits, allocated to the organization at the start of the subscription cycle;<br>\n  2) blocked - credits, temporary reserved for the training or optimization jobs in progress;<br>\n  3) available - credits, which are available for usage.",
        "operationId": "get_balance_api_v1_organizations__organization_id__balance_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 8023398574000,
                  "minimum": 1711929600000
                },
                {
                  "type": "null"
                }
              ],
              "description": "Milliseconds timestamp",
              "title": "Date"
            },
            "description": "Optional parameter. If not provided, the current credits balance is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "incoming": {
                      "type": "integer",
                      "title": "Incoming"
                    },
                    "available": {
                      "type": "integer",
                      "title": "Available"
                    },
                    "blocked": {
                      "type": "integer",
                      "title": "Blocked"
                    }
                  },
                  "type": "object",
                  "required": [
                    "incoming",
                    "available",
                    "blocked"
                  ],
                  "title": "BalanceResponse"
                },
                "examples": {
                  "Balance on a date": {
                    "value": {
                      "incoming": 3000,
                      "available": 2941,
                      "blocked": 59
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization doesn't have any active credit accounts"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/credit_accounts": {
      "get": {
        "tags": [
          "Credit Accounts"
        ],
        "summary": "[SaaS] Get credit accounts",
        "description": "<i>Not available on on-premises environments.</i><br><br> Returns active (not expired) credit accounts of the organization.",
        "operationId": "get_credit_accounts_api_v1_organizations__organization_id__credit_accounts_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 0,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_matched": {
                      "type": "integer",
                      "title": "Total Matched"
                    },
                    "next_page": {
                      "anyOf": [
                        {
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "title": "Limit"
                            },
                            "skip": {
                              "type": "integer",
                              "title": "Skip"
                            }
                          },
                          "type": "object",
                          "required": [
                            "limit",
                            "skip"
                          ],
                          "title": "NextPage"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "credit_accounts": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                          },
                          "organization_id": {
                            "type": "string",
                            "title": "Organization Id"
                          },
                          "name": {
                            "type": "string",
                            "title": "Name"
                          },
                          "renewable_amount": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Renewable Amount"
                          },
                          "renewal_day_of_month": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Renewal Day Of Month"
                          },
                          "created": {
                            "type": "integer",
                            "title": "Created"
                          },
                          "updated": {
                            "type": "integer",
                            "title": "Updated"
                          },
                          "expires": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Expires"
                          },
                          "balance": {
                            "properties": {
                              "incoming": {
                                "type": "integer",
                                "title": "Incoming"
                              },
                              "available": {
                                "type": "integer",
                                "title": "Available"
                              },
                              "blocked": {
                                "type": "integer",
                                "title": "Blocked"
                              }
                            },
                            "type": "object",
                            "required": [
                              "incoming",
                              "available",
                              "blocked"
                            ],
                            "title": "BalanceResponse"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "organization_id",
                          "name",
                          "created",
                          "updated",
                          "balance"
                        ],
                        "title": "CreditAccount"
                      },
                      "type": "array",
                      "title": "Credit Accounts"
                    }
                  },
                  "type": "object",
                  "required": [
                    "total_matched",
                    "credit_accounts"
                  ],
                  "title": "CreditAccountsResponse"
                },
                "example": {
                  "total_matched": 2,
                  "next_page": null,
                  "credit_accounts": [
                    {
                      "id": "de13930f-0028-47e9-a228-21d511e8d281",
                      "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                      "name": "Freemium Credits",
                      "renewable_amount": 1000,
                      "renewal_day_of_month": 31,
                      "created": 1722439231635,
                      "updated": 1722439231635,
                      "expires": null,
                      "balance": {
                        "incoming": 0,
                        "available": 0,
                        "blocked": 0
                      }
                    },
                    {
                      "id": "95e31d4b-5b48-4817-bdff-a4998f44bac9",
                      "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                      "name": "Welcoming Credits",
                      "renewable_amount": 0,
                      "renewal_day_of_month": null,
                      "created": 1722439231576,
                      "updated": 1722439231576,
                      "expires": 1725117631575,
                      "balance": {
                        "incoming": 3000,
                        "available": 2941,
                        "blocked": 59
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Organization doesn't have any active credit accounts"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/subscriptions/active": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[SaaS] Get the active subscription",
        "description": "<i>Not available on on-premises environments.</i><br><br> Information about the organization's active subscription.",
        "operationId": "get_active_subscription_api_v1_organizations__organization_id__subscriptions_active_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "title": "Id"
                    },
                    "organization_id": {
                      "type": "string",
                      "title": "Organization Id"
                    },
                    "workspace_id": {
                      "type": "string",
                      "title": "Workspace Id"
                    },
                    "product_id": {
                      "type": "string",
                      "format": "uuid",
                      "title": "Product Id"
                    },
                    "status": {
                      "type": "string",
                      "title": "Status"
                    },
                    "created": {
                      "type": "integer",
                      "title": "Created"
                    },
                    "updated": {
                      "type": "integer",
                      "title": "Updated"
                    },
                    "next_renewal_date": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Next Renewal Date"
                    },
                    "previous_renewal_date": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Previous Renewal Date"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "organization_id",
                    "workspace_id",
                    "product_id",
                    "status",
                    "created",
                    "updated"
                  ],
                  "title": "SubscriptionResponse"
                },
                "example": {
                  "id": "e4187c27-2c1a-4265-9233-04950fd93471",
                  "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                  "workspace_id": "23f347e1-cefc-4d98-9001-c551b6edb269",
                  "product_id": "fafa904e-4ae9-4a5c-a4a7-ea22eee73c03",
                  "status": "ACTIVE",
                  "created": 1722439231555,
                  "updated": 1722439231555,
                  "next_renewal_date": 1725062400000,
                  "previous_renewal_date": null
                }
              }
            }
          },
          "404": {
            "description": "Organization doesn't have any active subscriptions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "[SaaS] Get transactions information",
        "description": "<i>Not available on on-premises environments.</i><br><br> Returns information about finished transactions within specified time range [from_date, to_date].<br> Supports sorting and filtering by project name and usage type.",
        "operationId": "get_transactions_api_v1_organizations__organization_id__transactions_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 3,
              "title": "Limit"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 8023398574000,
                  "minimum": 1711929600000
                },
                {
                  "type": "null"
                }
              ],
              "description": "Milliseconds timestamp",
              "title": "From Date"
            },
            "description": "Milliseconds timestamp"
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 8023398574000,
                  "minimum": 1711929600000
                },
                {
                  "type": "null"
                }
              ],
              "description": "Milliseconds timestamp",
              "title": "To Date"
            },
            "description": "Milliseconds timestamp"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "created,desc"
              ],
              "title": "Sort"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "usage_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "optimization",
                    "training"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Usage Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_matched": {
                      "type": "integer",
                      "title": "Total Matched"
                    },
                    "next_page": {
                      "anyOf": [
                        {
                          "properties": {
                            "limit": {
                              "type": "integer",
                              "title": "Limit"
                            },
                            "skip": {
                              "type": "integer",
                              "title": "Skip"
                            }
                          },
                          "type": "object",
                          "required": [
                            "limit",
                            "skip"
                          ],
                          "title": "NextPage"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "transactions": {
                      "items": {
                        "properties": {
                          "credits": {
                            "type": "integer",
                            "title": "Credits"
                          },
                          "project_id": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Project Id"
                          },
                          "service_name": {
                            "type": "string",
                            "title": "Service Name"
                          },
                          "milliseconds_timestamp": {
                            "type": "integer",
                            "title": "Milliseconds Timestamp"
                          }
                        },
                        "type": "object",
                        "required": [
                          "credits",
                          "service_name",
                          "milliseconds_timestamp"
                        ],
                        "title": "TransactionInfo"
                      },
                      "type": "array",
                      "title": "Transactions"
                    }
                  },
                  "type": "object",
                  "required": [
                    "total_matched",
                    "transactions"
                  ],
                  "title": "TransactionsResponse"
                },
                "example": {
                  "total_matched": 3,
                  "next_page": null,
                  "transactions": [
                    {
                      "credits": 12,
                      "project_id": "66aa8abff93bad108c06ec0a",
                      "service_name": "optimization",
                      "milliseconds_timestamp": 1722512643184
                    },
                    {
                      "credits": 12,
                      "project_id": "66aa8abff93bad108c06ec0a",
                      "service_name": "training",
                      "milliseconds_timestamp": 1722511748352
                    },
                    {
                      "credits": 59,
                      "project_id": "66aa882df93bad108c06eb0d",
                      "service_name": "training",
                      "milliseconds_timestamp": 1722511718089
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/transactions/aggregates": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "[SaaS] Get credit consumption aggregates",
        "description": "<i>Not available on on-premises environments.</i><br><br> The aggregating endpoint allows to retrieve credit consumption grouped by various dimensions - such as project, date, usage type, etc.",
        "operationId": "get_credit_consumption_aggregates_api_v1_organizations__organization_id__transactions_aggregates_get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 8023398574000,
                  "minimum": 1711929600000
                },
                {
                  "type": "null"
                }
              ],
              "description": "Milliseconds timestamp",
              "title": "From Date"
            },
            "description": "Milliseconds timestamp"
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 8023398574000,
                  "minimum": 1711929600000
                },
                {
                  "type": "null"
                }
              ],
              "description": "Milliseconds timestamp",
              "title": "To Date"
            },
            "description": "Milliseconds timestamp"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project",
                  "service_name",
                  "date"
                ],
                "title": "AggregatesKey",
                "description": "Allowed keys for transaction aggregates"
              },
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "aggregates": {
                      "items": {
                        "properties": {
                          "group": {
                            "items": {
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "title": "Key"
                                },
                                "value": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ],
                                  "title": "Value"
                                }
                              },
                              "type": "object",
                              "required": [
                                "key",
                                "value"
                              ],
                              "title": "GroupItem"
                            },
                            "type": "array",
                            "title": "Group"
                          },
                          "result": {
                            "properties": {
                              "credits": {
                                "type": "integer",
                                "title": "Credits"
                              },
                              "resources": {
                                "properties": {
                                  "images": {
                                    "type": "integer",
                                    "title": "Images",
                                    "default": 0
                                  },
                                  "frames": {
                                    "type": "integer",
                                    "title": "Frames",
                                    "default": 0
                                  }
                                },
                                "type": "object",
                                "title": "ResourcesAmount"
                              }
                            },
                            "type": "object",
                            "required": [
                              "credits",
                              "resources"
                            ],
                            "title": "AggregatesResult"
                          }
                        },
                        "type": "object",
                        "required": [
                          "group",
                          "result"
                        ],
                        "title": "AggregateItem"
                      },
                      "type": "array",
                      "title": "Aggregates"
                    }
                  },
                  "type": "object",
                  "required": [
                    "aggregates"
                  ],
                  "title": "AggregatesResponse"
                },
                "examples": {
                  "Aggregation by a service name": {
                    "value": {
                      "aggregates": [
                        {
                          "group": [
                            {
                              "key": "service_name",
                              "value": "training"
                            }
                          ],
                          "result": {
                            "credits": 71,
                            "resources": {
                              "images": 71,
                              "frames": 0
                            }
                          }
                        },
                        {
                          "group": [
                            {
                              "key": "service_name",
                              "value": "optimization"
                            }
                          ],
                          "result": {
                            "credits": 12,
                            "resources": {
                              "images": 12,
                              "frames": 0
                            }
                          }
                        }
                      ]
                    }
                  },
                  "Aggregation by a project": {
                    "value": {
                      "aggregates": [
                        {
                          "group": [
                            {
                              "key": "project",
                              "value": "66aa882df93bad108c06eb0d"
                            }
                          ],
                          "result": {
                            "credits": 59,
                            "resources": {
                              "images": 59,
                              "frames": 0
                            }
                          }
                        },
                        {
                          "group": [
                            {
                              "key": "project",
                              "value": "66aa8abff93bad108c06ec0a"
                            }
                          ],
                          "result": {
                            "credits": 24,
                            "resources": {
                              "images": 24,
                              "frames": 0
                            }
                          }
                        }
                      ]
                    }
                  },
                  "Aggregation by a project and a service": {
                    "value": {
                      "aggregates": [
                        {
                          "group": [
                            {
                              "key": "project",
                              "value": "66aa8abff93bad108c06ec0a"
                            },
                            {
                              "key": "service_name",
                              "value": "training"
                            }
                          ],
                          "result": {
                            "credits": 12,
                            "resources": {
                              "images": 12,
                              "frames": 0
                            }
                          }
                        },
                        {
                          "group": [
                            {
                              "key": "project",
                              "value": "66aa882df93bad108c06eb0d"
                            },
                            {
                              "key": "service_name",
                              "value": "training"
                            }
                          ],
                          "result": {
                            "credits": 59,
                            "resources": {
                              "images": 59,
                              "frames": 0
                            }
                          }
                        },
                        {
                          "group": [
                            {
                              "key": "project",
                              "value": "66aa8abff93bad108c06ec0a"
                            },
                            {
                              "key": "service_name",
                              "value": "optimization"
                            }
                          ],
                          "result": {
                            "credits": 12,
                            "resources": {
                              "images": 12,
                              "frames": 0
                            }
                          }
                        }
                      ]
                    }
                  },
                  "Aggregation by a date": {
                    "value": {
                      "aggregates": [
                        {
                          "group": [
                            {
                              "key": "date",
                              "value": 1722470400000
                            }
                          ],
                          "result": {
                            "credits": 83,
                            "resources": {
                              "images": 83,
                              "frames": 0
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HTTPValidationError",
                  "type": "object",
                  "properties": {
                    "detail": {
                      "title": "Detail",
                      "type": "array",
                      "items": {
                        "ValidationError": {
                          "title": "ValidationError",
                          "required": [
                            "loc",
                            "msg",
                            "type"
                          ],
                          "type": "object",
                          "properties": {
                            "loc": {
                              "title": "Location",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "msg": {
                              "title": "Message",
                              "type": "string"
                            },
                            "type": {
                              "title": "Error Type",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ListUsersResponseNextPage": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "commonPreUrlResponse": {
        "type": "object",
        "properties": {
          "presignedUrl": {
            "type": "string"
          }
        }
      },
      "rpcStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array"
          }
        }
      },
      "userListUsersResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_commonUserData"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalMatchedCount": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "$ref": "#/components/schemas/ListUsersResponseNextPage"
          }
        }
      },
      "userUserIdRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          }
        }
      },
      "userUserInvitationResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        }
      },
      "userUserProfileData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "telemetryConsent": {
            "type": "string"
          },
          "telemetryConsentAt": {
            "type": "string",
            "format": "date-time"
          },
          "userConsent": {
            "type": "string"
          },
          "userConsentAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "userUserRolesResponse": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_commonUserRole"
            }
          }
        }
      },
      "user_commonUserData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "secondName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "organizationStatus": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_commonUserRole"
            }
          },
          "lastSuccessfulLogin": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string"
          },
          "telemetryConsent": {
            "type": "string"
          },
          "telemetryConsentAt": {
            "type": "string",
            "format": "date-time"
          },
          "userConsent": {
            "type": "string"
          },
          "userConsentAt": {
            "type": "string",
            "format": "date-time"
          },
          "presignedUrl": {
            "type": "string"
          }
        }
      },
      "user_commonUserRole": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          }
        }
      },
      "user_commonUserRoleOperation": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/user_commonUserRole"
          },
          "operation": {
            "title": "CREATE, DELETE, TOUCH",
            "type": "string"
          }
        }
      },
      "ListOrganizationsResponseNextPage": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "organizationListOrganizationsResponse": {
        "type": "object",
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organizationOrganizationData"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalMatchedCount": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "$ref": "#/components/schemas/ListOrganizationsResponseNextPage"
          }
        }
      },
      "organizationOrganizationData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "cellId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string"
          }
        }
      },
      "organizationOrganizationIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "organizationOrganizationInvitiationRequest": {
        "type": "object",
        "properties": {
          "organizationData": {
            "$ref": "#/components/schemas/organizationOrganizationData"
          },
          "adminData": {
            "$ref": "#/components/schemas/user_commonUserData"
          }
        }
      },
      "ListWorkspacesResponseNextPage": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "workspaceListWorkspacesResponse": {
        "type": "object",
        "properties": {
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workspaceWorkspaceData"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalMatchedCount": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "$ref": "#/components/schemas/ListWorkspacesResponseNextPage"
          }
        }
      },
      "workspaceWorkspaceData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string"
          }
        }
      },
      "user_statusUserStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessResourceType": {
        "title": "AccessResourceType",
        "enum": [
          "project",
          "workspace",
          "user_directory"
        ],
        "type": "string",
        "description": "Available resources for SpiceDB relations"
      },
      "AccessTokenOutputModel": {
        "title": "AccessTokenOutputModel",
        "required": [
          "access_token",
          "expires_at",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "expires_at": {
            "title": "Expires At",
            "type": "integer"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        },
        "example": {
          "access_token": "JSON Web Token value",
          "token_type": "bearer",
          "expires_in": 899
        }
      },
      "Body_upload_user_photo_users__user_id__photo_post": {
        "title": "Body_upload_user_photo_users__user_id__photo_post",
        "required": [
          "photo_file"
        ],
        "type": "object",
        "properties": {
          "photo_file": {
            "title": "Photo File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "ConfirmRegistrationData": {
        "title": "ConfirmRegistrationData",
        "required": [
          "token",
          "password"
        ],
        "type": "object",
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "description": "Stores data for confirmation of the user registration"
      },
      "CreateServiceUserData": {
        "title": "CreateServiceUserData",
        "required": [
          "expiration_date"
        ],
        "type": "object",
        "properties": {
          "expiration_date": {
            "title": "Expiration Date",
            "type": "string"
          }
        },
        "example": {
          "expiration_date": "2044-12-31T21:22:23"
        }
      },
      "CreateUserData": {
        "title": "CreateUserData",
        "required": [
          "uid",
          "name",
          "mail",
          "password",
          "roles"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "title": "Uid",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "mail": {
            "title": "Mail",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "msg": {
            "title": "Error message",
            "type": "string"
          },
          "code": {
            "title": "Error code",
            "type": "integer",
            "default": 422
          },
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        }
      },
      "InviteData": {
        "title": "InviteData",
        "required": [
          "mail",
          "roles"
        ],
        "type": "object",
        "properties": {
          "mail": {
            "title": "Mail",
            "type": "string"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            }
          }
        }
      },
      "LoginData": {
        "title": "LoginData",
        "required": [
          "login",
          "password"
        ],
        "type": "object",
        "properties": {
          "login": {
            "title": "Login",
            "maxLength": 200,
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "description": "Stores data about user login credentials"
      },
      "PasswordRequestResetData": {
        "title": "PasswordRequestResetData",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "maxLength": 200,
            "type": "string"
          }
        },
        "description": "Stores email on which new password will be sent"
      },
      "PasswordResetData": {
        "title": "PasswordResetData",
        "required": [
          "new_password",
          "token"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "title": "New Password",
            "type": "string"
          },
          "token": {
            "title": "Token",
            "type": "string"
          }
        },
        "description": "Stores user's new password and token"
      },
      "PasswordUpdateData": {
        "title": "PasswordUpdateData",
        "required": [
          "new_password",
          "old_password"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "title": "New Password",
            "type": "string"
          },
          "old_password": {
            "title": "Old Password",
            "type": "string"
          }
        }
      },
      "RefreshServiceUserData": {
        "title": "RefreshServiceUserData",
        "required": [
          "expiration_date"
        ],
        "type": "object",
        "properties": {
          "expiration_date": {
            "title": "Expiration Date",
            "type": "string"
          }
        },
        "example": {
          "expiration_date": "2044-12-31T21:22:23"
        }
      },
      "RoleMapping": {
        "title": "RoleMapping",
        "required": [
          "role",
          "resource_type",
          "resource_id"
        ],
        "type": "object",
        "properties": {
          "role": {
            "title": "Role",
            "type": "string"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AccessResourceType"
          },
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          }
        },
        "example": {
          "role": "admin",
          "resource_type": "workspace",
          "resource_id": "fooBarBaz"
        }
      },
      "RoleModel": {
        "title": "RoleModel",
        "required": [
          "resource_id",
          "resource_type",
          "role"
        ],
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AccessResourceType"
          },
          "role": {
            "$ref": "#/components/schemas/UserRoles"
          }
        },
        "description": "Represents user role model."
      },
      "RolePatch": {
        "title": "RolePatch",
        "required": [
          "role",
          "resource_type",
          "resource_id",
          "operation"
        ],
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/SpiceDBResourceUserRoles"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AccessResourceType"
          },
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          },
          "operation": {
            "title": "Operation",
            "enum": [
              "TOUCH",
              "DELETE"
            ],
            "type": "string"
          }
        }
      },
      "RolesOutputModel": {
        "title": "RolesOutputModel",
        "required": [
          "roles"
        ],
        "type": "object",
        "properties": {
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMapping"
            }
          }
        }
      },
      "RolesPatchModel": {
        "title": "RolesPatchModel",
        "required": [
          "roles"
        ],
        "type": "object",
        "properties": {
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolePatch"
            }
          }
        }
      },
      "ServiceAccountOutputModel": {
        "title": "ServiceAccountOutputModel",
        "required": [
          "expiration_date"
        ],
        "type": "object",
        "properties": {
          "expiration_date": {
            "title": "Expiration Date",
            "type": "string"
          }
        },
        "example": {
          "expiration_date": "2044-12-31T21:22:23"
        }
      },
      "ServiceAccountWithPasswordOutputModel": {
        "title": "ServiceAccountWithPasswordOutputModel",
        "required": [
          "service_id",
          "expiration_date"
        ],
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          },
          "expiration_date": {
            "title": "Expiration Date",
            "type": "string"
          }
        },
        "example": {
          "expiration_date": "2044-12-31T21:22:23",
          "service_id": "32-alpha-numeric-characters:32-alpha-numeric-characters"
        }
      },
      "ServiceIdData": {
        "title": "ServiceIdData",
        "required": [
          "service_id"
        ],
        "type": "object",
        "properties": {
          "service_id": {
            "title": "Service Id",
            "type": "string"
          }
        },
        "example": {
          "service_id": "32-alpha-numeric-characters:32-alpha-numeric-characters"
        }
      },
      "SpiceDBResourceUserRoles": {
        "title": "SpiceDBResourceUserRoles",
        "enum": [
          "admin",
          "contributor"
        ],
        "type": "string",
        "description": "Available resources user roles for use in SpiceDB"
      },
      "UserModel": {
        "title": "UserModel",
        "required": [
          "uid",
          "name",
          "mail",
          "registered"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "title": "Uid",
            "maxLength": 200,
            "type": "string"
          },
          "name": {
            "title": "Name",
            "maxLength": 200,
            "type": "string"
          },
          "mail": {
            "title": "Mail",
            "maxLength": 200,
            "type": "string"
          },
          "registered": {
            "title": "Registered",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "user_photo": {
            "title": "User Photo",
            "type": "string"
          }
        }
      },
      "UserRole": {
        "title": "UserRole",
        "required": [
          "role",
          "resource_type",
          "resource_id"
        ],
        "type": "object",
        "properties": {
          "role": {
            "title": "Role",
            "type": "string"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AccessResourceType"
          },
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          }
        }
      },
      "UserRoles": {
        "title": "UserRoles",
        "enum": [
          "ADMIN",
          "CONTRIBUTOR"
        ],
        "type": "string",
        "description": "Enum with roles that can be assigned to a user."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "AggregateItem": {
        "properties": {
          "group": {
            "items": {
              "$ref": "#/components/schemas/GroupItem"
            },
            "type": "array",
            "title": "Group"
          },
          "result": {
            "$ref": "#/components/schemas/AggregatesResult"
          }
        },
        "type": "object",
        "required": [
          "group",
          "result"
        ],
        "title": "AggregateItem"
      },
      "AggregatesKey": {
        "type": "string",
        "enum": [
          "project",
          "service_name",
          "date"
        ],
        "title": "AggregatesKey",
        "description": "Allowed keys for transaction aggregates"
      },
      "AggregatesResponse": {
        "properties": {
          "aggregates": {
            "items": {
              "$ref": "#/components/schemas/AggregateItem"
            },
            "type": "array",
            "title": "Aggregates"
          }
        },
        "type": "object",
        "required": [
          "aggregates"
        ],
        "title": "AggregatesResponse"
      },
      "AggregatesResult": {
        "properties": {
          "credits": {
            "type": "integer",
            "title": "Credits"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourcesAmount"
          }
        },
        "type": "object",
        "required": [
          "credits",
          "resources"
        ],
        "title": "AggregatesResult"
      },
      "BalancePayload": {
        "properties": {
          "add": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Add"
          },
          "subtract": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtract"
          }
        },
        "type": "object",
        "title": "BalancePayload"
      },
      "BalanceResponse": {
        "properties": {
          "incoming": {
            "type": "integer",
            "title": "Incoming"
          },
          "available": {
            "type": "integer",
            "title": "Available"
          }
        },
        "type": "object",
        "required": [
          "incoming",
          "available"
        ],
        "title": "BalanceResponse"
      },
      "CreditAccount": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "renewable_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewable Amount"
          },
          "renewal_day_of_month": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewal Day Of Month"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "updated": {
            "type": "integer",
            "title": "Updated"
          },
          "expires": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires"
          },
          "balance": {
            "$ref": "#/components/schemas/BalanceResponse"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "created",
          "updated",
          "balance"
        ],
        "title": "CreditAccount"
      },
      "CreditAccountPostPayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "init_amount": {
            "type": "integer",
            "title": "Init Amount"
          },
          "renewable_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewable Amount"
          },
          "renewal_day_of_month": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewal Day Of Month"
          },
          "expires": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires"
          }
        },
        "type": "object",
        "required": [
          "name",
          "init_amount"
        ],
        "title": "CreditAccountPostPayload"
      },
      "CreditAccountPutPayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "renewable_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewable Amount"
          },
          "expires": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreditAccountPutPayload"
      },
      "CreditAccountsResponse": {
        "properties": {
          "total_matched": {
            "type": "integer",
            "title": "Total Matched"
          },
          "next_page": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NextPage"
              },
              {
                "type": "null"
              }
            ]
          },
          "credit_accounts": {
            "items": {
              "$ref": "#/components/schemas/CreditAccount"
            },
            "type": "array",
            "title": "Credit Accounts"
          }
        },
        "type": "object",
        "required": [
          "total_matched",
          "next_page",
          "credit_accounts"
        ],
        "title": "CreditAccountsResponse"
      },
      "GroupItem": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "GroupItem"
      },
      "ListProductResponse": {
        "properties": {
          "total_matched": {
            "type": "integer",
            "title": "Total Matched"
          },
          "next_page": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NextPage"
              },
              {
                "type": "null"
              }
            ]
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "total_matched",
          "next_page",
          "products"
        ],
        "title": "ListProductResponse"
      },
      "NextPage": {
        "properties": {
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "skip"
        ],
        "title": "NextPage"
      },
      "Product": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "product_policies": {
            "items": {
              "$ref": "#/components/schemas/ProductPolicy"
            },
            "type": "array",
            "title": "Product Policies"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "updated": {
            "type": "integer",
            "title": "Updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "product_policies",
          "created",
          "updated"
        ],
        "title": "Product"
      },
      "ProductPolicy": {
        "properties": {
          "account_name": {
            "type": "string",
            "title": "Account Name"
          },
          "init_amount": {
            "type": "integer",
            "title": "Init Amount"
          },
          "renewable_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Renewable Amount"
          },
          "expires_in": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires In"
          }
        },
        "type": "object",
        "required": [
          "account_name",
          "init_amount"
        ],
        "title": "ProductPolicy"
      },
      "ResourcesAmount": {
        "properties": {
          "images": {
            "type": "integer",
            "title": "Images",
            "default": 0
          },
          "frames": {
            "type": "integer",
            "title": "Frames",
            "default": 0
          }
        },
        "type": "object",
        "title": "ResourcesAmount"
      },
      "SubscriptionPayload": {
        "properties": {
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus"
              }
            ],
            "default": "active"
          }
        },
        "type": "object",
        "required": [
          "product_id"
        ],
        "title": "SubscriptionPayload"
      },
      "SubscriptionResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "renewal_day_of_month": {
            "type": "integer",
            "title": "Renewal Day Of Month"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "updated": {
            "type": "integer",
            "title": "Updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "product_id",
          "renewal_day_of_month",
          "status",
          "created",
          "updated"
        ],
        "title": "SubscriptionResponse"
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "new",
          "active",
          "cancelled"
        ],
        "title": "SubscriptionStatus",
        "description": "Possible organization's subscription states"
      },
      "TransactionInfo": {
        "properties": {
          "credits": {
            "type": "integer",
            "title": "Credits"
          },
          "workspace_id": {
            "type": "string",
            "title": "Workspace Id"
          },
          "project_id": {
            "type": "string",
            "title": "Project Id"
          },
          "service_name": {
            "type": "string",
            "title": "Service Name"
          },
          "milliseconds_timestamp": {
            "type": "integer",
            "title": "Milliseconds Timestamp"
          }
        },
        "type": "object",
        "required": [
          "credits",
          "workspace_id",
          "project_id",
          "service_name",
          "milliseconds_timestamp"
        ],
        "title": "TransactionInfo"
      },
      "TransactionsResponse": {
        "properties": {
          "total_matched": {
            "type": "integer",
            "title": "Total Matched"
          },
          "next_page": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NextPage"
              },
              {
                "type": "null"
              }
            ]
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/TransactionInfo"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "total_matched",
          "next_page",
          "transactions"
        ],
        "title": "TransactionsResponse"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  },
  "x-original-swagger-version": "2.0",
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}