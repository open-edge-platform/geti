# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

CWD = $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
include $(CWD)/Makefile.shared

.PHONY: tests test-unit-default test-component-default test-integration-default \
		static-code-analysis-default ruff mypy style-fix \
		pre-venv venv venv-lock venv-dev

PYTHONPATH_LOCAL     := tests:app

# Dev environment
PYTHON_VERSION       := python3.10
UV_VERSION           := 0.6.12

# PIP installation command
PIP_INSTALL_PARAMS   := --trusted-host pypi.org \
					    --trusted-host pypi.python.org \
					    --trusted-host files.pythonhosted.org \

clean:
	@rm -rf .venv .pytest_cache .coverage .ruff_cache .mypy_cache
	@find . -name .pytest_cache -type d -prune -exec rm -rf {} \;

pre-venv:
	@if ! uv --version | grep ${UV_VERSION}; then \
		curl --proto '=https' --tlsv1.2 -LsSf https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/uv-installer.sh | sh; \
	fi

venv: pre-venv
	uv lock --check
	uv sync --frozen ${PIP_INSTALL_PARAMS}

venv-lock: pre-venv
	uv lock

tests: test-unit test-component test-integration

test-unit-default: venv
	@if [ -d "./tests/unit" ]; then \
		PYTHONPATH=$(PYTHONPATH_LOCAL) \
		uv run pytest ./tests/unit -v; \
	else \
		echo "./tests/unit directory not found - skipping unit tests"; \
	fi

test-integration-default: venv
	@if [ -d "./tests/integration" ]; then \
		PYTHONPATH=$(PYTHONPATH_LOCAL) \
		uv run pytest ./tests/integration -v; \
	else \
		echo "./tests/integration directory not found - skipping integration tests"; \
	fi

test-component-default: venv
	@if [ -d "./tests/component" ]; then \
		PYTHONPATH=$(PYTHONPATH_LOCAL) \
		uv run pytest ./tests/component -v; \
	else \
		echo "./tests/component directory not found - skipping component tests"; \
	fi


install_common_libs:
	@echo "This service has no common libs defined."

static-code-analysis-default: ruff mypy

ruff: venv
	uv run ruff check --config pyproject.toml
	uv run ruff format --check --config pyproject.toml

mypy: venv
	uv run mypy $(if $(FILES),$(FILES),.) --config-file=pyproject.toml

style-fix: venv
	uv run ruff check --config pyproject.toml --fix
	uv run ruff format --config pyproject.toml

build-image:
	@echo "Preparing common libs for component: ${COMPONENT_NAME}"
	make install_common_libs
	@echo "Building docker image for component: ${COMPONENT_NAME}"
	@docker build \
		${DOCKER_EXTRA_ARGS} \
		${DOCKER_BUILD_CONTEXT} \
		-t ${IMAGES_REGISTRY}/${COMPONENT_NAME}:${TAG} \
		-f ./Dockerfile .

# TODO: Move to interactive_ai/services after https://youtrack.jetbrains.com/issue/PY-79081 is fixed
# Creates a python venv that can be used for development containing all dependencies for the interactive_ai components
developer-venv: pre-venv
	@if [ ! -d ".venv" ]; then \
		uv venv; \
	fi
	@. .venv/bin/activate && \
	SERVICES="jobs auto_train dataset_ie director model_registration project_ie resource visual_prompt" && \
	for service in $$SERVICES; do \
		echo "Installing dependencies for $$service"; \
		cd interactive_ai/services/$$service && \
		uv sync --frozen --inexact --all-extras --active && \
		cd -; \
	done

builder:
	@docker run --rm -u $(id -u):$(getent group docker | cut -d: -f3) \
		-v "$(ROOT_DIR):/app" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-v ~/.docker/config.json:/home/bulider/.docker/config.json \
		-w "/app/$(RELATIVE_PATH)" ${DOCKER_PROXY} ${PYTHON_BUILDER_IMAGE} make $(BUILDER_ARGS)
