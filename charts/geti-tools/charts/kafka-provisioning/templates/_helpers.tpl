{{/* vim: set filetype=mustache: */}}

{{/*
Return the proper Kafka image name
*/}}
{{- define "kafka.image" -}}
{{- if .Values.image.registry -}}{{ printf "%s/%s/%s" .Values.image.registry .Values.image.repository .Values.image.name }}{{- else -}}{{- .Values.image.repository -}}{{- end -}}
{{- end -}}


{{/*
Return the proper Docker Image Registry Secret Names
*/}}
{{- define "kafka.imagePullSecrets" -}}
{{ include "common.images.pullSecrets" (dict "images" (list .Values.image  ) "global" .Values.global) }}
{{- end -}}


{{/*
Return true if encryption via TLS for client connections should be configured
*/}}
{{- define "kafka.client.tlsEncryption" -}}
{{- $tlsProtocols := list "tls" "mtls" "sasl_tls" -}}
{{- if (has .Values.auth.clientProtocol $tlsProtocols) -}}
    {{- true -}}
{{- end -}}
{{- end -}}


{{/*
Return true if encryption via TLS should be configured
*/}}
{{- define "kafka.tlsEncryption" -}}
{{- if or (include "kafka.client.tlsEncryption" .)   -}}
    {{- true -}}
{{- end -}}
{{- end -}}

{{/*
Return the type of listener
Usage:
{{ include "kafka.listenerType" ( dict "protocol" .Values.path.to.the.Value ) }}
*/}}
{{- define "kafka.listenerType" -}}
{{- if eq .protocol "plaintext" -}}
PLAINTEXT
{{- else if or (eq .protocol "tls") (eq .protocol "mtls") -}}
SSL
{{- else if eq .protocol "sasl_tls" -}}
SASL_SSL
{{- else if eq .protocol "sasl" -}}
SASL_PLAINTEXT
{{- end -}}
{{- end -}}



{{/*
Compile all warnings into a single message, and call fail.
*/}}
{{- define "kafka.validateValues" -}}
{{- $messages := list -}}
{{- $messages := append $messages (include "kafka.validateValues.tlsSecrets" .) -}}
{{- $messages := append $messages (include "kafka.validateValues.tlsSecrets.length" .) -}}
{{- $messages := without $messages "" -}}
{{- $message := join "\n" $messages -}}

{{- if $message -}}
{{-   printf "\nVALUES VALIDATION:\n%s" $message | fail -}}
{{- end -}}
{{- end -}}


{{/* Validate values of Kafka - Secrets containing TLS certs must be provided when TLS authentication is enabled */}}
{{- define "kafka.validateValues.tlsSecrets" -}}
{{- if and (include "kafka.tlsEncryption" .) (eq .Values.auth.tls.type "jks") (empty .Values.auth.tls.existingSecrets) }}
kafka: auth.tls.existingSecrets
    A secret containing the Kafka JKS keystores and truststore is required
    when TLS encryption in enabled and TLS format is "JKS"
{{- else if and (include "kafka.tlsEncryption" .) (eq .Values.auth.tls.type "pem") (empty .Values.auth.tls.existingSecrets) (not .Values.auth.tls.autoGenerated) }}
kafka: auth.tls.existingSecrets
    A secret containing the Kafka TLS certificates and keys is required
    when TLS encryption in enabled and TLS format is "PEM"
{{- end -}}
{{- end -}}

{{/* Validate values of Kafka - The number of secrets containing TLS certs should be equal to the number of replicas */}}
{{- define "kafka.validateValues.tlsSecrets.length" -}}
{{- $replicaCount := int .Values.replicaCount }}
{{- if and (include "kafka.tlsEncryption" .) (not (empty .Values.auth.tls.existingSecrets)) }}
{{- $existingSecretsLength := len .Values.auth.tls.existingSecrets }}
{{- if ne $replicaCount $existingSecretsLength }}
kafka: .Values.auth.tls.existingSecrets
    Number of replicas and existingSecrets array length must be the same. Currently: replicaCount = {{ $replicaCount }} and existingSecrets = {{ $existingSecretsLength }}
{{- end -}}
{{- end -}}
{{- end -}}


{{- define "kafka.topic.replicationFactor" -}}
{{ .topic.replicationFactor | default .context.Values.provisioning.replicationFactor }}
{{- end }}

{{- define "kafka.topic.numPartitions" -}}
{{ .topic.partitions | default .context.Values.provisioning.numPartitions }}
{{- end }}

{{- define "kafka.topic.operations" -}}
{{- range $name, $value := .topic.config }}{{ printf "--config %s=%s " $name $value }}{{- end }}
{{- end }}

{{- define "kafka.topic.line" -}}
{{- printf "%s;%s;%s;%s" .topic.name (include "kafka.topic.replicationFactor" (dict "topic" .topic "context" .context )) (include "kafka.topic.numPartitions" (dict "topic" .topic "context" .context )) (include "kafka.topic.operations" (dict "topic" .topic)) -}}
{{- end }}

{{- define "kafka.acl.operations" -}}
{{- range $operation := .acl.operations }}{{ printf "--operation %s " $operation }}{{- end }}
{{- end }}

{{- define "kafka.acl.line" -}}
{{- printf "%s;%s;%s" .acl.topic .acl.user (include "kafka.acl.operations" (dict "acl" .acl )) -}}
{{- end }}
