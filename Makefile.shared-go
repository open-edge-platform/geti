# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

CWD = $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
include $(CWD)/Makefile.shared

.PHONY: build deps clean tests test-unit-default test-integration-default coverage static-code-analysis-default lint lint-install mocks mocks-install

GOPATH ?= $(HOME)/go
GOBIN ?= $(GOPATH)/bin
GOLANGCI_LINT_VERSION = v2.1.6
MOCKERY_VERSION = v3.2.5
TIMEOUT = 15m

# Go commands
GOCMD   := go
GOBUILD := $(GOCMD) build
GOTEST  := $(GOCMD) test

GOOS           ?= linux
CGO_ENABLED    ?= 0
GO_BUILD_FLAGS ?= -trimpath -mod=readonly -gcflags="all=-spectre=all" -asmflags="all=-spectre=all" -ldflags="all=-s -w" -a
OUTPUT_BINARY  ?= service

deps: ## Clean up and verify modules
	$(GOCMD) mod tidy

build-default: ## Build the Go binary
	GOOS=$(GOOS) CGO_ENABLED=$(CGO_ENABLED) $(GOBUILD) $(GO_BUILD_FLAGS) -o $(OUTPUT_BINARY) .

clean: ## Remove binary and coverage artifacts
	rm -f $(OUTPUT_BINARY) coverage.out

tests: test-unit test-integration

test-unit-default: ## Run unit tests
	$(GOTEST) -v -race -short ./...

test-integration-default: ## Run integration tests (requires -tags=integration in code)
	$(GOTEST) -v -race -tags=integration ./...

coverage: ## Run tests and generate a coverage profile
	$(GOTEST) -coverprofile=coverage.out ./...
	@echo "Coverage report generated at coverage.out"

## Run static analysis/linters in read-only mode (e.g., for CI checks).
## This will fail on lint errors but won't modify any files.
static-code-analysis-default: lint-install
	$(GOBIN)/golangci-lint run --timeout $(TIMEOUT)

## Run linter in "fix" mode to automatically correct code where possible.
## Generally used locally to clean up code before committing.
lint: lint-install
	$(GOBIN)/golangci-lint run --fix --timeout $(TIMEOUT)

lint-install:
	@if ! command -v $(GOBIN)/golangci-lint >/dev/null 2>&1 || [ "v$$($(GOBIN)/golangci-lint version --short | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" != "$(GOLANGCI_LINT_VERSION)" ]; then \
		echo "Installing golangci-lint $(GOLANGCI_LINT_VERSION)..."; \
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(GOBIN) $(GOLANGCI_LINT_VERSION); \
		echo "golangci-lint $(GOLANGCI_LINT_VERSION) installed at $(GOBIN)/golangci-lint"; \
	else \
		echo "golangci-lint $(GOLANGCI_LINT_VERSION) is already installed"; \
	fi

## Generate mocks for interfaces
mocks: mocks-install
	@echo "Generating mocks..."
	$(GOBIN)/mockery

mocks-install:
	@if ! command -v $(GOBIN)/mockery >/dev/null 2>&1; then \
		echo "Installing mockery $(MOCKERY_VERSION)..."; \
		go install github.com/vektra/mockery/v3@$(MOCKERY_VERSION); \
		echo "mockery $(MOCKERY_VERSION) installed at $(GOBIN)/mockery"; \
	else \
		echo "mockery $(MOCKERY_VERSION) is already installed"; \
	fi

##
# Builder container image
##
BUILDER_IMAGE ?= go-builder
